#import <Foundation/NSArray.h>
#import <Foundation/NSDictionary.h>
#import <Foundation/NSError.h>
#import <Foundation/NSObject.h>
#import <Foundation/NSSet.h>
#import <Foundation/NSString.h>
#import <Foundation/NSValue.h>

@class GNCDuration, GNCGenericNavigationZoomProviderZoomStep, GNCKotlinArray<T>, GNCBaseCameraComponentCompanion, GNCBaseCameraComponent, UIView, GNCFreezable, GNCLatLng, GNCCameraUpdatePadding, GNCCameraUpdate, GNCNavigationCameraUpdateProviderCompanion, GNCLocation, GNCSpeed, GNCGenericNavigationZoomProviderCompanion, GNCLength, GNCRoutingEventAwareZoomProviderZoomRange, GNCRoutingEventAwareZoomProviderCompanion, GNCKotlinIntRange, GNCStatefulManeuverAwareTiltProviderCompanion, GNCPredictedLocationProviderCompanion, GNCRouteUtils, GNCRouteWaypoint, GNCOnRouteProjectorProjectedLocation, GNCRouteFeatureCreatorRouteFeature, GNCColorUtils, GNCKotlinFloatArray, GNCColorUtilsColor, GNCKotlinEnumCompanion, GNCKotlinEnum<E>, GNCRelativeSpeedRouteFeatureCreatorCategory, GNCRouteFeatureCreatorCompanion, UIColor, GNCManeuverMapIconCreatorCompanion, GNCManeuverMapIconCreatorManeuverMapIcon, GNCTurnInfo, GNCTurnCommand, GNCManeuverMapIconCreator, GNCManeuverIconProvider, GNCManeuverIconProviderManeuverIcon, UIImage, GNCStaticChipManeuverColorProvider, GNCLaneIcon, GNCLaneIconComposition, GNCLaneIconCompositionProvider, GNCLaneInfoLane, GNCLaneInfo, GNCDetachConstants, GNCDurationConverterResult, GNCDistanceConverterResult, GNCMeasurementSystem, GNCDistanceConverterCompanion, GNCDurationConverterCompanion, GNCFormatUtils, GNCLabelParser, GNCTurnInfoUtils, GNCVoiceInstructionContext, GNCBaseLaneVoiceInstructionStringGeneratorLaneSection, GNCNavigationState, GNCVoiceInstructionHandlerInterceptorResult, GNCManeuver, GNCDurationBasedVoiceInstructionStageProviderCompanion, GNCKotlinLongRange, GNCBaseLaneVoiceInstructionStringGenerator, GNCGenericSpeakableConditionCreator, GNCGermanSpeakableDirectionProviderPrefixConfig, GNCGermanSpeakableDirectionProviderCompanion, NSLocale, GNCRoute, GNCKotlinException, GNCRouteData, GNCBaseNavigationSdkCompanion, GNCSimpleNavigationEventHandler, GNCBaseNavigationSdk, GNCIosInternetConnectionValidatorCompanion, GNCCredentialsApiKey, GNCCredentialsBasic, GNCHttpClientFactory, GNCHttpClient, GNCAccelerationEffectedSpeedTrackerCompanion, GNCCalculatingSpeedTrackerCompanion, GNCJKalmanFilter, GNCJKalmanFilterCompanion, GNCJKalmanMatrix<A>, GNCJKalmanMatrixApache, GNCJKalmanStepsCompanion, GNCKalmanPair<T>, GNCDeviceStatisticsProviderCompanion, GNCDeviceStatisticsProviderThermalState, GNCDeviceStatisticsProviderDeviceState, GNCDeviceStatisticsProviderDeviceStatistics, GNCLocationCompanion, GNCRouteSegment, GNCProjectionFinderOptions, GNCDistanceAlignmentProjectionFinderCompanion, GNCDistanceAlignmentProjectionFinderProjectionResult, GNCOnRoutePredictorOptions, GNCSpeedBasedOnRoutePredictorCompanion, GNCOnRouteShifterShiftedLocation, GNCOnRouteShifterShiftParameters, GNCRouteProgressTrackerRouteProgress, GNCDefaultNavigationStateRepositoryCompanion, GNCNavigationResult, GNCRouteProviderRouteRequest, GNCOnRouteTrackerState, GNCDistanceBasedUpdateRateProviderCompanion, GNCKotlinThrowable, GNCDistanceBasedLeavingDestinationValidatorCompanion, GNCRouteRequestJob, GNCKtorRouteProviderProbeDto, GNCKtorRouteProviderGetRouteBodyCompanion, GNCKtorRouteProviderGetRouteBody, GNCKtorRouteProviderProbeDtoCompanion, GNCRouteProviderType, GNCRouteProviderRouteRequestDestination, GNCRouteDto, GNCRouteDataDto, GNCFullRouteDtoConverterCompanion, GNCRouteDestinationInfo, GNCRouteDtoDestinationInfo, GNCFullRouteDtoConverter, GNCRouteDataDtoCompanion, GNCRouteDtoRouteLeg, GNCRouteDtoCompanion, GNCRouteDtoGeoPoint, GNCRouteDtoDestinationInfoCompanion, GNCRouteDtoEnforcementCompanion, GNCRouteDtoEnforcement, GNCRouteDtoGeoPointCompanion, GNCRouteDtoRouteLegStep, GNCRouteDtoRouteLegFuelStation, GNCRouteDtoRouteLegParkingArea, GNCRouteDtoRouteLegCompanion, GNCRouteDtoRouteLegFuelStationCompanion, GNCRouteDtoRouteLegPosition, GNCRouteDtoRouteLegParkingAreaCompanion, GNCRouteDtoRouteLegPositionCompanion, GNCRouteDtoRouteLegStepLane, GNCRouteDtoRouteLegStepTurnInfo, GNCRouteDtoRouteLegStepCompanion, GNCRouteDtoRouteLegStepLaneCompanion, GNCRouteDtoRouteLegStepTurnInfoCompanion, GNCRouteUtils_, GNCWeightedChanceCalculator, GNCChanceBasedOnRouteTrackerCompanion, GNCChanceCalculatorCompanion, GNCDistanceBasedChanceCalculatorCompanion, GNCHeadingBasedChanceCalculatorCompanion, GNCTurnCommandAlignmentChanceCalculatorCompanion, GNCLaneInfoLaneLaneTurn, GNCRoadClassCompanion, GNCRoadClass, GNCRoutableFactory, GNCRouteEnforcement, GNCRouteFuelStation, GNCRouteParkingArea, GNCRouteEnforcementType, GNCRouteFuelStationType, GNCRouteParkingAreaType, GNCRouteWaypointGpsQuality, GNCTurnCommandCompanion, GNCTurnInfoStreetSide, GNCVehicleConfigProperties, GNCTemplates, GNCGenericVehicleConfig, GNCTruckConfig, GNCVehicleConfigDimensions, GNCCLLocationConverter, CLLocation, CLLocationManager, GNCGMLog, GNCDurationCompanion, GNCLengthCompanion, GNCSpeedCompanion, GNCTimestampCompanion, GNCTimestamp, GNCGMAnalytics, GNCCoroutineDispatchers, GNCCoroutineDispatcher, GNCMainThread, GNCIncrementor, GNCAbstractOptimizationProblemCompanion, GNCRealVector, GNCAbstractEvaluation, GNCLeastSquaresFactoryCompanion, GNCLevenbergMarquardtOptimizerCompanion, GNCAbstractOptimizationProblem<PAIR>, GNCPair<K, V>, GNCPrecisionCompanion, GNCIncrementorCompanion, GNCMatrixUtilsCompanion, GNCKotlinDoubleArray, GNCAbstractRealMatrixCompanion, GNCAbstractRealMatrix, GNCArrayRealVector, GNCBlockRealMatrixCompanion, GNCBlockRealMatrix, GNCLUDecompositionCompanion, GNCQRDecomposition, GNCCartesian, GNCGeodesy, GNCGeodesySegment, GNCLatLngCompanion, GNCUUID, GNCTime, GNCHttpClientEngineConfig, GNCDarwin, GNCDarwinClientEngineConfig, GNCProxyConfig, NSMutableURLRequest, NSURLSessionConfiguration, NSURLSession, NSURLSessionTask, NSURLAuthenticationChallenge, GNCKotlinUnit, NSURLCredential, GNCIOException, NSError, GNCPinnedCertificateCompanion, GNCPinnedCertificate, GNCLogLevel, GNCLogger_Companion, GNCLoggingCompanion, GNCHttpRequestBuilder, GNCAttributeKey<T>, GNCLogging, GNCLoggingConfig, GNCAuthPlugin, GNCAuth, GNCHttpAuthHeader, GNCHttpResponse, GNCBearerTokens, GNCContentNegotiationPlugin, GNCContentType, GNCContentNegotiation, GNCContentNegotiationConfig, GNCJsonContentTypeMatcher, GNCHttpClientConfig<T>, GNCEvents, GNCHttpReceivePipeline, GNCHttpRequestPipeline, GNCHttpResponsePipeline, GNCHttpSendPipeline, GNCKotlinRuntimeException, GNCKotlinIllegalStateException, GNCHttpClientCall, GNCHttpRequestData, GNCHttpResponseData, GNCHttpClientCallCompanion, GNCTypeInfo, GNCKotlinUnsupportedOperationException, GNCOutgoingContent, GNCKotlinIllegalArgumentException, GNCUrl, GNCCacheControl, GNCHttpStatusCode, GNCOutgoingContentNoContent, GNCEmptyContent, GNCHttpMethod, GNCHeadersBuilder, GNCHttpRequestBuilderCompanion, GNCURLBuilder, GNCPipelinePhase, GNCPipeline<TSubject, TContext>, GNCHttpRequestPipelinePhases, GNCGMTDate, GNCHttpProtocolVersion, GNCHttpSendPipelinePhases, GNCFormPart<T>, GNCChannelProvider, GNCInputProvider, GNCByteReadPacket, GNCKotlinByteArray, GNCInput, GNCOutgoingContentByteArrayContent, GNCOutgoingContentWriteChannelContent, GNCPartData, GNCHttpReceivePipelinePhases, GNCHttpResponseContainer, GNCHttpResponsePipelinePhases, GNCProxyBuilder, GNCProxyType, GNCengines, GNCBodyProgressPlugin, GNCBodyProgress, GNCResponseException, GNCDataConversion, GNCDataConversion_, GNCDataConversion_Configuration, GNCDefaultRequestPlugin, GNCDefaultRequest, GNCDefaultRequestDefaultRequestBuilder, GNCHttpCallValidatorCompanion, GNCHttpCallValidator, GNCHttpCallValidatorConfig, GNCHttpPlainTextPlugin, GNCCharset, GNCHttpPlainText, GNCHttpPlainTextConfig, GNCHttpRedirectPlugin, GNCHttpRedirect, GNCHttpRedirectConfig, GNCEventDefinition<T>, GNCHttpRequestRetryPlugin, GNCHttpRequestRetryDelayContext, GNCHttpRequestRetryModifyRequestContext, GNCHttpRequestRetryShouldRetryContext, GNCHttpRequestRetry, GNCHttpRequestRetryConfiguration, GNCHttpRequestRetryRetryEventData, GNCHttpSendPlugin, GNCHttpSend, GNCHttpSendConfig, GNCHttpTimeoutPlugin, GNCHttpTimeoutHttpTimeoutCapabilityConfigurationCompanion, GNCHttpTimeoutHttpTimeoutCapabilityConfiguration, GNCHttpTimeout, GNCUserAgentPlugin, GNCUserAgent, GNCUserAgentConfig, GNCHttpCacheCompanion, GNCHttpCacheStorage, GNCHttpCache, GNCHttpCacheConfig, GNCHttpCacheStorageCompanion, GNCHttpCacheEntry, GNCFrame, GNCWebSocketCapability, GNCWebSocketExtensionsCapability, GNCWebSocketsPlugin, GNCWebSocketExtensionsConfig, GNCWebSockets, GNCWebSocketsConfig, GNCCookie, GNCHttpCookiesCompanion, GNCHttpCookies, GNCHttpCookiesConfig, GNCResponseObserverPlugin, GNCResponseObserver, GNCResponseObserverConfig, GNCContentConvertException, GNCWebsocketContentConvertException, GNCCloseReasonCodes, GNCCloseReason, GNCCloseReasonCodesCompanion, GNCFrameCompanion, GNCFrameType, GNCFrameTooBigException, GNCFrameTypeCompanion, GNCWebSocketExtensionHeader, GNCCacheControl_Visibility, GNCCacheControl_, GNCHeaderValueParam, GNCHeaderValueWithParametersCompanion, GNCHeaderValueWithParameters, GNCContentDispositionCompanion, GNCContentDisposition, GNCContentDispositionParameters, GNCContentRange, GNCContentRangeBounded, GNCContentRangeSuffix, GNCContentRangeTailFrom, GNCContentTypeCompanion, GNCContentTypeApplication, GNCContentTypeAudio, GNCContentTypeImage, GNCContentTypeMessage, GNCContentTypeMultiPart, GNCContentTypeText, GNCContentTypeVideo, GNCCookieEncoding, GNCEmptyHeaders, GNCHeaderValue, GNCHeadersCompanion, GNCStringValuesBuilderImpl, GNCStringValuesImpl, GNCStringValuesSingleImpl, GNCHttpHeaders, GNCHttpMethodCompanion, GNCHttpProtocolVersionCompanion, GNCHttpStatusCodeCompanion, GNCLinkHeaderParameters, GNCLinkHeaderRel, GNCParametersCompanion, GNCRangeUnits, GNCRangesSpecifier, GNCURLProtocol, GNCURLBuilderCompanion, GNCURLProtocolCompanion, GNCUrlCompanion, GNCAuthScheme, GNCHeaderValueEncoding, GNCHttpAuthHeaderCompanion, GNCHttpAuthHeaderParameterized, GNCHttpAuthHeaderParameters, GNCCachingOptions, GNCVersionCheckResult, GNCEntityTagVersionCompanion, GNCEntityTagVersion, GNCLastModifiedVersion, GNCMultiPartDataEmpty, GNCNullBody, GNCAlwaysFailNonceManager, GNCGenerateOnlyNonceManager, GNCHash, GNCIdentity, GNCPlatformUtils, GNCStringValuesCompanion, GNCThreadInfo, GNCWorkerStacktrace, GNCAtomicOp<__contravariant T>, GNCOpDescriptor, GNCLockFreeLinkedListNode, GNCLockFreeLinkedListNodeAddLastDesc<T>, GNCAtomicDesc, GNCLockFreeLinkedListNodeRemoveFirstDesc<T>, GNCKotlinNothing, GNCLockFreeLinkedListNodeAbstractAtomicDesc, GNCChannelIOException, GNCDelegatingConversionServiceConfiguration<T>, GNCDefaultConversionService, GNCKotlinAbstractCoroutineContextElement, GNCPluginNameKey, GNCPluginName, GNCPluginTraceElementPluginEvent, GNCPluginTraceElement, GNCPluginsTraceKey, GNCPluginsTrace, GNCGMTDateCompanion, GNCWeekDay, GNCMonth, GNCGMTDateParserCompanion, GNCMonthCompanion, GNCWeekDayCompanion, GNCMemory, GNCChunkBuffer, GNCBuffer, GNCBytePacketBuilder, GNCByteReadChannelCompanion, GNCKotlinCancellationException, GNCMemoryCompanion, GNCBufferCompanion, GNCByteOrderCompanion, GNCByteOrder, GNCOutput, GNCKotlinCharArray, GNCInputCompanion, GNCByteReadPacketCompanion, GNCSynchronizedObject, GNCDefaultPool<T>, GNCChunkBufferCompanion, GNCCharsetCompanion, GNCCharsetDecoder, GNCCharsetEncoder, GNCCharsets, GNCMalformedInputException, GNCPosixExceptionCompanion, GNCPosixException, GNCJobSupport, GNCCoroutineStart, GNCCoroutineDispatcherKey, GNCKotlinAbstractCoroutineContextKey<B, E>, GNCCoroutineExceptionHandlerKey, GNCCoroutineNameKey, GNCCoroutineName, GNCDispatchers, GNCMainCoroutineDispatcher, GNCGlobalScope, GNCJobKey, GNCNonCancellable, GNCNonDisposableHandle, GNCTimeoutCancellationException, GNCBufferOverflow, GNCChannelFactory, GNCKotlinNoSuchElementException, GNCSharingCommand, GNCSharingStartedCompanion, GNCChannelFlow<T>, GNCAtomicOp_<__contravariant T>, GNCOpDescriptor_, GNCLockFreeLinkedListNode_, GNCSynchronizedObjectLockState, GNCKotlinAtomicReference<T>, GNCThreadSafeHeap<T>, GNCDecodeSequenceMode, GNCSerializersModule, GNCJsonDefault, GNCJsonElement, GNCJsonConfiguration, GNCJson, GNCJsonElementCompanion, GNCJsonNamingStrategyBuiltins, GNCJsonPrimitiveCompanion, GNCJsonPrimitive, GNCJsonNull, GNCTraceBase, GNCTraceBaseNone, GNCSynchronizedObjectStatus, GNCSerializationException, GNCAbstractPolymorphicSerializer<T>, GNCAbstractCollectionSerializer<Element, Collection, Builder>, GNCTaggedDecoder<Tag>, GNCTaggedEncoder<Tag>, GNCSerialKind, GNCPolymorphicKind, GNCPolymorphicKindOPEN, GNCPolymorphicKindSEALED, GNCPrimitiveKind, GNCPrimitiveKindBOOLEAN, GNCPrimitiveKindBYTE, GNCPrimitiveKindCHAR, GNCPrimitiveKindDOUBLE, GNCPrimitiveKindFLOAT, GNCPrimitiveKindINT, GNCPrimitiveKindLONG, GNCPrimitiveKindSHORT, GNCPrimitiveKindSTRING, GNCSerialKindCONTEXTUAL, GNCSerialKindENUM, GNCStructureKind, GNCStructureKindCLASS, GNCStructureKindLIST, GNCStructureKindMAP, GNCStructureKindOBJECT, GNCLongAsStringSerializer, GNCCompositeDecoderCompanion, GNCGraphmastersNavigationCore, GNCKotlinCValue<T>, GNCKotlinDelegates, GNCBasicAuthConfig, GNCBearerAuthConfig, GNCDigestAuthConfig, GNCCloseableCoroutineDispatcher, GNCHttpStatement, GNCDefaultClientWebSocketSession, GNCFormBuilder, GNCNetworkAddress, GNCFrameClose, GNCFrameText, GNCKotlinLongProgressionCompanion, GNCKotlinLongIterator, GNCKotlinLongProgression, GNCKotlinLongRangeCompanion, GNCKotlinByteIterator, GNCKotlinIntArray, GNCKotlinLongArray, GNCKotlinShortArray, GNCKotlinIntIterator, GNCKotlinIntProgressionCompanion, GNCKotlinIntProgression, GNCKotlinIntRangeCompanion, GNCJsonArrayBuilder, GNCJsonObjectBuilder, GNCSerializersModuleBuilder, GNCPolymorphicModuleBuilder<__contravariant Base>, GNCClassSerialDescriptorBuilder, GNCKotlinBooleanCompanion, GNCKotlinByteCompanion, GNCKotlinCharCompanion, GNCKotlinDoubleCompanion, GNCKotlinFloatCompanion, GNCKotlinIntCompanion, GNCKotlinLongCompanion, GNCKotlinShortCompanion, GNCKotlinStringCompanion, GNCKotlinUByteCompanion, GNCKotlinUIntCompanion, GNCKotlinULongCompanion, GNCKotlinUShortCompanion, GNCKotlinDurationCompanion, GNCKotlinDurationUnit, GNCKtorSessionClient, GNCKtorRouteProvider, NSDate, GNCHttpResponseReceiveFail, GNCConnectTimeoutException, GNCSocketTimeoutException, GNCKotlinPair<__covariant A, __covariant B>, GNCJsonBuilder, GNCTraceFormat, GNCAtomicArray<T>, GNCKotlinFloatIterator, GNCKotlinDoubleIterator, GNCKotlinKTypeProjection, GNCKotlinCharIterator, GNCKotlinAutofreeScope, GNCKotlinCValuesRef<T>, GNCKotlinCValues<T>, GNCKotlinShortIterator, GNCKotlinKVariance, GNCKotlinKTypeProjectionCompanion, GNCKotlinDeferScope;

@protocol GNCExecutor, GNCNavigationSdk, GNCPaddingProvider, GNCRouteDetachStateProvider, GNCNavigationCameraHandlerCameraTrackingListener, GNCNavigationCameraHandlerCameraUpdateListener, GNCNavigationCameraHandler, GNCCameraUpdateProvider, GNCCameraLocationProvider, GNCHeadingProvider, GNCZoomProvider, GNCTiltProvider, GNCOnRoutePredictor, GNCSpeedTracker, GNCTimeProvider, GNCLocationProviderLocationUpdateListener, GNCLocationProvider, GNCRouteFeatureCreator, GNCRelativeSpeedRouteFeatureCreatorColorProvider, GNCKotlinComparable, GNCManeuverImageProvider, GNCViewImageRenderer, GNCChipManeuverColorProvider, GNCDurationConverter, GNCDistanceConverter, GNCRoutable, GNCVoiceInstructionStringGenerator, GNCVoiceInstructionHandlerInterceptor, GNCVoiceInstructionHandler, GNCOnNavigationStateUpdatedListener, GNCVoiceInstructionDispatcher, GNCVoiceInstructionContextProvider, GNCVoiceInstructionStageProvider, GNCSpeakableConditionCreator, GNCLanguageProvider, GNCSpeakableDirectionProvider, GNCInterceptingValidatorInterceptor, GNCLocationUpdateListener, GNCOnNavigationStateInitializedListener, GNCStatisticsProvider, GNCVehicleConfig, GNCDestinationRepository, GNCLocationRepository, GNCNavigationEventHandler, GNCOnRouteProjector, GNCRouteProgressTracker, GNCSessionClient, GNCRouteProvider, GNCInternetConnectionValidator, GNCUpdateRateProvider, GNCEncoder, GNCSerialDescriptor, GNCSerializationStrategy, GNCDecoder, GNCDeserializationStrategy, GNCKSerializer, GNCCredentials, GNCHttpClientEngine, GNCAccelerationEffectedSpeedTrackerDecelerationModifier, GNCRealMatrix, GNCDeviceStatisticsProviderDeviceStateProvider, GNCNavigationEventHandlerOnInitialRouteReceivedListener, GNCOnRouteProjectorOnRouteProjectorListener, GNCProjectionFinder, GNCDistanceAlignmentProjectionFinderProjectionResultListener, GNCOnRoutePredictorOnRoutePredictionListener, GNCOnRouteShifter, GNCNavigationStateRepository, GNCOnRouteTracker, GNCValidator, GNCSessionClientCallback, GNCSessionRepository, GNCSessionIdGenerator, GNCNavigationEventHandlerOnDestinationChangedListener, GNCNavigationEventHandlerOnDestinationReachedListener, GNCNavigationEventHandlerOnLeavingDestinationListener, GNCNavigationEventHandlerOnNavigationStartedListener, GNCNavigationEventHandlerOnNavigationStoppedListener, GNCNavigationEventHandlerOnOffRouteListener, GNCNavigationEventHandlerOnRouteRequestFailedListener, GNCNavigationEventHandlerOnRouteUpdateListener, GNCNavigationEventHandlerOnTrackingSpeedReachedListener, GNCDestinationRepositoryOnDestinationChangedListener, GNCMultiStopRepositoryOnStopsChangedListener, GNCMultiStopRepository, GNCNavigationEngine, GNCRouteRepositoryRouteUpdatedListener, GNCRouteProgressTrackerOnRouteProgressUpdatedListener, GNCOnRouteTrackerOnRouteStateListener, GNCRouteRepository, GNCRouteProgressStateUpdater, GNCSchedulingRouteRepositoryOffRouteRequestValidator, GNCRouteRequestJobListener, GNCRoutingConfig, GNCRouteDtoConverter, GNCRoutingParamProvider, GNCRouteMerger, GNCChanceCalculator, GNCExecutorFuture, CLLocationManagerDelegate, GNCLogger, GNCSerializable, GNCMeasurementSystemProvider, GNCAnalyticsHandler, GNCOptimizationProblem, GNCLeastSquaresProblemEvaluation, GNCLeastSquaresProblem, GNCMultivariateJacobianFunction, GNCLeastSquaresOptimizerOptimum, GNCLeastSquaresOptimizer, GNCKotlinIterator, GNCIncrementorMaxCountExceededCallback, GNCAnyMatrix, GNCRealMatrixPreservingVisitor, GNCDecompositionSolver, GNCHttpClientEngineFactory, GNCLogger_, GNCHttpClientPlugin, GNCAuthProvider, GNCKotlinSuspendFunction0, GNCKotlinSuspendFunction1, GNCContentConverter, GNCConfiguration, GNCKotlinKClass, GNCContentTypeMatcher, GNCKotlinCoroutineContext, GNCCoroutineScope, GNCCloseable, GNCHttpClientEngineCapability, GNCAttributes, GNCByteReadChannel, GNCHttpRequest, GNCHeaders, GNCByteWriteChannel, GNCHttpMessage, GNCHttpMessageBuilder, GNCJob, GNCKotlinSuspendFunction2, GNCParameters, GNCKotlinIterable, GNCKotlinSuspendFunction3, GNCWebSocketExtension, GNCReceiveChannel, GNCSendChannel, GNCWebSocketSession, GNCClientWebSocketSession, GNCDeferred, GNCDefaultWebSocketSession, GNCWebsocketContentConverter, GNCCookiesStorage, GNCDisposableHandle, GNCSerialFormat, GNCCopyableThrowable, GNCWebSocketExtensionFactory, GNCKotlinSequence, GNCKotlinMapEntry, GNCStringValues, GNCStringValuesBuilder, GNCParametersBuilder, GNCVersion, GNCMultiPartData, GNCNonceManager, GNCEncoder_, GNCConversionService, GNCKotlinKType, GNCKotlinCoroutineContextKey, GNCKotlinCoroutineContextElement, GNCReadSession, GNCKotlinAppendable, GNCByteChannel, GNCSuspendableReadSession, GNCObjectPool, GNCWriterSuspendSession, GNCChildHandle, GNCChildJob, GNCSelectClause0, GNCWriterSession, GNCAllocator, GNCParentJob, GNCSelectClause1, GNCKotlinContinuation, GNCKotlinContinuationInterceptor, GNCRunnable, GNCCancellableContinuation, GNCSelectClause2, GNCChannelIterator, GNCBroadcastChannel, GNCFlowCollector, GNCFlow, GNCStateFlow, GNCSharedFlow, GNCMutableSharedFlow, GNCSharingStarted, GNCFusibleFlow, GNCProducerScope, GNCSelectInstance, GNCSelectClause, GNCMainDispatcherFactory, GNCStringFormat, GNCJsonNamingStrategy, GNCCompositeDecoder, GNCCompositeEncoder, GNCSerializersModuleCollector, GNCKotlinAnnotation, GNCKotlinReadWriteProperty, GNCKotlinKProperty, GNCKotlinClosedRange, GNCKotlinOpenEndRange, GNCBinaryFormat, GNCDigest, GNCLogger__, GNCReaderJob, GNCWriterJob, GNCKotlinNativePlacement, GNCKotlinNativeFreeablePlacement, GNCKotlinReadOnlyProperty, GNCCompletableJob, GNCCompletableDeferred, GNCCoroutineExceptionHandler, GNCChannel, GNCMutableStateFlow, GNCKotlinSuspendFunction5, GNCKotlinSuspendFunction4, GNCKotlinSuspendFunction6, GNCSelectBuilder, GNCMutex, GNCSemaphore, GNCKotlinFunction, GNCKotlinKDeclarationContainer, GNCKotlinKAnnotatedElement, GNCKotlinKClassifier, GNCKotlinKCallable;

NS_ASSUME_NONNULL_BEGIN
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunknown-warning-option"
#pragma clang diagnostic ignored "-Wincompatible-property-type"
#pragma clang diagnostic ignored "-Wnullability"

#pragma push_macro("_Nullable_result")
#if !__has_feature(nullability_nullable_result)
#undef _Nullable_result
#define _Nullable_result _Nullable
#endif

__attribute__((swift_name("KotlinBase")))
@interface GNCBase : NSObject
- (instancetype)init __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (void)initialize __attribute__((objc_requires_super));
@end

@interface GNCBase (GNCBaseCopying) <NSCopying>
@end

__attribute__((swift_name("KotlinMutableSet")))
@interface GNCMutableSet<ObjectType> : NSMutableSet<ObjectType>
@end

__attribute__((swift_name("KotlinMutableDictionary")))
@interface GNCMutableDictionary<KeyType, ObjectType> : NSMutableDictionary<KeyType, ObjectType>
@end

@interface NSError (NSErrorGNCKotlinException)
@property (readonly) id _Nullable kotlinException;
@end

__attribute__((swift_name("KotlinNumber")))
@interface GNCNumber : NSNumber
- (instancetype)initWithChar:(char)value __attribute__((unavailable));
- (instancetype)initWithUnsignedChar:(unsigned char)value __attribute__((unavailable));
- (instancetype)initWithShort:(short)value __attribute__((unavailable));
- (instancetype)initWithUnsignedShort:(unsigned short)value __attribute__((unavailable));
- (instancetype)initWithInt:(int)value __attribute__((unavailable));
- (instancetype)initWithUnsignedInt:(unsigned int)value __attribute__((unavailable));
- (instancetype)initWithLong:(long)value __attribute__((unavailable));
- (instancetype)initWithUnsignedLong:(unsigned long)value __attribute__((unavailable));
- (instancetype)initWithLongLong:(long long)value __attribute__((unavailable));
- (instancetype)initWithUnsignedLongLong:(unsigned long long)value __attribute__((unavailable));
- (instancetype)initWithFloat:(float)value __attribute__((unavailable));
- (instancetype)initWithDouble:(double)value __attribute__((unavailable));
- (instancetype)initWithBool:(BOOL)value __attribute__((unavailable));
- (instancetype)initWithInteger:(NSInteger)value __attribute__((unavailable));
- (instancetype)initWithUnsignedInteger:(NSUInteger)value __attribute__((unavailable));
+ (instancetype)numberWithChar:(char)value __attribute__((unavailable));
+ (instancetype)numberWithUnsignedChar:(unsigned char)value __attribute__((unavailable));
+ (instancetype)numberWithShort:(short)value __attribute__((unavailable));
+ (instancetype)numberWithUnsignedShort:(unsigned short)value __attribute__((unavailable));
+ (instancetype)numberWithInt:(int)value __attribute__((unavailable));
+ (instancetype)numberWithUnsignedInt:(unsigned int)value __attribute__((unavailable));
+ (instancetype)numberWithLong:(long)value __attribute__((unavailable));
+ (instancetype)numberWithUnsignedLong:(unsigned long)value __attribute__((unavailable));
+ (instancetype)numberWithLongLong:(long long)value __attribute__((unavailable));
+ (instancetype)numberWithUnsignedLongLong:(unsigned long long)value __attribute__((unavailable));
+ (instancetype)numberWithFloat:(float)value __attribute__((unavailable));
+ (instancetype)numberWithDouble:(double)value __attribute__((unavailable));
+ (instancetype)numberWithBool:(BOOL)value __attribute__((unavailable));
+ (instancetype)numberWithInteger:(NSInteger)value __attribute__((unavailable));
+ (instancetype)numberWithUnsignedInteger:(NSUInteger)value __attribute__((unavailable));
@end

__attribute__((swift_name("KotlinByte")))
@interface GNCByte : GNCNumber
- (instancetype)initWithChar:(char)value;
+ (instancetype)numberWithChar:(char)value;
@end

__attribute__((swift_name("KotlinUByte")))
@interface GNCUByte : GNCNumber
- (instancetype)initWithUnsignedChar:(unsigned char)value;
+ (instancetype)numberWithUnsignedChar:(unsigned char)value;
@end

__attribute__((swift_name("KotlinShort")))
@interface GNCShort : GNCNumber
- (instancetype)initWithShort:(short)value;
+ (instancetype)numberWithShort:(short)value;
@end

__attribute__((swift_name("KotlinUShort")))
@interface GNCUShort : GNCNumber
- (instancetype)initWithUnsignedShort:(unsigned short)value;
+ (instancetype)numberWithUnsignedShort:(unsigned short)value;
@end

__attribute__((swift_name("KotlinInt")))
@interface GNCInt : GNCNumber
- (instancetype)initWithInt:(int)value;
+ (instancetype)numberWithInt:(int)value;
@end

__attribute__((swift_name("KotlinUInt")))
@interface GNCUInt : GNCNumber
- (instancetype)initWithUnsignedInt:(unsigned int)value;
+ (instancetype)numberWithUnsignedInt:(unsigned int)value;
@end

__attribute__((swift_name("KotlinLong")))
@interface GNCLong : GNCNumber
- (instancetype)initWithLongLong:(long long)value;
+ (instancetype)numberWithLongLong:(long long)value;
@end

__attribute__((swift_name("KotlinULong")))
@interface GNCULong : GNCNumber
- (instancetype)initWithUnsignedLongLong:(unsigned long long)value;
+ (instancetype)numberWithUnsignedLongLong:(unsigned long long)value;
@end

__attribute__((swift_name("KotlinFloat")))
@interface GNCFloat : GNCNumber
- (instancetype)initWithFloat:(float)value;
+ (instancetype)numberWithFloat:(float)value;
@end

__attribute__((swift_name("KotlinDouble")))
@interface GNCDouble : GNCNumber
- (instancetype)initWithDouble:(double)value;
+ (instancetype)numberWithDouble:(double)value;
@end

__attribute__((swift_name("KotlinBoolean")))
@interface GNCBoolean : GNCNumber
- (instancetype)initWithBool:(BOOL)value;
+ (instancetype)numberWithBool:(BOOL)value;
@end

__attribute__((swift_name("LanguageProvider")))
@protocol GNCLanguageProvider
@required
@property (readonly) NSString *languageCode __attribute__((swift_name("languageCode")));
@property (readonly) NSString * _Nullable regionCode __attribute__((swift_name("regionCode")));
@end

__attribute__((swift_name("BaseCameraComponent")))
@interface GNCBaseCameraComponent : GNCBase
- (instancetype)initWithExecutor:(id<GNCExecutor>)executor navigationSdk:(id<GNCNavigationSdk>)navigationSdk paddingProvider:(id<GNCPaddingProvider>)paddingProvider updateRate:(GNCDuration *)updateRate __attribute__((swift_name("init(executor:navigationSdk:paddingProvider:updateRate:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithExecutor:(id<GNCExecutor>)executor navigationSdk:(id<GNCNavigationSdk>)navigationSdk paddingProvider:(id<GNCPaddingProvider>)paddingProvider detachStateProvider:(id<GNCRouteDetachStateProvider>)detachStateProvider updateRate:(GNCDuration *)updateRate __attribute__((swift_name("init(executor:navigationSdk:paddingProvider:detachStateProvider:updateRate:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithExecutor:(id<GNCExecutor>)executor navigationSdk:(id<GNCNavigationSdk>)navigationSdk paddingProvider:(id<GNCPaddingProvider>)paddingProvider zoomSteps:(GNCKotlinArray<GNCGenericNavigationZoomProviderZoomStep *> *)zoomSteps __attribute__((swift_name("init(executor:navigationSdk:paddingProvider:zoomSteps:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithExecutor:(id<GNCExecutor>)executor navigationSdk:(id<GNCNavigationSdk>)navigationSdk paddingProvider:(id<GNCPaddingProvider>)paddingProvider __attribute__((swift_name("init(executor:navigationSdk:paddingProvider:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithExecutor:(id<GNCExecutor>)executor navigationSdk:(id<GNCNavigationSdk>)navigationSdk paddingProvider:(id<GNCPaddingProvider>)paddingProvider detachStateProvider:(id<GNCRouteDetachStateProvider>)detachStateProvider updateRate:(GNCDuration *)updateRate zoomSteps:(GNCKotlinArray<GNCGenericNavigationZoomProviderZoomStep *> *)zoomSteps __attribute__((swift_name("init(executor:navigationSdk:paddingProvider:detachStateProvider:updateRate:zoomSteps:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCBaseCameraComponentCompanion *companion __attribute__((swift_name("companion")));
- (void)addCameraTrackingListenerCameraTrackingListener:(id<GNCNavigationCameraHandlerCameraTrackingListener>)cameraTrackingListener __attribute__((swift_name("addCameraTrackingListener(cameraTrackingListener:)")));
- (void)addCameraUpdateListenerCameraUpdateListener:(id<GNCNavigationCameraHandlerCameraUpdateListener>)cameraUpdateListener __attribute__((swift_name("addCameraUpdateListener(cameraUpdateListener:)")));
- (void)removeCameraTrackingListenerCameraTrackingListener:(id<GNCNavigationCameraHandlerCameraTrackingListener>)cameraTrackingListener __attribute__((swift_name("removeCameraTrackingListener(cameraTrackingListener:)")));
- (void)removeCameraUpdateListenerCameraUpdateListener:(id<GNCNavigationCameraHandlerCameraUpdateListener>)cameraUpdateListener __attribute__((swift_name("removeCameraUpdateListener(cameraUpdateListener:)")));
- (void)startCameraTracking __attribute__((swift_name("startCameraTracking()")));
- (void)stopCameraTracking __attribute__((swift_name("stopCameraTracking()")));
@property (readonly) BOOL cameraTrackingActive __attribute__((swift_name("cameraTrackingActive")));
@property (readonly) id<GNCNavigationCameraHandler> navigationCameraHandler __attribute__((swift_name("navigationCameraHandler")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BaseCameraComponent.Companion")))
@interface GNCBaseCameraComponentCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCBaseCameraComponentCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) GNCDuration *DEFAULT_UPDATE_RATE __attribute__((swift_name("DEFAULT_UPDATE_RATE")));
@property (readonly) float PADDING_TOP_RATIO __attribute__((swift_name("PADDING_TOP_RATIO")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CameraComponent")))
@interface GNCCameraComponent : GNCBaseCameraComponent
- (instancetype)initWithNavigationSdk:(id<GNCNavigationSdk>)navigationSdk mapView:(UIView *)mapView __attribute__((swift_name("init(navigationSdk:mapView:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithNavigationSdk:(id<GNCNavigationSdk>)navigationSdk paddingProvider:(id<GNCPaddingProvider>)paddingProvider __attribute__((swift_name("init(navigationSdk:paddingProvider:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithExecutor:(id<GNCExecutor>)executor navigationSdk:(id<GNCNavigationSdk>)navigationSdk paddingProvider:(id<GNCPaddingProvider>)paddingProvider updateRate:(GNCDuration *)updateRate __attribute__((swift_name("init(executor:navigationSdk:paddingProvider:updateRate:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithExecutor:(id<GNCExecutor>)executor navigationSdk:(id<GNCNavigationSdk>)navigationSdk paddingProvider:(id<GNCPaddingProvider>)paddingProvider detachStateProvider:(id<GNCRouteDetachStateProvider>)detachStateProvider updateRate:(GNCDuration *)updateRate __attribute__((swift_name("init(executor:navigationSdk:paddingProvider:detachStateProvider:updateRate:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithExecutor:(id<GNCExecutor>)executor navigationSdk:(id<GNCNavigationSdk>)navigationSdk paddingProvider:(id<GNCPaddingProvider>)paddingProvider zoomSteps:(GNCKotlinArray<GNCGenericNavigationZoomProviderZoomStep *> *)zoomSteps __attribute__((swift_name("init(executor:navigationSdk:paddingProvider:zoomSteps:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithExecutor:(id<GNCExecutor>)executor navigationSdk:(id<GNCNavigationSdk>)navigationSdk paddingProvider:(id<GNCPaddingProvider>)paddingProvider __attribute__((swift_name("init(executor:navigationSdk:paddingProvider:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithExecutor:(id<GNCExecutor>)executor navigationSdk:(id<GNCNavigationSdk>)navigationSdk paddingProvider:(id<GNCPaddingProvider>)paddingProvider detachStateProvider:(id<GNCRouteDetachStateProvider>)detachStateProvider updateRate:(GNCDuration *)updateRate zoomSteps:(GNCKotlinArray<GNCGenericNavigationZoomProviderZoomStep *> *)zoomSteps __attribute__((swift_name("init(executor:navigationSdk:paddingProvider:detachStateProvider:updateRate:zoomSteps:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((swift_name("Freezable")))
@interface GNCFreezable : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)freezeObject __attribute__((swift_name("freezeObject()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CameraUpdate")))
@interface GNCCameraUpdate : GNCFreezable
- (instancetype)initWithLatLng:(GNCLatLng *)latLng zoom:(GNCDouble * _Nullable)zoom tilt:(GNCDouble * _Nullable)tilt bearing:(GNCDouble * _Nullable)bearing dismissible:(BOOL)dismissible duration:(GNCDuration * _Nullable)duration padding:(GNCCameraUpdatePadding *)padding __attribute__((swift_name("init(latLng:zoom:tilt:bearing:dismissible:duration:padding:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCCameraUpdate *)doCopyLatLng:(GNCLatLng *)latLng zoom:(GNCDouble * _Nullable)zoom tilt:(GNCDouble * _Nullable)tilt bearing:(GNCDouble * _Nullable)bearing dismissible:(BOOL)dismissible duration:(GNCDuration * _Nullable)duration padding:(GNCCameraUpdatePadding *)padding __attribute__((swift_name("doCopy(latLng:zoom:tilt:bearing:dismissible:duration:padding:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCDouble * _Nullable bearing __attribute__((swift_name("bearing")));
@property (readonly) BOOL dismissible __attribute__((swift_name("dismissible")));
@property (readonly) GNCDuration * _Nullable duration __attribute__((swift_name("duration")));
@property (readonly) GNCLatLng *latLng __attribute__((swift_name("latLng")));
@property (readonly) GNCCameraUpdatePadding *padding __attribute__((swift_name("padding")));
@property (readonly) GNCDouble * _Nullable tilt __attribute__((swift_name("tilt")));
@property (readonly) GNCDouble * _Nullable zoom __attribute__((swift_name("zoom")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CameraUpdate.Padding")))
@interface GNCCameraUpdatePadding : GNCFreezable
- (instancetype)initWithLeft:(int32_t)left top:(int32_t)top right:(int32_t)right bottom:(int32_t)bottom __attribute__((swift_name("init(left:top:right:bottom:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCCameraUpdatePadding *)doCopyLeft:(int32_t)left top:(int32_t)top right:(int32_t)right bottom:(int32_t)bottom __attribute__((swift_name("doCopy(left:top:right:bottom:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t bottom __attribute__((swift_name("bottom")));
@property (readonly) int32_t left __attribute__((swift_name("left")));
@property (readonly) int32_t right __attribute__((swift_name("right")));
@property (readonly) int32_t top __attribute__((swift_name("top")));
@end

__attribute__((swift_name("CameraUpdateProvider")))
@protocol GNCCameraUpdateProvider
@required
@property (readonly) GNCCameraUpdate *cameraUpdate __attribute__((swift_name("cameraUpdate")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DetachAwareCameraUpdateProviderDelegate")))
@interface GNCDetachAwareCameraUpdateProviderDelegate : GNCBase <GNCCameraUpdateProvider>
- (instancetype)initWithDetachStateProvider:(id<GNCRouteDetachStateProvider>)detachStateProvider detachedCameraUpdateProvider:(id<GNCCameraUpdateProvider>)detachedCameraUpdateProvider defaultCameraUpdateProvider:(id<GNCCameraUpdateProvider>)defaultCameraUpdateProvider __attribute__((swift_name("init(detachStateProvider:detachedCameraUpdateProvider:defaultCameraUpdateProvider:)"))) __attribute__((objc_designated_initializer));
@property (readonly) GNCCameraUpdate *cameraUpdate __attribute__((swift_name("cameraUpdate")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DetachedCameraUpdateProvider")))
@interface GNCDetachedCameraUpdateProvider : GNCBase <GNCCameraUpdateProvider>
- (instancetype)initWithNavigationSdk:(id<GNCNavigationSdk>)navigationSdk paddingProvider:(id<GNCPaddingProvider>)paddingProvider __attribute__((swift_name("init(navigationSdk:paddingProvider:)"))) __attribute__((objc_designated_initializer));
@property (readonly) GNCCameraUpdate *cameraUpdate __attribute__((swift_name("cameraUpdate")));
@end

__attribute__((swift_name("NavigationCameraHandler")))
@protocol GNCNavigationCameraHandler
@required
- (void)addCameraTrackingListenerCameraTrackingListener:(id<GNCNavigationCameraHandlerCameraTrackingListener>)cameraTrackingListener __attribute__((swift_name("addCameraTrackingListener(cameraTrackingListener:)")));
- (void)addCameraUpdateListenerCameraUpdateListener:(id<GNCNavigationCameraHandlerCameraUpdateListener>)cameraUpdateListener __attribute__((swift_name("addCameraUpdateListener(cameraUpdateListener:)")));
- (void)removeCameraTrackingListenerCameraTrackingListener:(id<GNCNavigationCameraHandlerCameraTrackingListener>)cameraTrackingListener __attribute__((swift_name("removeCameraTrackingListener(cameraTrackingListener:)")));
- (void)removeCameraUpdateListenerCameraUpdateListener:(id<GNCNavigationCameraHandlerCameraUpdateListener>)cameraUpdateListener __attribute__((swift_name("removeCameraUpdateListener(cameraUpdateListener:)")));
- (void)startCameraTracking __attribute__((swift_name("startCameraTracking()")));
- (void)stopCameraTracking __attribute__((swift_name("stopCameraTracking()")));
@property (readonly) BOOL cameraTrackingActive __attribute__((swift_name("cameraTrackingActive")));
@end

__attribute__((swift_name("NavigationCameraHandlerCameraTrackingListener")))
@protocol GNCNavigationCameraHandlerCameraTrackingListener
@required
- (void)onCameraTrackingStarted __attribute__((swift_name("onCameraTrackingStarted()")));
- (void)onCameraTrackingStopped __attribute__((swift_name("onCameraTrackingStopped()")));
@end

__attribute__((swift_name("NavigationCameraHandlerCameraUpdateListener")))
@protocol GNCNavigationCameraHandlerCameraUpdateListener
@required
- (void)onCameraUpdateReadyCameraUpdate:(GNCCameraUpdate *)cameraUpdate __attribute__((swift_name("onCameraUpdateReady(cameraUpdate:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NavigationCameraUpdateProvider")))
@interface GNCNavigationCameraUpdateProvider : GNCBase <GNCCameraUpdateProvider>
- (instancetype)initWithCameraLocationProvider:(id<GNCCameraLocationProvider>)cameraLocationProvider headingProvider:(id<GNCHeadingProvider>)headingProvider zoomProvider:(id<GNCZoomProvider>)zoomProvider tiltProvider:(id<GNCTiltProvider>)tiltProvider paddingProvider:(id<GNCPaddingProvider>)paddingProvider updateDuration:(GNCDuration *)updateDuration __attribute__((swift_name("init(cameraLocationProvider:headingProvider:zoomProvider:tiltProvider:paddingProvider:updateDuration:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCNavigationCameraUpdateProviderCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) GNCCameraUpdate *cameraUpdate __attribute__((swift_name("cameraUpdate")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NavigationCameraUpdateProvider.Companion")))
@interface GNCNavigationCameraUpdateProviderCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCNavigationCameraUpdateProviderCompanion *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SchedulingCameraHandler")))
@interface GNCSchedulingCameraHandler : GNCBase <GNCNavigationCameraHandler>
- (instancetype)initWithCameraUpdateProvider:(id<GNCCameraUpdateProvider>)cameraUpdateProvider executor:(id<GNCExecutor>)executor nextUpdateOffset:(GNCDuration *)nextUpdateOffset __attribute__((swift_name("init(cameraUpdateProvider:executor:nextUpdateOffset:)"))) __attribute__((objc_designated_initializer));
- (void)addCameraTrackingListenerCameraTrackingListener:(id<GNCNavigationCameraHandlerCameraTrackingListener>)cameraTrackingListener __attribute__((swift_name("addCameraTrackingListener(cameraTrackingListener:)")));
- (void)addCameraUpdateListenerCameraUpdateListener:(id<GNCNavigationCameraHandlerCameraUpdateListener>)cameraUpdateListener __attribute__((swift_name("addCameraUpdateListener(cameraUpdateListener:)")));
- (void)removeCameraTrackingListenerCameraTrackingListener:(id<GNCNavigationCameraHandlerCameraTrackingListener>)cameraTrackingListener __attribute__((swift_name("removeCameraTrackingListener(cameraTrackingListener:)")));
- (void)removeCameraUpdateListenerCameraUpdateListener:(id<GNCNavigationCameraHandlerCameraUpdateListener>)cameraUpdateListener __attribute__((swift_name("removeCameraUpdateListener(cameraUpdateListener:)")));
- (void)startCameraTracking __attribute__((swift_name("startCameraTracking()")));
- (void)stopCameraTracking __attribute__((swift_name("stopCameraTracking()")));
@property BOOL cameraTrackingActive __attribute__((swift_name("cameraTrackingActive")));
@end

__attribute__((swift_name("HeadingProvider")))
@protocol GNCHeadingProvider
@required
- (GNCDouble * _Nullable)getHeadingLocation:(GNCLocation *)location __attribute__((swift_name("getHeading(location:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PredictionHeadingProvider")))
@interface GNCPredictionHeadingProvider : GNCBase <GNCHeadingProvider>
- (instancetype)initWithOnRoutePredictor:(id<GNCOnRoutePredictor>)onRoutePredictor speedTracker:(id<GNCSpeedTracker>)speedTracker maxManeuverStopSpeed:(GNCSpeed *)maxManeuverStopSpeed __attribute__((swift_name("init(onRoutePredictor:speedTracker:maxManeuverStopSpeed:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithOnRoutePredictor:(id<GNCOnRoutePredictor>)onRoutePredictor speedTracker:(id<GNCSpeedTracker>)speedTracker maxManeuverStopSpeed:(GNCSpeed * _Nullable)maxManeuverStopSpeed maxHeadingDeltaDegrees:(double)maxHeadingDeltaDegrees predictionDuration:(GNCDuration *)predictionDuration __attribute__((swift_name("init(onRoutePredictor:speedTracker:maxManeuverStopSpeed:maxHeadingDeltaDegrees:predictionDuration:)"))) __attribute__((objc_designated_initializer));
- (GNCDouble * _Nullable)getHeadingLocation:(GNCLocation *)location __attribute__((swift_name("getHeading(location:)")));
@end

__attribute__((swift_name("ZoomProvider")))
@protocol GNCZoomProvider
@required
- (double)convertSpeed:(GNCSpeed *)speed __attribute__((swift_name("convert(speed:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GenericNavigationZoomProvider")))
@interface GNCGenericNavigationZoomProvider : GNCBase <GNCZoomProvider>
- (instancetype)initWithZoomSteps:(GNCKotlinArray<GNCGenericNavigationZoomProviderZoomStep *> *)zoomSteps __attribute__((swift_name("init(zoomSteps:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCGenericNavigationZoomProviderCompanion *companion __attribute__((swift_name("companion")));
- (double)convertSpeed:(GNCSpeed *)speed __attribute__((swift_name("convert(speed:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GenericNavigationZoomProvider.Companion")))
@interface GNCGenericNavigationZoomProviderCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCGenericNavigationZoomProviderCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) GNCKotlinArray<GNCGenericNavigationZoomProviderZoomStep *> *ZOOM_STEPS __attribute__((swift_name("ZOOM_STEPS")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GenericNavigationZoomProvider.ZoomStep")))
@interface GNCGenericNavigationZoomProviderZoomStep : GNCFreezable
- (instancetype)initWithSpeed:(GNCSpeed *)speed zoom:(double)zoom __attribute__((swift_name("init(speed:zoom:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCGenericNavigationZoomProviderZoomStep *)doCopySpeed:(GNCSpeed *)speed zoom:(double)zoom __attribute__((swift_name("doCopy(speed:zoom:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCSpeed *speed __attribute__((swift_name("speed")));
@property (readonly) double zoom __attribute__((swift_name("zoom")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RoutingEventAwareZoomProvider")))
@interface GNCRoutingEventAwareZoomProvider : GNCBase <GNCZoomProvider>
- (instancetype)initWithZoomProvider:(id<GNCZoomProvider>)zoomProvider navigationSdk:(id<GNCNavigationSdk>)navigationSdk minDistance:(GNCLength *)minDistance maxSpeed:(GNCSpeed *)maxSpeed zoomRange:(GNCRoutingEventAwareZoomProviderZoomRange *)zoomRange __attribute__((swift_name("init(zoomProvider:navigationSdk:minDistance:maxSpeed:zoomRange:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCRoutingEventAwareZoomProviderCompanion *companion __attribute__((swift_name("companion")));
- (double)convertSpeed:(GNCSpeed *)speed __attribute__((swift_name("convert(speed:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RoutingEventAwareZoomProvider.Companion")))
@interface GNCRoutingEventAwareZoomProviderCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCRoutingEventAwareZoomProviderCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) double MAX_ZOOM __attribute__((swift_name("MAX_ZOOM")));
@property (readonly) double MIN_ZOOM __attribute__((swift_name("MIN_ZOOM")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RoutingEventAwareZoomProvider.ZoomRange")))
@interface GNCRoutingEventAwareZoomProviderZoomRange : GNCBase
- (instancetype)initWithMinZoom:(double)minZoom maxZoom:(double)maxZoom __attribute__((swift_name("init(minZoom:maxZoom:)"))) __attribute__((objc_designated_initializer));
@property (readonly) double maxZoom __attribute__((swift_name("maxZoom")));
@property (readonly) double minZoom __attribute__((swift_name("minZoom")));
@end

__attribute__((swift_name("CameraLocationProvider")))
@protocol GNCCameraLocationProvider
@required

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (GNCLocation * _Nullable)getLocationDuration:(GNCDuration *)duration error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("getLocation(duration:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PredictionCameraLocationProvider")))
@interface GNCPredictionCameraLocationProvider : GNCBase <GNCCameraLocationProvider>
- (instancetype)initWithNavigationSdk:(id<GNCNavigationSdk>)navigationSdk timeProvider:(id<GNCTimeProvider>)timeProvider maxManeuverStopSpeed:(GNCSpeed *)maxManeuverStopSpeed __attribute__((swift_name("init(navigationSdk:timeProvider:maxManeuverStopSpeed:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (GNCLocation * _Nullable)getLocationDuration:(GNCDuration *)duration error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("getLocation(duration:)")));
@end

__attribute__((swift_name("TiltProvider")))
@protocol GNCTiltProvider
@required
- (double)getTilt __attribute__((swift_name("getTilt()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StatefulManeuverAwareTiltProvider")))
@interface GNCStatefulManeuverAwareTiltProvider : GNCBase <GNCTiltProvider>
- (instancetype)initWithNavigationSdk:(id<GNCNavigationSdk>)navigationSdk minDistance:(GNCLength *)minDistance minSpeed:(GNCSpeed *)minSpeed tilt3DRange:(GNCKotlinIntRange *)tilt3DRange __attribute__((swift_name("init(navigationSdk:minDistance:minSpeed:tilt3DRange:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCStatefulManeuverAwareTiltProviderCompanion *companion __attribute__((swift_name("companion")));
- (double)getTilt __attribute__((swift_name("getTilt()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StatefulManeuverAwareTiltProvider.Companion")))
@interface GNCStatefulManeuverAwareTiltProviderCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCStatefulManeuverAwareTiltProviderCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) int32_t TILT_3D_MAX __attribute__((swift_name("TILT_3D_MAX")));
@property (readonly) int32_t TILT_3D_MIN __attribute__((swift_name("TILT_3D_MIN")));
@end

__attribute__((swift_name("PaddingProvider")))
@protocol GNCPaddingProvider
@required
- (GNCCameraUpdatePadding *)getPadding __attribute__((swift_name("getPadding()")));
@end

__attribute__((swift_name("LocationProvider")))
@protocol GNCLocationProvider
@required
- (void)addLocationUpdateListenerLocationUpdateListener:(id<GNCLocationProviderLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("addLocationUpdateListener(locationUpdateListener:)")));
- (void)removeLocationUpdateListenerLocationUpdateListener:(id<GNCLocationProviderLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("removeLocationUpdateListener(locationUpdateListener:)")));
- (void)startLocationUpdates __attribute__((swift_name("startLocationUpdates()")));
- (void)stopLocationUpdates __attribute__((swift_name("stopLocationUpdates()")));
@property (readonly) BOOL active __attribute__((swift_name("active")));
@property (readonly) GNCLocation * _Nullable lastKnownLocation __attribute__((swift_name("lastKnownLocation")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PredictedLocationProvider")))
@interface GNCPredictedLocationProvider : GNCBase <GNCLocationProvider>
- (instancetype)initWithExecutor:(id<GNCExecutor>)executor navigationSdk:(id<GNCNavigationSdk>)navigationSdk __attribute__((swift_name("init(executor:navigationSdk:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithExecutor:(id<GNCExecutor>)executor navigationSdk:(id<GNCNavigationSdk>)navigationSdk routeDetachStateProvider:(id<GNCRouteDetachStateProvider> _Nullable)routeDetachStateProvider __attribute__((swift_name("init(executor:navigationSdk:routeDetachStateProvider:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithExecutor:(id<GNCExecutor>)executor navigationSdk:(id<GNCNavigationSdk>)navigationSdk routeDetachStateProvider:(id<GNCRouteDetachStateProvider> _Nullable)routeDetachStateProvider maxManeuverStopSpeed:(GNCSpeed *)maxManeuverStopSpeed locationUpdateInterval:(GNCDuration *)locationUpdateInterval __attribute__((swift_name("init(executor:navigationSdk:routeDetachStateProvider:maxManeuverStopSpeed:locationUpdateInterval:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCPredictedLocationProviderCompanion *companion __attribute__((swift_name("companion")));
- (void)addLocationUpdateListenerLocationUpdateListener:(id<GNCLocationProviderLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("addLocationUpdateListener(locationUpdateListener:)")));
- (void)removeLocationUpdateListenerLocationUpdateListener:(id<GNCLocationProviderLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("removeLocationUpdateListener(locationUpdateListener:)")));
- (void)startLocationUpdates __attribute__((swift_name("startLocationUpdates()")));
- (void)stopLocationUpdates __attribute__((swift_name("stopLocationUpdates()")));
@property (readonly) BOOL active __attribute__((swift_name("active")));
@property (readonly) GNCLocation * _Nullable lastKnownLocation __attribute__((swift_name("lastKnownLocation")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PredictedLocationProvider.Companion")))
@interface GNCPredictedLocationProviderCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCPredictedLocationProviderCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) GNCDuration *DEFAULT_LOCATION_UPDATE_INTERVAL __attribute__((swift_name("DEFAULT_LOCATION_UPDATE_INTERVAL")));
@property (readonly) double DEFAULT_NEXT_MANEUVER_STOP_SPEED_KMH __attribute__((swift_name("DEFAULT_NEXT_MANEUVER_STOP_SPEED_KMH")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteUtils")))
@interface GNCRouteUtils : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)routeUtils __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCRouteUtils *shared __attribute__((swift_name("shared")));
- (NSArray<GNCRouteWaypoint *> *)sliceByProjectionWaypoints:(NSArray<GNCRouteWaypoint *> *)waypoints projectedLocation:(GNCOnRouteProjectorProjectedLocation *)projectedLocation __attribute__((swift_name("sliceByProjection(waypoints:projectedLocation:)")));
- (NSArray<NSArray<GNCRouteWaypoint *> *> *)splitAtIndexWaypoints:(NSArray<GNCRouteWaypoint *> *)waypoints indexInclusive:(int32_t)indexInclusive __attribute__((swift_name("splitAtIndex(waypoints:indexInclusive:)")));
@end

__attribute__((swift_name("RouteFeatureCreator")))
@protocol GNCRouteFeatureCreator
@required

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSArray<GNCRouteFeatureCreatorRouteFeature *> * _Nullable)createFeaturesWaypoints:(NSArray<GNCRouteWaypoint *> *)waypoints error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("createFeatures(waypoints:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AbsoluteSpeedRouteFeatureCreator")))
@interface GNCAbsoluteSpeedRouteFeatureCreator : GNCBase <GNCRouteFeatureCreator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSArray<GNCRouteFeatureCreatorRouteFeature *> * _Nullable)createFeaturesWaypoints:(NSArray<GNCRouteWaypoint *> *)waypoints error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("createFeatures(waypoints:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ColorUtils")))
@interface GNCColorUtils : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)colorUtils __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCColorUtils *shared __attribute__((swift_name("shared")));
- (NSString *)convertSpeedToColorSpeed:(GNCSpeed *)speed brightness:(float)brightness __attribute__((swift_name("convertSpeedToColor(speed:brightness:)")));
- (NSString *)convertToHexRed:(int32_t)red green:(int32_t)green blue:(int32_t)blue __attribute__((swift_name("convertToHex(red:green:blue:)")));
- (GNCKotlinFloatArray *)toRGBAHue:(float)hue saturation:(float)saturation brightness:(float)brightness alpha:(float)alpha __attribute__((swift_name("toRGBA(hue:saturation:brightness:alpha:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ColorUtils.Color")))
@interface GNCColorUtilsColor : GNCBase
- (instancetype)initWithRed:(int32_t)red green:(int32_t)green blue:(int32_t)blue __attribute__((swift_name("init(red:green:blue:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithRed:(double)red green:(double)green blue_:(double)blue __attribute__((swift_name("init(red:green:blue_:)"))) __attribute__((objc_designated_initializer));
- (GNCColorUtilsColor *)doCopyRed:(double)red green:(double)green blue:(double)blue __attribute__((swift_name("doCopy(red:green:blue:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)toHex __attribute__((swift_name("toHex()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) double blue __attribute__((swift_name("blue")));
@property (readonly) double green __attribute__((swift_name("green")));
@property (readonly) double red __attribute__((swift_name("red")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ColoringRouteFeatureCreator")))
@interface GNCColoringRouteFeatureCreator : GNCBase <GNCRouteFeatureCreator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithFillColor:(NSString *)fillColor outlineColor:(NSString *)outlineColor __attribute__((swift_name("init(fillColor:outlineColor:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSArray<GNCRouteFeatureCreatorRouteFeature *> * _Nullable)createFeaturesWaypoints:(NSArray<GNCRouteWaypoint *> *)waypoints error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("createFeatures(waypoints:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RelativeSpeedRouteFeatureCreator")))
@interface GNCRelativeSpeedRouteFeatureCreator : GNCBase <GNCRouteFeatureCreator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithColorProvider:(id<GNCRelativeSpeedRouteFeatureCreatorColorProvider>)colorProvider __attribute__((swift_name("init(colorProvider:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (NSArray<GNCRouteFeatureCreatorRouteFeature *> * _Nullable)createFeaturesWaypoints:(NSArray<GNCRouteWaypoint *> *)waypoints error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("createFeatures(waypoints:)")));
@end

__attribute__((swift_name("KotlinComparable")))
@protocol GNCKotlinComparable
@required
- (int32_t)compareToOther:(id _Nullable)other __attribute__((swift_name("compareTo(other:)")));
@end

__attribute__((swift_name("KotlinEnum")))
@interface GNCKotlinEnum<E> : GNCBase <GNCKotlinComparable>
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCKotlinEnumCompanion *companion __attribute__((swift_name("companion")));
- (int32_t)compareToOther:(E)other __attribute__((swift_name("compareTo(other:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) int32_t ordinal __attribute__((swift_name("ordinal")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RelativeSpeedRouteFeatureCreator.Category")))
@interface GNCRelativeSpeedRouteFeatureCreatorCategory : GNCKotlinEnum<GNCRelativeSpeedRouteFeatureCreatorCategory *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCRelativeSpeedRouteFeatureCreatorCategory *default_ __attribute__((swift_name("default_")));
@property (class, readonly) GNCRelativeSpeedRouteFeatureCreatorCategory *yellow __attribute__((swift_name("yellow")));
@property (class, readonly) GNCRelativeSpeedRouteFeatureCreatorCategory *red __attribute__((swift_name("red")));
+ (GNCKotlinArray<GNCRelativeSpeedRouteFeatureCreatorCategory *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((swift_name("RelativeSpeedRouteFeatureCreatorColorProvider")))
@protocol GNCRelativeSpeedRouteFeatureCreatorColorProvider
@required
@property (readonly, getter=default) NSString *default_ __attribute__((swift_name("default_")));
@property (readonly) NSString *outline __attribute__((swift_name("outline")));
@property (readonly) NSString *red __attribute__((swift_name("red")));
@property (readonly) NSString *yellow __attribute__((swift_name("yellow")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RelativeSpeedRouteFeatureCreatorColorProviderDefaultColorProvider")))
@interface GNCRelativeSpeedRouteFeatureCreatorColorProviderDefaultColorProvider : GNCBase <GNCRelativeSpeedRouteFeatureCreatorColorProvider>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property (readonly, getter=default) NSString *default_ __attribute__((swift_name("default_")));
@property (readonly) NSString *outline __attribute__((swift_name("outline")));
@property (readonly) NSString *red __attribute__((swift_name("red")));
@property (readonly) NSString *yellow __attribute__((swift_name("yellow")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RelativeSpeedRouteFeatureCreator.Partition")))
@interface GNCRelativeSpeedRouteFeatureCreatorPartition : GNCBase
- (instancetype)initWithColor:(NSString *)color waypoints:(NSMutableArray<GNCLatLng *> *)waypoints __attribute__((swift_name("init(color:waypoints:)"))) __attribute__((objc_designated_initializer));
@property (readonly) NSString *color __attribute__((swift_name("color")));
@property (readonly) NSMutableArray<GNCLatLng *> *waypoints __attribute__((swift_name("waypoints")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteFeatureCreatorCompanion")))
@interface GNCRouteFeatureCreatorCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCRouteFeatureCreatorCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSString *FILL_COLOR __attribute__((swift_name("FILL_COLOR")));
@property (readonly) NSString *OUTLINE_COLOR __attribute__((swift_name("OUTLINE_COLOR")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteFeatureCreatorRouteFeature")))
@interface GNCRouteFeatureCreatorRouteFeature : GNCBase
- (instancetype)initWithPolyline:(NSArray<GNCLatLng *> *)polyline properties:(NSDictionary<NSString *, id> *)properties __attribute__((swift_name("init(polyline:properties:)"))) __attribute__((objc_designated_initializer));
- (GNCRouteFeatureCreatorRouteFeature *)doCopyPolyline:(NSArray<GNCLatLng *> *)polyline properties:(NSDictionary<NSString *, id> *)properties __attribute__((swift_name("doCopy(polyline:properties:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSArray<GNCLatLng *> *polyline __attribute__((swift_name("polyline")));
@property (readonly) NSDictionary<NSString *, id> *properties __attribute__((swift_name("properties")));
@end

__attribute__((swift_name("ChipManeuverColorProvider")))
@protocol GNCChipManeuverColorProvider
@required
@property (readonly) UIColor *background __attribute__((swift_name("background")));
@property (readonly) UIColor * _Nullable border __attribute__((swift_name("border")));
@property (readonly) UIColor *icon __attribute__((swift_name("icon")));
@property (readonly) UIColor *text __attribute__((swift_name("text")));
@end

__attribute__((swift_name("ManeuverMapIconCreator")))
@interface GNCManeuverMapIconCreator : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property (class, readonly, getter=companion) GNCManeuverMapIconCreatorCompanion *companion __attribute__((swift_name("companion")));
- (GNCManeuverMapIconCreatorManeuverMapIcon * _Nullable)createTurnInfo:(GNCTurnInfo *)turnInfo showDirectionLabel:(BOOL)showDirectionLabel __attribute__((swift_name("create(turnInfo:showDirectionLabel:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (NSString *)getIconAnchorTurnCommand:(GNCTurnCommand *)turnCommand __attribute__((swift_name("getIconAnchor(turnCommand:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (BOOL)isDisplayableTurnInfo:(GNCTurnInfo *)turnInfo __attribute__((swift_name("isDisplayable(turnInfo:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChipManeuverMapIconCreator")))
@interface GNCChipManeuverMapIconCreator : GNCManeuverMapIconCreator
- (instancetype)initWithManeuverImageProvider:(id<GNCManeuverImageProvider>)maneuverImageProvider __attribute__((swift_name("init(maneuverImageProvider:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithManeuverImageProvider:(id<GNCManeuverImageProvider>)maneuverImageProvider viewImageRenderer:(id<GNCViewImageRenderer>)viewImageRenderer colorProvider:(id<GNCChipManeuverColorProvider>)colorProvider __attribute__((swift_name("init(maneuverImageProvider:viewImageRenderer:colorProvider:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCManeuverMapIconCreatorManeuverMapIcon * _Nullable)createTurnInfo:(GNCTurnInfo *)turnInfo showDirectionLabel:(BOOL)showDirectionLabel __attribute__((swift_name("create(turnInfo:showDirectionLabel:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ManeuverIconProvider")))
@interface GNCManeuverIconProvider : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)maneuverIconProvider __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCManeuverIconProvider *shared __attribute__((swift_name("shared")));
- (GNCManeuverIconProviderManeuverIcon *)getManeuverIconTurnInfo:(GNCTurnInfo * _Nullable)turnInfo __attribute__((swift_name("getManeuverIcon(turnInfo:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ManeuverIconProvider.ManeuverIcon")))
@interface GNCManeuverIconProviderManeuverIcon : GNCKotlinEnum<GNCManeuverIconProviderManeuverIcon *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCManeuverIconProviderManeuverIcon *unknown __attribute__((swift_name("unknown")));
@property (class, readonly) GNCManeuverIconProviderManeuverIcon *arriveStraight __attribute__((swift_name("arriveStraight")));
@property (class, readonly) GNCManeuverIconProviderManeuverIcon *continueLeft __attribute__((swift_name("continueLeft")));
@property (class, readonly) GNCManeuverIconProviderManeuverIcon *continueSharpLeft __attribute__((swift_name("continueSharpLeft")));
@property (class, readonly) GNCManeuverIconProviderManeuverIcon *continueSharpRight __attribute__((swift_name("continueSharpRight")));
@property (class, readonly) GNCManeuverIconProviderManeuverIcon *continueSlightLeft __attribute__((swift_name("continueSlightLeft")));
@property (class, readonly) GNCManeuverIconProviderManeuverIcon *continueSlightRight __attribute__((swift_name("continueSlightRight")));
@property (class, readonly) GNCManeuverIconProviderManeuverIcon *continueStraight __attribute__((swift_name("continueStraight")));
@property (class, readonly) GNCManeuverIconProviderManeuverIcon *continueRight __attribute__((swift_name("continueRight")));
@property (class, readonly) GNCManeuverIconProviderManeuverIcon *departStraight __attribute__((swift_name("departStraight")));
@property (class, readonly) GNCManeuverIconProviderManeuverIcon *endOfRoadLeft __attribute__((swift_name("endOfRoadLeft")));
@property (class, readonly) GNCManeuverIconProviderManeuverIcon *endOfRoadRight __attribute__((swift_name("endOfRoadRight")));
@property (class, readonly) GNCManeuverIconProviderManeuverIcon *forkSlightLeft __attribute__((swift_name("forkSlightLeft")));
@property (class, readonly) GNCManeuverIconProviderManeuverIcon *forkSlightRight __attribute__((swift_name("forkSlightRight")));
@property (class, readonly) GNCManeuverIconProviderManeuverIcon *rampLevelDown __attribute__((swift_name("rampLevelDown")));
@property (class, readonly) GNCManeuverIconProviderManeuverIcon *rampLevelUp __attribute__((swift_name("rampLevelUp")));
@property (class, readonly) GNCManeuverIconProviderManeuverIcon *roundaboutLeft __attribute__((swift_name("roundaboutLeft")));
@property (class, readonly) GNCManeuverIconProviderManeuverIcon *roundaboutRight __attribute__((swift_name("roundaboutRight")));
@property (class, readonly) GNCManeuverIconProviderManeuverIcon *roundaboutSharpLeft __attribute__((swift_name("roundaboutSharpLeft")));
@property (class, readonly) GNCManeuverIconProviderManeuverIcon *roundaboutSharpRight __attribute__((swift_name("roundaboutSharpRight")));
@property (class, readonly) GNCManeuverIconProviderManeuverIcon *roundaboutSlightLeft __attribute__((swift_name("roundaboutSlightLeft")));
@property (class, readonly) GNCManeuverIconProviderManeuverIcon *roundaboutSlightRight __attribute__((swift_name("roundaboutSlightRight")));
@property (class, readonly) GNCManeuverIconProviderManeuverIcon *roundaboutStraight __attribute__((swift_name("roundaboutStraight")));
@property (class, readonly) GNCManeuverIconProviderManeuverIcon *roundaboutRht __attribute__((swift_name("roundaboutRht")));
@property (class, readonly) GNCManeuverIconProviderManeuverIcon *uturnRht __attribute__((swift_name("uturnRht")));
+ (GNCKotlinArray<GNCManeuverIconProviderManeuverIcon *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((swift_name("ManeuverImageProvider")))
@protocol GNCManeuverImageProvider
@required
- (UIImage *)getImageByTurnInfoTurnInfo:(GNCTurnInfo * _Nullable)turnInfo __attribute__((swift_name("getImageByTurnInfo(turnInfo:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ManeuverMapIconCreator.Companion")))
@interface GNCManeuverMapIconCreatorCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCManeuverMapIconCreatorCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSString *BOTTOM_LEFT __attribute__((swift_name("BOTTOM_LEFT")));
@property (readonly) NSString *BOTTOM_RIGHT __attribute__((swift_name("BOTTOM_RIGHT")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ManeuverMapIconCreator.ManeuverMapIcon")))
@interface GNCManeuverMapIconCreatorManeuverMapIcon : GNCBase
- (instancetype)initWithImage:(UIImage *)image anchor:(NSString *)anchor __attribute__((swift_name("init(image:anchor:)"))) __attribute__((objc_designated_initializer));
- (GNCManeuverMapIconCreatorManeuverMapIcon *)doCopyImage:(UIImage *)image anchor:(NSString *)anchor __attribute__((swift_name("doCopy(image:anchor:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *anchor __attribute__((swift_name("anchor")));
@property (readonly) UIImage *image __attribute__((swift_name("image")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StaticChipManeuverColorProvider")))
@interface GNCStaticChipManeuverColorProvider : GNCBase <GNCChipManeuverColorProvider>
- (instancetype)initWithForeground:(UIColor *)foreground background:(UIColor *)background __attribute__((swift_name("init(foreground:background:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithIcon:(UIColor *)icon text:(UIColor *)text background:(UIColor *)background border:(UIColor * _Nullable)border __attribute__((swift_name("init(icon:text:background:border:)"))) __attribute__((objc_designated_initializer));
- (GNCStaticChipManeuverColorProvider *)doCopyIcon:(UIColor *)icon text:(UIColor *)text background:(UIColor *)background border:(UIColor * _Nullable)border __attribute__((swift_name("doCopy(icon:text:background:border:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) UIColor *background __attribute__((swift_name("background")));
@property (readonly) UIColor * _Nullable border __attribute__((swift_name("border")));
@property (readonly) UIColor *icon __attribute__((swift_name("icon")));
@property (readonly) UIColor *text __attribute__((swift_name("text")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LaneIcon")))
@interface GNCLaneIcon : GNCKotlinEnum<GNCLaneIcon *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCLaneIcon *left __attribute__((swift_name("left")));
@property (class, readonly) GNCLaneIcon *slightLeft __attribute__((swift_name("slightLeft")));
@property (class, readonly) GNCLaneIcon *sharpLeft __attribute__((swift_name("sharpLeft")));
@property (class, readonly) GNCLaneIcon *right __attribute__((swift_name("right")));
@property (class, readonly) GNCLaneIcon *slightRight __attribute__((swift_name("slightRight")));
@property (class, readonly) GNCLaneIcon *sharpRight __attribute__((swift_name("sharpRight")));
@property (class, readonly) GNCLaneIcon *through __attribute__((swift_name("through")));
+ (GNCKotlinArray<GNCLaneIcon *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LaneIconComposition")))
@interface GNCLaneIconComposition : GNCBase
- (instancetype)initWithUse:(GNCLaneIcon * _Nullable)use remaining:(NSArray<GNCLaneIcon *> *)remaining __attribute__((swift_name("init(use:remaining:)"))) __attribute__((objc_designated_initializer));
- (GNCLaneIconComposition *)doCopyUse:(GNCLaneIcon * _Nullable)use remaining:(NSArray<GNCLaneIcon *> *)remaining __attribute__((swift_name("doCopy(use:remaining:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSArray<GNCLaneIcon *> *remaining __attribute__((swift_name("remaining")));
@property (readonly) GNCLaneIcon * _Nullable use __attribute__((swift_name("use")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LaneIconCompositionProvider")))
@interface GNCLaneIconCompositionProvider : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)laneIconCompositionProvider __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCLaneIconCompositionProvider *shared __attribute__((swift_name("shared")));
- (GNCLaneIconComposition *)getLaneIconCompositionLane:(GNCLaneInfoLane *)lane turnCommand:(GNCTurnCommand * _Nullable)turnCommand __attribute__((swift_name("getLaneIconComposition(lane:turnCommand:)")));
- (NSArray<GNCLaneIconComposition *> *)getLaneIconCompositionsLaneInfo:(GNCLaneInfo *)laneInfo turnCommand:(GNCTurnCommand * _Nullable)turnCommand __attribute__((swift_name("getLaneIconCompositions(laneInfo:turnCommand:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DetachConstants")))
@interface GNCDetachConstants : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)detachConstants __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCDetachConstants *shared __attribute__((swift_name("shared")));
@property (readonly) NSString *ROUTE_FILL_COLOR __attribute__((swift_name("ROUTE_FILL_COLOR")));
@property (readonly) NSString *ROUTE_OUTLINE_COLOR __attribute__((swift_name("ROUTE_OUTLINE_COLOR")));
@end

__attribute__((swift_name("RouteDetachStateProvider")))
@protocol GNCRouteDetachStateProvider
@required
@property (readonly) BOOL detached __attribute__((swift_name("detached")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OffRouteDetachStateProvider")))
@interface GNCOffRouteDetachStateProvider : GNCBase <GNCRouteDetachStateProvider>
- (instancetype)initWithNavigationSdk:(id<GNCNavigationSdk>)navigationSdk __attribute__((swift_name("init(navigationSdk:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithNavigationSdk:(id<GNCNavigationSdk>)navigationSdk minRouteDistance:(GNCLength *)minRouteDistance __attribute__((swift_name("init(navigationSdk:minRouteDistance:)"))) __attribute__((objc_designated_initializer));
@property (readonly) BOOL detached __attribute__((swift_name("detached")));
@end

__attribute__((swift_name("DurationConverter")))
@protocol GNCDurationConverter
@required
- (NSArray<GNCDurationConverterResult *> *)convertDuration:(GNCDuration *)duration __attribute__((swift_name("convert(duration:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CompactDurationConverter")))
@interface GNCCompactDurationConverter : GNCBase <GNCDurationConverter>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSArray<GNCDurationConverterResult *> *)convertDuration:(GNCDuration *)duration __attribute__((swift_name("convert(duration:)")));
@end

__attribute__((swift_name("DistanceConverter")))
@protocol GNCDistanceConverter
@required
- (GNCDistanceConverterResult *)convertLength:(GNCLength *)length measurementSystem:(GNCMeasurementSystem *)measurementSystem __attribute__((swift_name("convert(length:measurementSystem:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DetailedDistanceConverter")))
@interface GNCDetailedDistanceConverter : GNCBase <GNCDistanceConverter>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (GNCDistanceConverterResult *)convertLength:(GNCLength *)length measurementSystem:(GNCMeasurementSystem *)measurementSystem __attribute__((swift_name("convert(length:measurementSystem:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DistanceConverterCompanion")))
@interface GNCDistanceConverterCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCDistanceConverterCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSString *UNIT_FEET __attribute__((swift_name("UNIT_FEET")));
@property (readonly) NSString *UNIT_KILOMETER __attribute__((swift_name("UNIT_KILOMETER")));
@property (readonly) NSString *UNIT_METERS __attribute__((swift_name("UNIT_METERS")));
@property (readonly) NSString *UNIT_MILES __attribute__((swift_name("UNIT_MILES")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DistanceConverterResult")))
@interface GNCDistanceConverterResult : GNCBase
- (instancetype)initWithValue:(NSString *)value unit:(NSString *)unit __attribute__((swift_name("init(value:unit:)"))) __attribute__((objc_designated_initializer));
@property (readonly) NSString *unit __attribute__((swift_name("unit")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DurationConverterCompanion")))
@interface GNCDurationConverterCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCDurationConverterCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSString *UNIT_HOURS __attribute__((swift_name("UNIT_HOURS")));
@property (readonly) NSString *UNIT_MINUTES __attribute__((swift_name("UNIT_MINUTES")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DurationConverterResult")))
@interface GNCDurationConverterResult : GNCBase
- (instancetype)initWithValue:(NSString *)value unit:(NSString *)unit __attribute__((swift_name("init(value:unit:)"))) __attribute__((objc_designated_initializer));
- (GNCDurationConverterResult *)doCopyValue:(NSString *)value unit:(NSString *)unit __attribute__((swift_name("doCopy(value:unit:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *unit __attribute__((swift_name("unit")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FormatUtils")))
@interface GNCFormatUtils : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)formatUtils __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCFormatUtils *shared __attribute__((swift_name("shared")));
- (double)roundDouble:(double)double_ decimalPlaces:(int32_t)decimalPlaces __attribute__((swift_name("round(double:decimalPlaces:)")));
- (int32_t)roundByIntervalDouble:(double)double_ interval:(int32_t)interval __attribute__((swift_name("roundByInterval(double:interval:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RoundedDistanceConverter")))
@interface GNCRoundedDistanceConverter : GNCBase <GNCDistanceConverter>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (GNCDistanceConverterResult *)convertLength:(GNCLength *)length measurementSystem:(GNCMeasurementSystem *)measurementSystem __attribute__((swift_name("convert(length:measurementSystem:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LabelParser")))
@interface GNCLabelParser : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)labelParser __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCLabelParser *shared __attribute__((swift_name("shared")));
- (BOOL)isLatLngLabelLabel:(NSString *)label __attribute__((swift_name("isLatLngLabel(label:)")));
- (NSString * _Nullable)parseSubtitleLabel:(NSString *)label __attribute__((swift_name("parseSubtitle(label:)")));
- (NSString * _Nullable)parseSubtitleRoutable:(id<GNCRoutable>)routable __attribute__((swift_name("parseSubtitle(routable:)")));
- (NSString *)parseTitleLabel:(NSString *)label __attribute__((swift_name("parseTitle(label:)")));
- (NSString *)parseTitleRoutable:(id<GNCRoutable>)routable __attribute__((swift_name("parseTitle(routable:)")));
@end

__attribute__((swift_name("ViewImageRenderer")))
@protocol GNCViewImageRenderer
@required
- (UIImage * _Nullable)renderView:(UIView *)view __attribute__((swift_name("render(view:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PlainViewImageRenderer")))
@interface GNCPlainViewImageRenderer : GNCBase <GNCViewImageRenderer>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (UIImage * _Nullable)renderView:(UIView *)view __attribute__((swift_name("render(view:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TurnInfoUtils")))
@interface GNCTurnInfoUtils : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)turnInfoUtils __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCTurnInfoUtils *shared __attribute__((swift_name("shared")));
- (NSString * _Nullable)getReferenceLabelTurnInfo:(GNCTurnInfo *)turnInfo __attribute__((swift_name("getReferenceLabel(turnInfo:)")));
- (NSString * _Nullable)getRoadLabelTurnInfo:(GNCTurnInfo *)turnInfo __attribute__((swift_name("getRoadLabel(turnInfo:)")));
- (NSString *)getTurnInfoLabelTurnInfo:(GNCTurnInfo *)turnInfo __attribute__((swift_name("getTurnInfoLabel(turnInfo:)")));
@end

__attribute__((swift_name("VoiceInstructionStringGenerator")))
@protocol GNCVoiceInstructionStringGenerator
@required
- (NSString * _Nullable)generateVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
@end

__attribute__((swift_name("BaseLaneVoiceInstructionStringGenerator")))
@interface GNCBaseLaneVoiceInstructionStringGenerator : GNCBase <GNCVoiceInstructionStringGenerator>
- (instancetype)initWithFallbackVoiceCommandStringGenerator:(id<GNCVoiceInstructionStringGenerator>)fallbackVoiceCommandStringGenerator __attribute__((swift_name("init(fallbackVoiceCommandStringGenerator:)"))) __attribute__((objc_designated_initializer));
- (NSString *)createPart1VoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext it:(GNCLaneInfo *)it __attribute__((swift_name("createPart1(voiceInstructionContext:it:)")));
- (NSString * _Nullable)createPart2TurnInfo:(GNCTurnInfo *)turnInfo __attribute__((swift_name("createPart2(turnInfo:)")));
- (NSString * _Nullable)generateVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (GNCBaseLaneVoiceInstructionStringGeneratorLaneSection *)getUsableLaneSectionLanes:(NSArray<GNCLaneInfoLane *> *)lanes __attribute__((swift_name("getUsableLaneSection(lanes:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BaseLaneVoiceInstructionStringGenerator.LaneSection")))
@interface GNCBaseLaneVoiceInstructionStringGeneratorLaneSection : GNCKotlinEnum<GNCBaseLaneVoiceInstructionStringGeneratorLaneSection *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCBaseLaneVoiceInstructionStringGeneratorLaneSection *left __attribute__((swift_name("left")));
@property (class, readonly) GNCBaseLaneVoiceInstructionStringGeneratorLaneSection *center __attribute__((swift_name("center")));
@property (class, readonly) GNCBaseLaneVoiceInstructionStringGeneratorLaneSection *right __attribute__((swift_name("right")));
+ (GNCKotlinArray<GNCBaseLaneVoiceInstructionStringGeneratorLaneSection *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((swift_name("VoiceInstructionHandler")))
@protocol GNCVoiceInstructionHandler
@required
- (void)addInterceptorInterceptor:(id<GNCVoiceInstructionHandlerInterceptor>)interceptor __attribute__((swift_name("addInterceptor(interceptor:)")));
- (void)removeInterceptorInterceptor:(id<GNCVoiceInstructionHandlerInterceptor>)interceptor __attribute__((swift_name("removeInterceptor(interceptor:)")));
@property BOOL enabled __attribute__((swift_name("enabled")));
@end

__attribute__((swift_name("OnNavigationStateUpdatedListener")))
@protocol GNCOnNavigationStateUpdatedListener
@required
- (void)onNavigationStateUpdatedNavigationState:(GNCNavigationState * _Nullable)navigationState __attribute__((swift_name("onNavigationStateUpdated(navigationState:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NavigationVoiceInstructionHandler")))
@interface GNCNavigationVoiceInstructionHandler : GNCBase <GNCVoiceInstructionHandler, GNCOnNavigationStateUpdatedListener>
- (instancetype)initWithNavigationSdk:(id<GNCNavigationSdk>)navigationSdk voiceInstructionStringGenerator:(id<GNCVoiceInstructionStringGenerator>)voiceInstructionStringGenerator voiceInstructionDispatcher:(id<GNCVoiceInstructionDispatcher>)voiceInstructionDispatcher __attribute__((swift_name("init(navigationSdk:voiceInstructionStringGenerator:voiceInstructionDispatcher:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithNavigationSdk:(id<GNCNavigationSdk>)navigationSdk voiceInstructionStringGenerator:(id<GNCVoiceInstructionStringGenerator>)voiceInstructionStringGenerator voiceInstructionDispatcher:(id<GNCVoiceInstructionDispatcher>)voiceInstructionDispatcher detachStateProvider:(id<GNCRouteDetachStateProvider>)detachStateProvider __attribute__((swift_name("init(navigationSdk:voiceInstructionStringGenerator:voiceInstructionDispatcher:detachStateProvider:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithVoiceInstructionContextProvider:(id<GNCVoiceInstructionContextProvider>)voiceInstructionContextProvider voiceInstructionStringGenerator:(id<GNCVoiceInstructionStringGenerator>)voiceInstructionStringGenerator voiceInstructionDispatcher:(id<GNCVoiceInstructionDispatcher>)voiceInstructionDispatcher navigationSdk:(id<GNCNavigationSdk>)navigationSdk detachStateProvider:(id<GNCRouteDetachStateProvider> _Nullable)detachStateProvider minTimeBetweenVoiceInstructions:(GNCDuration *)minTimeBetweenVoiceInstructions __attribute__((swift_name("init(voiceInstructionContextProvider:voiceInstructionStringGenerator:voiceInstructionDispatcher:navigationSdk:detachStateProvider:minTimeBetweenVoiceInstructions:)"))) __attribute__((objc_designated_initializer));
- (void)addInterceptorInterceptor:(id<GNCVoiceInstructionHandlerInterceptor>)interceptor __attribute__((swift_name("addInterceptor(interceptor:)")));
- (void)onNavigationStateUpdatedNavigationState:(GNCNavigationState * _Nullable)navigationState __attribute__((swift_name("onNavigationStateUpdated(navigationState:)")));
- (void)removeInterceptorInterceptor:(id<GNCVoiceInstructionHandlerInterceptor>)interceptor __attribute__((swift_name("removeInterceptor(interceptor:)")));
@property BOOL enabled __attribute__((swift_name("enabled")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TurnAwareAudioBalanceProvider")))
@interface GNCTurnAwareAudioBalanceProvider : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (float)getBalanceVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("getBalance(voiceInstructionContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("VoiceInstructionContext")))
@interface GNCVoiceInstructionContext : GNCBase
- (instancetype)initWithDistanceToManeuver:(GNCLength *)distanceToManeuver timeToManeuver:(GNCDuration *)timeToManeuver stage:(int32_t)stage latLng:(GNCLatLng *)latLng turnInfo:(GNCTurnInfo *)turnInfo laneInfo:(GNCLaneInfo * _Nullable)laneInfo __attribute__((swift_name("init(distanceToManeuver:timeToManeuver:stage:latLng:turnInfo:laneInfo:)"))) __attribute__((objc_designated_initializer));
- (GNCVoiceInstructionContext *)doCopyDistanceToManeuver:(GNCLength *)distanceToManeuver timeToManeuver:(GNCDuration *)timeToManeuver stage:(int32_t)stage latLng:(GNCLatLng *)latLng turnInfo:(GNCTurnInfo *)turnInfo laneInfo:(GNCLaneInfo * _Nullable)laneInfo __attribute__((swift_name("doCopy(distanceToManeuver:timeToManeuver:stage:latLng:turnInfo:laneInfo:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property id<GNCRoutable> _Nullable destination __attribute__((swift_name("destination")));
@property (readonly) GNCLength *distanceToManeuver __attribute__((swift_name("distanceToManeuver")));
@property (readonly) GNCLaneInfo * _Nullable laneInfo __attribute__((swift_name("laneInfo")));
@property (readonly) GNCLatLng *latLng __attribute__((swift_name("latLng")));
@property (readonly) int32_t stage __attribute__((swift_name("stage")));
@property NSString * _Nullable streetName __attribute__((swift_name("streetName")));
@property (readonly) GNCDuration *timeToManeuver __attribute__((swift_name("timeToManeuver")));
@property (readonly) GNCTurnInfo *turnInfo __attribute__((swift_name("turnInfo")));
@end

__attribute__((swift_name("VoiceInstructionDispatcher")))
@protocol GNCVoiceInstructionDispatcher
@required
- (void)dispatchVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext voiceInstructionText:(NSString *)voiceInstructionText balance:(float)balance onDone:(void (^)(NSString *))onDone __attribute__((swift_name("dispatch(voiceInstructionContext:voiceInstructionText:balance:onDone:)")));
@end

__attribute__((swift_name("VoiceInstructionHandlerInterceptor")))
@protocol GNCVoiceInstructionHandlerInterceptor
@required
- (GNCVoiceInstructionHandlerInterceptorResult *)interceptVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext speakableString:(NSString *)speakableString __attribute__((swift_name("intercept(voiceInstructionContext:speakableString:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("VoiceInstructionHandlerInterceptorResult")))
@interface GNCVoiceInstructionHandlerInterceptorResult : GNCBase
- (instancetype)initWithProceed:(BOOL)proceed string:(NSString * _Nullable)string __attribute__((swift_name("init(proceed:string:)"))) __attribute__((objc_designated_initializer));
- (GNCVoiceInstructionHandlerInterceptorResult *)doCopyProceed:(BOOL)proceed string:(NSString * _Nullable)string __attribute__((swift_name("doCopy(proceed:string:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) BOOL proceed __attribute__((swift_name("proceed")));
@property (readonly) NSString * _Nullable string __attribute__((swift_name("string")));
@end

__attribute__((swift_name("VoiceInstructionStageProvider")))
@protocol GNCVoiceInstructionStageProvider
@required
- (GNCInt * _Nullable)getStageManeuver:(GNCManeuver *)maneuver __attribute__((swift_name("getStage(maneuver:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DurationBasedVoiceInstructionStageProvider")))
@interface GNCDurationBasedVoiceInstructionStageProvider : GNCBase <GNCVoiceInstructionStageProvider>
- (instancetype)initWithSpeedTracker:(id<GNCSpeedTracker>)speedTracker __attribute__((swift_name("init(speedTracker:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithOverwriteDistanceStage0:(GNCLength *)overwriteDistanceStage0 speedTracker:(id<GNCSpeedTracker>)speedTracker __attribute__((swift_name("init(overwriteDistanceStage0:speedTracker:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCDurationBasedVoiceInstructionStageProviderCompanion *companion __attribute__((swift_name("companion")));
- (GNCInt * _Nullable)getStageManeuver:(GNCManeuver *)maneuver __attribute__((swift_name("getStage(maneuver:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DurationBasedVoiceInstructionStageProvider.Companion")))
@interface GNCDurationBasedVoiceInstructionStageProviderCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCDurationBasedVoiceInstructionStageProviderCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) GNCKotlinLongRange *DURATION_STAGE_0 __attribute__((swift_name("DURATION_STAGE_0")));
@property (readonly) GNCKotlinLongRange *DURATION_STAGE_1 __attribute__((swift_name("DURATION_STAGE_1")));
@property (readonly) GNCKotlinLongRange *DURATION_STAGE_2 __attribute__((swift_name("DURATION_STAGE_2")));
@end

__attribute__((swift_name("VoiceInstructionContextProvider")))
@protocol GNCVoiceInstructionContextProvider
@required
@property (readonly) GNCVoiceInstructionContext * _Nullable voiceInstructionContext __attribute__((swift_name("voiceInstructionContext")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NavigationVoiceInstructionContextProvider")))
@interface GNCNavigationVoiceInstructionContextProvider : GNCBase <GNCVoiceInstructionContextProvider>
- (instancetype)initWithStageProvider:(id<GNCVoiceInstructionStageProvider>)stageProvider navigationSdk:(id<GNCNavigationSdk>)navigationSdk __attribute__((swift_name("init(stageProvider:navigationSdk:)"))) __attribute__((objc_designated_initializer));
@property (readonly) GNCVoiceInstructionContext * _Nullable voiceInstructionContext __attribute__((swift_name("voiceInstructionContext")));
@end

__attribute__((swift_name("SpeakableConditionCreator")))
@protocol GNCSpeakableConditionCreator
@required
- (NSString *)createVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("create(voiceInstructionContext:)")));
@end

__attribute__((swift_name("GenericSpeakableConditionCreator")))
@interface GNCGenericSpeakableConditionCreator : GNCBase <GNCSpeakableConditionCreator>
- (instancetype)initWithNow:(NSString *)now inString:(NSString *)inString meterPlural:(NSString *)meterPlural kilometerSingular:(NSString *)kilometerSingular kilometerPlural:(NSString *)kilometerPlural __attribute__((swift_name("init(now:inString:meterPlural:kilometerSingular:kilometerPlural:)"))) __attribute__((objc_designated_initializer));
- (NSString *)createVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("create(voiceInstructionContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocaleVoiceInstructionStringGenerator")))
@interface GNCLocaleVoiceInstructionStringGenerator : GNCBase <GNCVoiceInstructionStringGenerator>
- (instancetype)initWithLocaleProvider:(id<GNCLanguageProvider>)localeProvider __attribute__((swift_name("init(localeProvider:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithLocaleProvider:(id<GNCLanguageProvider>)localeProvider fallbackVoiceInstructionStringGenerator:(id<GNCVoiceInstructionStringGenerator> _Nullable)fallbackVoiceInstructionStringGenerator __attribute__((swift_name("init(localeProvider:fallbackVoiceInstructionStringGenerator:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithLocaleProvider:(id<GNCLanguageProvider>)localeProvider voiceInstructionStringGenerators:(NSSet<id<GNCVoiceInstructionStringGenerator>> *)voiceInstructionStringGenerators fallbackVoiceInstructionStringGenerator:(id<GNCVoiceInstructionStringGenerator> _Nullable)fallbackVoiceInstructionStringGenerator __attribute__((swift_name("init(localeProvider:voiceInstructionStringGenerators:fallbackVoiceInstructionStringGenerator:)"))) __attribute__((objc_designated_initializer));
- (NSString * _Nullable)generateVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
@end

__attribute__((swift_name("SlawicSpeakableConditionCreator")))
@interface GNCSlawicSpeakableConditionCreator : GNCBase <GNCSpeakableConditionCreator>
- (instancetype)initWithNow:(NSString *)now inString:(NSString *)inString meterPlural:(NSString *)meterPlural kilometerSingular:(NSString *)kilometerSingular kilometerPluralFew:(NSString *)kilometerPluralFew kilometerPluralMany:(NSString *)kilometerPluralMany __attribute__((swift_name("init(now:inString:meterPlural:kilometerSingular:kilometerPluralFew:kilometerPluralMany:)"))) __attribute__((objc_designated_initializer));
- (NSString *)createVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("create(voiceInstructionContext:)")));
@property (readonly) double PLURAL_FORM_THRESHOLD __attribute__((swift_name("PLURAL_FORM_THRESHOLD")));
@end

__attribute__((swift_name("SpeakableDirectionProvider")))
@protocol GNCSpeakableDirectionProvider
@required
- (NSString * _Nullable)getDirectionTurnInfo:(GNCTurnInfo *)turnInfo __attribute__((swift_name("getDirection(turnInfo:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GermanLaneVoiceCommandStringGenerator")))
@interface GNCGermanLaneVoiceCommandStringGenerator : GNCBaseLaneVoiceInstructionStringGenerator
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithReadableDistanceProvider:(id<GNCSpeakableConditionCreator>)readableDistanceProvider readableDirectionProvider:(id<GNCSpeakableDirectionProvider>)readableDirectionProvider fallbackVoiceCommandStringGenerator:(id<GNCVoiceInstructionStringGenerator>)fallbackVoiceCommandStringGenerator __attribute__((swift_name("init(readableDistanceProvider:readableDirectionProvider:fallbackVoiceCommandStringGenerator:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithFallbackVoiceCommandStringGenerator:(id<GNCVoiceInstructionStringGenerator>)fallbackVoiceCommandStringGenerator __attribute__((swift_name("init(fallbackVoiceCommandStringGenerator:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (NSString *)createPart1VoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext it:(GNCLaneInfo *)it __attribute__((swift_name("createPart1(voiceInstructionContext:it:)")));
- (NSString * _Nullable)createPart2TurnInfo:(GNCTurnInfo *)turnInfo __attribute__((swift_name("createPart2(turnInfo:)")));
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GermanSpeakableConditionCreator")))
@interface GNCGermanSpeakableConditionCreator : GNCGenericSpeakableConditionCreator
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithNow:(NSString *)now inString:(NSString *)inString meterPlural:(NSString *)meterPlural kilometerSingular:(NSString *)kilometerSingular kilometerPlural:(NSString *)kilometerPlural __attribute__((swift_name("init(now:inString:meterPlural:kilometerSingular:kilometerPlural:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GermanSpeakableDirectionProvider")))
@interface GNCGermanSpeakableDirectionProvider : GNCBase <GNCSpeakableDirectionProvider>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithPrefixConfigs:(NSArray<GNCGermanSpeakableDirectionProviderPrefixConfig *> *)prefixConfigs fallbackPrefix:(NSString *)fallbackPrefix __attribute__((swift_name("init(prefixConfigs:fallbackPrefix:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCGermanSpeakableDirectionProviderCompanion *companion __attribute__((swift_name("companion")));
- (NSString * _Nullable)getDirectionTurnInfo:(GNCTurnInfo *)turnInfo __attribute__((swift_name("getDirection(turnInfo:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GermanSpeakableDirectionProvider.Companion")))
@interface GNCGermanSpeakableDirectionProviderCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCGermanSpeakableDirectionProviderCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSArray<GNCGermanSpeakableDirectionProviderPrefixConfig *> *defaultPrefixConfig __attribute__((swift_name("defaultPrefixConfig")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GermanSpeakableDirectionProvider.PrefixConfig")))
@interface GNCGermanSpeakableDirectionProviderPrefixConfig : GNCBase
- (instancetype)initWithPrefix:(NSString *)prefix possibleSuffix:(NSArray<NSString *> *)possibleSuffix __attribute__((swift_name("init(prefix:possibleSuffix:)"))) __attribute__((objc_designated_initializer));
- (GNCGermanSpeakableDirectionProviderPrefixConfig *)doCopyPrefix:(NSString *)prefix possibleSuffix:(NSArray<NSString *> *)possibleSuffix __attribute__((swift_name("doCopy(prefix:possibleSuffix:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSArray<NSString *> *possibleSuffix __attribute__((swift_name("possibleSuffix")));
@property (readonly) NSString *prefix __attribute__((swift_name("prefix")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GermanTurnVoiceInstructionStringGenerator")))
@interface GNCGermanTurnVoiceInstructionStringGenerator : GNCBase <GNCVoiceInstructionStringGenerator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithSpeakableConditionCreator:(id<GNCSpeakableConditionCreator>)speakableConditionCreator speakableDirectionProvider:(id<GNCSpeakableDirectionProvider>)speakableDirectionProvider __attribute__((swift_name("init(speakableConditionCreator:speakableDirectionProvider:)"))) __attribute__((objc_designated_initializer));
- (NSString * _Nullable)generateVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EnglishLaneVoiceCommandStringGenerator")))
@interface GNCEnglishLaneVoiceCommandStringGenerator : GNCBaseLaneVoiceInstructionStringGenerator
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithSpeakableConditionCreator:(id<GNCSpeakableConditionCreator>)speakableConditionCreator speakableDirectionProvider:(id<GNCSpeakableDirectionProvider>)speakableDirectionProvider fallbackVoiceCommandStringGenerator:(id<GNCVoiceInstructionStringGenerator>)fallbackVoiceCommandStringGenerator __attribute__((swift_name("init(speakableConditionCreator:speakableDirectionProvider:fallbackVoiceCommandStringGenerator:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithFallbackVoiceCommandStringGenerator:(id<GNCVoiceInstructionStringGenerator>)fallbackVoiceCommandStringGenerator __attribute__((swift_name("init(fallbackVoiceCommandStringGenerator:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (NSString *)createPart1VoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext it:(GNCLaneInfo *)it __attribute__((swift_name("createPart1(voiceInstructionContext:it:)")));
- (NSString * _Nullable)createPart2TurnInfo:(GNCTurnInfo *)turnInfo __attribute__((swift_name("createPart2(turnInfo:)")));
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EnglishSpeakableConditionCreator")))
@interface GNCEnglishSpeakableConditionCreator : GNCGenericSpeakableConditionCreator
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithNow:(NSString *)now inString:(NSString *)inString meterPlural:(NSString *)meterPlural kilometerSingular:(NSString *)kilometerSingular kilometerPlural:(NSString *)kilometerPlural __attribute__((swift_name("init(now:inString:meterPlural:kilometerSingular:kilometerPlural:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (NSString *)createVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("create(voiceInstructionContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EnglishSpeakableDirectionProvider")))
@interface GNCEnglishSpeakableDirectionProvider : GNCBase <GNCSpeakableDirectionProvider>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithPrefix:(NSString *)prefix __attribute__((swift_name("init(prefix:)"))) __attribute__((objc_designated_initializer));
- (NSString * _Nullable)getDirectionTurnInfo:(GNCTurnInfo *)turnInfo __attribute__((swift_name("getDirection(turnInfo:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EnglishTurnVoiceInstructionStringGenerator")))
@interface GNCEnglishTurnVoiceInstructionStringGenerator : GNCBase <GNCVoiceInstructionStringGenerator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithSpeakableConditionCreator:(id<GNCSpeakableConditionCreator>)speakableConditionCreator speakableDirectionProvider:(id<GNCSpeakableDirectionProvider>)speakableDirectionProvider __attribute__((swift_name("init(speakableConditionCreator:speakableDirectionProvider:)"))) __attribute__((objc_designated_initializer));
- (NSString * _Nullable)generateVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NorwegianLanguagePack")))
@interface GNCNorwegianLanguagePack : GNCBase <GNCVoiceInstructionStringGenerator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CzechLanguagePack")))
@interface GNCCzechLanguagePack : GNCBase <GNCVoiceInstructionStringGenerator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EstonianLanguagePack")))
@interface GNCEstonianLanguagePack : GNCBase <GNCVoiceInstructionStringGenerator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SpanishLanguagePack")))
@interface GNCSpanishLanguagePack : GNCBase <GNCVoiceInstructionStringGenerator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HungarianLanguagePack")))
@interface GNCHungarianLanguagePack : GNCBase <GNCVoiceInstructionStringGenerator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FrenchLanguagePack")))
@interface GNCFrenchLanguagePack : GNCBase <GNCVoiceInstructionStringGenerator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ItalianLanguagePack")))
@interface GNCItalianLanguagePack : GNCBase <GNCVoiceInstructionStringGenerator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BulgarianLanguagePack")))
@interface GNCBulgarianLanguagePack : GNCBase <GNCVoiceInstructionStringGenerator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PortugueseLanguagePack")))
@interface GNCPortugueseLanguagePack : GNCBase <GNCVoiceInstructionStringGenerator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FinnishLanguagePack")))
@interface GNCFinnishLanguagePack : GNCBase <GNCVoiceInstructionStringGenerator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RussianLanguagePack")))
@interface GNCRussianLanguagePack : GNCBase <GNCVoiceInstructionStringGenerator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SwedishLanguagePack")))
@interface GNCSwedishLanguagePack : GNCBase <GNCVoiceInstructionStringGenerator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TurkishLanguagePack")))
@interface GNCTurkishLanguagePack : GNCBase <GNCVoiceInstructionStringGenerator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DutchLanguagePack")))
@interface GNCDutchLanguagePack : GNCBase <GNCVoiceInstructionStringGenerator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DanishLanguagePack")))
@interface GNCDanishLanguagePack : GNCBase <GNCVoiceInstructionStringGenerator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RomanianLanguagePack")))
@interface GNCRomanianLanguagePack : GNCBase <GNCVoiceInstructionStringGenerator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PolishLanguagePack")))
@interface GNCPolishLanguagePack : GNCBase <GNCVoiceInstructionStringGenerator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString * _Nullable)generateVoiceInstructionContext:(GNCVoiceInstructionContext *)voiceInstructionContext __attribute__((swift_name("generate(voiceInstructionContext:)")));
@property (readonly) NSString *languageKey __attribute__((swift_name("languageKey")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FoundationLanguageProvider")))
@interface GNCFoundationLanguageProvider : GNCBase <GNCLanguageProvider>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithLocale:(NSLocale *)locale __attribute__((swift_name("init(locale:)"))) __attribute__((objc_designated_initializer));
@property (readonly) NSString *languageCode __attribute__((swift_name("languageCode")));
@property (readonly) NSString * _Nullable regionCode __attribute__((swift_name("regionCode")));
@end

__attribute__((swift_name("NavigationSdk")))
@protocol GNCNavigationSdk
@required
- (void)addLeavingDestinationInterceptorInterceptor:(id<GNCInterceptingValidatorInterceptor>)interceptor __attribute__((swift_name("addLeavingDestinationInterceptor(interceptor:)")));
- (void)addLocationUpdateListenerLocationUpdateListener_:(id<GNCLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("addLocationUpdateListener(locationUpdateListener_:)")));
- (void)addOnNavigationStateInitializedListenerOnNavigationStateInitializedListener:(id<GNCOnNavigationStateInitializedListener>)onNavigationStateInitializedListener __attribute__((swift_name("addOnNavigationStateInitializedListener(onNavigationStateInitializedListener:)")));
- (void)addOnNavigationStateUpdatedListenerOnNavigationStateUpdatedListener:(id<GNCOnNavigationStateUpdatedListener>)onNavigationStateUpdatedListener __attribute__((swift_name("addOnNavigationStateUpdatedListener(onNavigationStateUpdatedListener:)")));
- (void)addReachingDestinationInterceptorInterceptor:(id<GNCInterceptingValidatorInterceptor>)interceptor __attribute__((swift_name("addReachingDestinationInterceptor(interceptor:)")));
- (void)addStatisticsProviderStatisticsProvider:(id<GNCStatisticsProvider>)statisticsProvider __attribute__((swift_name("addStatisticsProvider(statisticsProvider:)")));
- (void)removeLocationUpdateListenerLocationUpdateListener_:(id<GNCLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("removeLocationUpdateListener(locationUpdateListener_:)")));
- (void)removeOnNavigationStateInitializedListenerOnNavigationStateInitializedListener:(id<GNCOnNavigationStateInitializedListener>)onNavigationStateInitializedListener __attribute__((swift_name("removeOnNavigationStateInitializedListener(onNavigationStateInitializedListener:)")));
- (void)removeOnNavigationStateUpdatedListenerOnNavigationStateUpdatedListener:(id<GNCOnNavigationStateUpdatedListener>)onNavigationStateUpdatedListener __attribute__((swift_name("removeOnNavigationStateUpdatedListener(onNavigationStateUpdatedListener:)")));
- (void)requestStaticRouteOrigin:(GNCLocation *)origin destination:(id<GNCRoutable>)destination vehicleConfig:(id<GNCVehicleConfig> _Nullable)vehicleConfig onSuccess:(void (^)(GNCRoute *))onSuccess onError:(void (^)(GNCKotlinException *))onError __attribute__((swift_private));
- (void)requestStaticRouteDataOrigin:(GNCLocation *)origin destination:(id<GNCRoutable>)destination vehicleConfig:(id<GNCVehicleConfig> _Nullable)vehicleConfig onSuccess:(void (^)(GNCRouteData *))onSuccess onError:(void (^)(GNCKotlinException *))onError __attribute__((swift_private));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationStops:(NSArray<id<GNCRoutable>> *)stops error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(stops:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationStops:(NSArray<id<GNCRoutable>> *)stops vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(stops:vehicleConfig:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationLatLng:(GNCLatLng *)latLng error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(latLng:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationLatLng:(GNCLatLng *)latLng vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(latLng:vehicleConfig:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationRoutable:(id<GNCRoutable> _Nullable)routable error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(routable:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationRoutable:(id<GNCRoutable> _Nullable)routable vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(routable:vehicleConfig:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationRoute:(GNCRoute *)route sessionId:(NSString * _Nullable)sessionId error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(route:sessionId:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationRoute:(GNCRoute *)route sessionId:(NSString * _Nullable)sessionId vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(route:sessionId:vehicleConfig:)")));
- (void)stopNavigation __attribute__((swift_name("stopNavigation()")));
- (void)updateLocationLocation:(GNCLocation *)location __attribute__((swift_name("updateLocation(location:)")));
@property (readonly) id<GNCDestinationRepository> destinationRepository __attribute__((swift_name("destinationRepository")));
@property (readonly) GNCLocation * _Nullable location __attribute__((swift_name("location")));
@property (readonly) id<GNCLocationRepository> locationRepository __attribute__((swift_name("locationRepository"))) __attribute__((deprecated("Use location instead. Will be removed in future updates.")));
@property (readonly) BOOL navigationActive __attribute__((swift_name("navigationActive")));
@property (readonly) id<GNCNavigationEventHandler> navigationEventHandler __attribute__((swift_name("navigationEventHandler")));
@property (readonly) GNCNavigationState * _Nullable navigationState __attribute__((swift_name("navigationState")));
@property (readonly) id<GNCOnRoutePredictor> onRoutePredictor __attribute__((swift_name("onRoutePredictor")));
@property (readonly) id<GNCOnRouteProjector> onRouteProjector __attribute__((swift_name("onRouteProjector")));
@property (readonly) id<GNCRouteProgressTracker> routeProgressTracker __attribute__((swift_name("routeProgressTracker")));
@property (readonly) id<GNCSpeedTracker> speedTracker __attribute__((swift_name("speedTracker")));
@end

__attribute__((swift_name("BaseNavigationSdk")))
@interface GNCBaseNavigationSdk : GNCBase <GNCNavigationSdk>
- (instancetype)initWithExecutor:(id<GNCExecutor>)executor sessionClient:(id<GNCSessionClient>)sessionClient routeProvider:(id<GNCRouteProvider>)routeProvider __attribute__((swift_name("init(executor:sessionClient:routeProvider:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithExecutor:(id<GNCExecutor>)executor sessionClient:(id<GNCSessionClient>)sessionClient routeProvider:(id<GNCRouteProvider>)routeProvider internetConnectionValidator:(id<GNCInternetConnectionValidator> _Nullable)internetConnectionValidator updateRateProvider:(id<GNCUpdateRateProvider>)updateRateProvider __attribute__((swift_name("init(executor:sessionClient:routeProvider:internetConnectionValidator:updateRateProvider:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCBaseNavigationSdkCompanion *companion __attribute__((swift_name("companion")));
- (void)addLeavingDestinationInterceptorInterceptor:(id<GNCInterceptingValidatorInterceptor>)interceptor __attribute__((swift_name("addLeavingDestinationInterceptor(interceptor:)")));
- (void)addLocationUpdateListenerLocationUpdateListener_:(id<GNCLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("addLocationUpdateListener(locationUpdateListener_:)")));
- (void)addOnNavigationStateInitializedListenerOnNavigationStateInitializedListener:(id<GNCOnNavigationStateInitializedListener>)onNavigationStateInitializedListener __attribute__((swift_name("addOnNavigationStateInitializedListener(onNavigationStateInitializedListener:)")));
- (void)addOnNavigationStateUpdatedListenerOnNavigationStateUpdatedListener:(id<GNCOnNavigationStateUpdatedListener>)onNavigationStateUpdatedListener __attribute__((swift_name("addOnNavigationStateUpdatedListener(onNavigationStateUpdatedListener:)")));
- (void)addReachingDestinationInterceptorInterceptor:(id<GNCInterceptingValidatorInterceptor>)interceptor __attribute__((swift_name("addReachingDestinationInterceptor(interceptor:)")));
- (void)addStatisticsProviderStatisticsProvider:(id<GNCStatisticsProvider>)statisticsProvider __attribute__((swift_name("addStatisticsProvider(statisticsProvider:)")));
- (void)removeLocationUpdateListenerLocationUpdateListener_:(id<GNCLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("removeLocationUpdateListener(locationUpdateListener_:)")));
- (void)removeOnNavigationStateInitializedListenerOnNavigationStateInitializedListener:(id<GNCOnNavigationStateInitializedListener>)onNavigationStateInitializedListener __attribute__((swift_name("removeOnNavigationStateInitializedListener(onNavigationStateInitializedListener:)")));
- (void)removeOnNavigationStateUpdatedListenerOnNavigationStateUpdatedListener:(id<GNCOnNavigationStateUpdatedListener>)onNavigationStateUpdatedListener __attribute__((swift_name("removeOnNavigationStateUpdatedListener(onNavigationStateUpdatedListener:)")));
- (void)requestStaticRouteOrigin:(GNCLocation *)origin destination:(id<GNCRoutable>)destination vehicleConfig:(id<GNCVehicleConfig> _Nullable)vehicleConfig onSuccess:(void (^)(GNCRoute *))onSuccess onError:(void (^)(GNCKotlinException *))onError __attribute__((swift_private));
- (void)requestStaticRouteDataOrigin:(GNCLocation *)origin destination:(id<GNCRoutable>)destination vehicleConfig:(id<GNCVehicleConfig> _Nullable)vehicleConfig onSuccess:(void (^)(GNCRouteData *))onSuccess onError:(void (^)(GNCKotlinException *))onError __attribute__((swift_private));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationStops:(NSArray<id<GNCRoutable>> *)stops error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(stops:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationStops:(NSArray<id<GNCRoutable>> *)stops vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(stops:vehicleConfig:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationLatLng:(GNCLatLng *)latLng error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(latLng:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationLatLng:(GNCLatLng *)latLng vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(latLng:vehicleConfig:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationRoutable:(id<GNCRoutable> _Nullable)routable error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(routable:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationRoutable:(id<GNCRoutable> _Nullable)routable vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(routable:vehicleConfig:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationRoute:(GNCRoute *)route sessionId:(NSString * _Nullable)sessionId error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(route:sessionId:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)startNavigationRoute:(GNCRoute *)route sessionId:(NSString * _Nullable)sessionId vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("startNavigation(route:sessionId:vehicleConfig:)")));
- (void)stopNavigation __attribute__((swift_name("stopNavigation()")));
- (void)updateLocationLocation:(GNCLocation *)location __attribute__((swift_name("updateLocation(location:)")));
@property (readonly) id<GNCDestinationRepository> destinationRepository __attribute__((swift_name("destinationRepository")));
@property (readonly) GNCLocation * _Nullable location __attribute__((swift_name("location")));
@property (readonly) id<GNCLocationRepository> locationRepository __attribute__((swift_name("locationRepository"))) __attribute__((deprecated("Use location instead. Will be removed in future updates.")));
@property (readonly) BOOL navigationActive __attribute__((swift_name("navigationActive")));
@property (readonly) GNCSimpleNavigationEventHandler *navigationEventHandler __attribute__((swift_name("navigationEventHandler")));
@property (readonly) GNCNavigationState * _Nullable navigationState __attribute__((swift_name("navigationState")));
@property id<GNCOnRoutePredictor> onRoutePredictor __attribute__((swift_name("onRoutePredictor")));
@property id<GNCOnRouteProjector> onRouteProjector __attribute__((swift_name("onRouteProjector")));
@property id<GNCRouteProgressTracker> routeProgressTracker __attribute__((swift_name("routeProgressTracker")));
@property id<GNCSpeedTracker> speedTracker __attribute__((swift_name("speedTracker")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IosNavigationSdk")))
@interface GNCIosNavigationSdk : GNCBaseNavigationSdk
- (instancetype)initWithApiKey:(NSString *)apiKey __attribute__((swift_name("init(apiKey:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithServiceUrl:(NSString *)serviceUrl apiKey:(NSString *)apiKey __attribute__((swift_name("init(serviceUrl:apiKey:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithExecutor:(id<GNCExecutor>)executor sessionClient:(id<GNCSessionClient>)sessionClient routeProvider:(id<GNCRouteProvider>)routeProvider __attribute__((swift_name("init(executor:sessionClient:routeProvider:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithExecutor:(id<GNCExecutor>)executor sessionClient:(id<GNCSessionClient>)sessionClient routeProvider:(id<GNCRouteProvider>)routeProvider internetConnectionValidator:(id<GNCInternetConnectionValidator> _Nullable)internetConnectionValidator updateRateProvider:(id<GNCUpdateRateProvider>)updateRateProvider __attribute__((swift_name("init(executor:sessionClient:routeProvider:internetConnectionValidator:updateRateProvider:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BaseNavigationSdk.Companion")))
@interface GNCBaseNavigationSdkCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCBaseNavigationSdkCompanion *shared __attribute__((swift_name("shared")));
@end

__attribute__((swift_name("InternetConnectionValidator")))
@protocol GNCInternetConnectionValidator
@required
@property (readonly) BOOL connected __attribute__((swift_name("connected")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IosInternetConnectionValidator")))
@interface GNCIosInternetConnectionValidator : GNCBase <GNCInternetConnectionValidator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property (class, readonly, getter=companion) GNCIosInternetConnectionValidatorCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) BOOL connected __attribute__((swift_name("connected")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IosInternetConnectionValidator.Companion")))
@interface GNCIosInternetConnectionValidatorCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCIosInternetConnectionValidatorCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) int32_t REACHABILITY_FLAGS_LENGTH __attribute__((swift_name("REACHABILITY_FLAGS_LENGTH")));
@end

__attribute__((swift_name("SerializationStrategy")))
@protocol GNCSerializationStrategy
@required
- (void)serializeEncoder:(id<GNCEncoder>)encoder value:(id _Nullable)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<GNCSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end

__attribute__((swift_name("DeserializationStrategy")))
@protocol GNCDeserializationStrategy
@required
- (id _Nullable)deserializeDecoder:(id<GNCDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
@property (readonly) id<GNCSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end

__attribute__((swift_name("KSerializer")))
@protocol GNCKSerializer <GNCSerializationStrategy, GNCDeserializationStrategy>
@required
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AnySerializer")))
@interface GNCAnySerializer : GNCBase <GNCKSerializer>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (id)deserializeDecoder:(id<GNCDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<GNCEncoder>)encoder value:(id)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<GNCSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end

__attribute__((swift_name("Credentials")))
@protocol GNCCredentials
@required
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CredentialsApiKey")))
@interface GNCCredentialsApiKey : GNCBase <GNCCredentials>
- (instancetype)initWithApiKey:(NSString *)apiKey __attribute__((swift_name("init(apiKey:)"))) __attribute__((objc_designated_initializer));
- (GNCCredentialsApiKey *)doCopyApiKey:(NSString *)apiKey __attribute__((swift_name("doCopy(apiKey:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *apiKey __attribute__((swift_name("apiKey")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CredentialsBasic")))
@interface GNCCredentialsBasic : GNCBase <GNCCredentials>
- (instancetype)initWithUsername:(NSString *)username password:(NSString *)password __attribute__((swift_name("init(username:password:)"))) __attribute__((objc_designated_initializer));
- (GNCCredentialsBasic *)doCopyUsername:(NSString *)username password:(NSString *)password __attribute__((swift_name("doCopy(username:password:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *password __attribute__((swift_name("password")));
@property (readonly) NSString *username __attribute__((swift_name("username")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpClientFactory")))
@interface GNCHttpClientFactory : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)httpClientFactory __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHttpClientFactory *shared __attribute__((swift_name("shared")));

/**
 * @note annotations
 *   kotlin.jvm.JvmStatic
 *   kotlin.jvm.JvmOverloads
*/
- (GNCHttpClient *)createServiceUrl:(NSString *)serviceUrl engine:(id<GNCHttpClientEngine>)engine credentials:(id<GNCCredentials> _Nullable)credentials __attribute__((swift_name("create(serviceUrl:engine:credentials:)")));
@end

__attribute__((swift_name("SpeedTracker")))
@protocol GNCSpeedTracker
@required
@property (readonly) GNCSpeed *speed __attribute__((swift_name("speed")));
@end

__attribute__((swift_name("LocationUpdateListener")))
@protocol GNCLocationUpdateListener
@required
- (void)onLocationUpdatedLocation:(GNCLocation *)location __attribute__((swift_name("onLocationUpdated(location:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AccelerationEffectedSpeedTracker")))
@interface GNCAccelerationEffectedSpeedTracker : GNCBase <GNCSpeedTracker, GNCLocationUpdateListener>
- (instancetype)initWithTimeProvider:(id<GNCTimeProvider>)timeProvider decelerationModifier:(id<GNCAccelerationEffectedSpeedTrackerDecelerationModifier> _Nullable)decelerationModifier maxLocationAge:(GNCDuration *)maxLocationAge minSpeed:(GNCSpeed *)minSpeed __attribute__((swift_name("init(timeProvider:decelerationModifier:maxLocationAge:minSpeed:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCAccelerationEffectedSpeedTrackerCompanion *companion __attribute__((swift_name("companion")));
- (void)onLocationUpdatedLocation:(GNCLocation *)location __attribute__((swift_name("onLocationUpdated(location:)")));
@property (readonly) GNCSpeed *speed __attribute__((swift_name("speed")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AccelerationEffectedSpeedTracker.Companion")))
@interface GNCAccelerationEffectedSpeedTrackerCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCAccelerationEffectedSpeedTrackerCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) GNCDuration *MAX_LOCATION_AGE __attribute__((swift_name("MAX_LOCATION_AGE")));
@property (readonly) GNCSpeed *MIN_SPEED __attribute__((swift_name("MIN_SPEED")));
@end

__attribute__((swift_name("AccelerationEffectedSpeedTrackerDecelerationModifier")))
@protocol GNCAccelerationEffectedSpeedTrackerDecelerationModifier
@required
- (double)getModifierSpeed:(GNCSpeed *)speed __attribute__((swift_name("getModifier(speed:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AccelerationEffectedSpeedTracker.SpeedBasedDecelerationModifier")))
@interface GNCAccelerationEffectedSpeedTrackerSpeedBasedDecelerationModifier : GNCBase <GNCAccelerationEffectedSpeedTrackerDecelerationModifier>
- (instancetype)initWithFactor:(double)factor __attribute__((swift_name("init(factor:)"))) __attribute__((objc_designated_initializer));
- (double)getModifierSpeed:(GNCSpeed *)speed __attribute__((swift_name("getModifier(speed:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CalculatingSpeedTracker")))
@interface GNCCalculatingSpeedTracker : GNCBase <GNCSpeedTracker, GNCLocationUpdateListener>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMaxTimeDelta:(GNCDuration *)maxTimeDelta maxDeltaDistance:(GNCLength *)maxDeltaDistance __attribute__((swift_name("init(maxTimeDelta:maxDeltaDistance:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCCalculatingSpeedTrackerCompanion *companion __attribute__((swift_name("companion")));
- (void)onLocationUpdatedLocation:(GNCLocation *)location __attribute__((swift_name("onLocationUpdated(location:)")));
@property GNCSpeed *speed __attribute__((swift_name("speed")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CalculatingSpeedTracker.Companion")))
@interface GNCCalculatingSpeedTrackerCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCCalculatingSpeedTrackerCompanion *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SimpleSpeedTracker")))
@interface GNCSimpleSpeedTracker : GNCBase <GNCSpeedTracker, GNCLocationUpdateListener>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)onLocationUpdatedLocation:(GNCLocation *)location __attribute__((swift_name("onLocationUpdated(location:)")));
@property (readonly) GNCSpeed *speed __attribute__((swift_name("speed")));
@end

__attribute__((swift_name("LocationRepository")))
@protocol GNCLocationRepository
@required
- (void)addLocationUpdateListenerLocationUpdateListener_:(id<GNCLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("addLocationUpdateListener(locationUpdateListener_:)")));
- (NSArray<GNCLocation *> *)getLastLocationsMaxAge:(GNCDuration * _Nullable)maxAge maxCount:(int32_t)maxCount __attribute__((swift_name("getLastLocations(maxAge:maxCount:)")));
- (void)removeLocationUpdateListenerLocationUpdateListener_:(id<GNCLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("removeLocationUpdateListener(locationUpdateListener_:)")));
@property (readonly) GNCLocation * _Nullable location __attribute__((swift_name("location")));
@property (readonly) GNCLocation * _Nullable rawLocation __attribute__((swift_name("rawLocation")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FilterWrapper")))
@interface GNCFilterWrapper : GNCBase
- (instancetype)initWithFilter:(GNCJKalmanFilter *)filter __attribute__((swift_name("init(filter:)"))) __attribute__((objc_designated_initializer));
- (GNCLocation *)filterLocation:(GNCLocation *)location __attribute__((swift_name("filter(location:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JKalmanFilter")))
@interface GNCJKalmanFilter : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property (class, readonly, getter=companion) GNCJKalmanFilterCompanion *companion __attribute__((swift_name("companion")));
- (void)doInitInitValue:(GNCLocation *)initValue __attribute__((swift_name("doInit(initValue:)")));
- (GNCLocation * _Nullable)predictTimestamp:(int64_t)timestamp __attribute__((swift_name("predict(timestamp:)")));
- (void)reset __attribute__((swift_name("reset()")));
- (NSString *)description __attribute__((swift_name("description()")));
- (GNCLocation *)updateUpdateValue:(GNCLocation *)updateValue __attribute__((swift_name("update(updateValue:)")));
@property (readonly) BOOL isInitialised __attribute__((swift_name("isInitialised")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JKalmanFilter.Companion")))
@interface GNCJKalmanFilterCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCJKalmanFilterCompanion *shared __attribute__((swift_name("shared")));
@end

__attribute__((swift_name("JKalmanMatrix")))
@interface GNCJKalmanMatrix<A> : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (A _Nullable)addX:(A _Nullable)x __attribute__((swift_name("add(x:)")));
- (A _Nullable)identity __attribute__((swift_name("identity()")));
- (A _Nullable)inverse __attribute__((swift_name("inverse()")));
- (A _Nullable)multiplyX:(A _Nullable)x __attribute__((swift_name("multiply(x:)")));
- (A _Nullable)subtractX:(A _Nullable)x __attribute__((swift_name("subtract(x:)")));
- (A _Nullable)transpose __attribute__((swift_name("transpose()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JKalmanMatrixApache")))
@interface GNCJKalmanMatrixApache : GNCJKalmanMatrix<GNCJKalmanMatrixApache *>
- (instancetype)initWithMatrix:(id<GNCRealMatrix>)matrix __attribute__((swift_name("init(matrix:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCJKalmanMatrixApache *)addX:(GNCJKalmanMatrixApache *)x __attribute__((swift_name("add(x:)")));
- (id<GNCRealMatrix>)getMatrix __attribute__((swift_name("getMatrix()")));
- (GNCJKalmanMatrixApache *)identity __attribute__((swift_name("identity()")));
- (GNCJKalmanMatrixApache *)inverse __attribute__((swift_name("inverse()")));
- (GNCJKalmanMatrixApache *)multiplyX:(GNCJKalmanMatrixApache *)x __attribute__((swift_name("multiply(x:)")));
- (void)setMatrixMatrix:(id<GNCRealMatrix>)matrix __attribute__((swift_name("setMatrix(matrix:)")));
- (GNCJKalmanMatrixApache *)subtractX:(GNCJKalmanMatrixApache *)x __attribute__((swift_name("subtract(x:)")));
- (NSString *)description __attribute__((swift_name("description()")));
- (GNCJKalmanMatrixApache *)transpose __attribute__((swift_name("transpose()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JKalmanSteps")))
@interface GNCJKalmanSteps : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property (class, readonly, getter=companion) GNCJKalmanStepsCompanion *companion __attribute__((swift_name("companion")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JKalmanSteps.Companion")))
@interface GNCJKalmanStepsCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCJKalmanStepsCompanion *shared __attribute__((swift_name("shared")));
- (GNCJKalmanMatrix *)covarianceCorrectorKMat:(GNCJKalmanMatrix *)kMat hMat:(GNCJKalmanMatrix *)hMat __attribute__((swift_name("covarianceCorrector(kMat:hMat:)")));
- (GNCJKalmanMatrix *)gainPPredMat:(GNCJKalmanMatrix *)pPredMat hMat:(GNCJKalmanMatrix *)hMat rMat:(GNCJKalmanMatrix *)rMat __attribute__((swift_name("gain(pPredMat:hMat:rMat:)")));
- (GNCJKalmanMatrix *)predictCovariancePLastMat:(GNCJKalmanMatrix *)pLastMat fMat:(GNCJKalmanMatrix *)fMat qMat:(GNCJKalmanMatrix *)qMat __attribute__((swift_name("predictCovariance(pLastMat:fMat:qMat:)")));
- (GNCJKalmanMatrix *)predictStateXLastVec:(GNCJKalmanMatrix *)xLastVec fMat:(GNCJKalmanMatrix *)fMat __attribute__((swift_name("predictState(xLastVec:fMat:)")));
- (GNCJKalmanMatrix *)predictStateXLastVec:(GNCJKalmanMatrix *)xLastVec fMat:(GNCJKalmanMatrix *)fMat bMat:(GNCJKalmanMatrix *)bMat uVec:(GNCJKalmanMatrix *)uVec __attribute__((swift_name("predictState(xLastVec:fMat:bMat:uVec:)")));
- (GNCKalmanPair<GNCJKalmanMatrix *> *)predictionXLastVec:(GNCJKalmanMatrix *)xLastVec pLastMat:(GNCJKalmanMatrix *)pLastMat fMat:(GNCJKalmanMatrix *)fMat qMat:(GNCJKalmanMatrix *)qMat __attribute__((swift_name("prediction(xLastVec:pLastMat:fMat:qMat:)")));
- (GNCKalmanPair<GNCJKalmanMatrix *> *)predictionXLastVec:(GNCJKalmanMatrix *)xLastVec pLastMat:(GNCJKalmanMatrix *)pLastMat fMat:(GNCJKalmanMatrix *)fMat qMat:(GNCJKalmanMatrix *)qMat bMat:(GNCJKalmanMatrix *)bMat uVec:(GNCJKalmanMatrix *)uVec __attribute__((swift_name("prediction(xLastVec:pLastMat:fMat:qMat:bMat:uVec:)")));
- (GNCKalmanPair<GNCJKalmanMatrix *> *)updateXPredVec:(GNCJKalmanMatrix *)xPredVec pPredMat:(GNCJKalmanMatrix *)pPredMat zVec:(GNCJKalmanMatrix *)zVec hMat:(GNCJKalmanMatrix *)hMat rMat:(GNCJKalmanMatrix *)rMat __attribute__((swift_name("update(xPredVec:pPredMat:zVec:hMat:rMat:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KalmanPair")))
@interface GNCKalmanPair<T> : GNCBase
- (instancetype)initWithStoredXVec:(T _Nullable)storedXVec storedPMat:(T _Nullable)storedPMat __attribute__((swift_name("init(storedXVec:storedPMat:)"))) __attribute__((objc_designated_initializer));
- (T _Nullable)pMat __attribute__((swift_name("pMat()")));
- (T _Nullable)xVec __attribute__((swift_name("xVec()")));
@end

__attribute__((swift_name("StatisticsProvider")))
@protocol GNCStatisticsProvider
@required
- (NSDictionary<NSString *, id> *)getStatistics __attribute__((swift_name("getStatistics()")));
- (void)start __attribute__((swift_name("start()")));
- (void)stop __attribute__((swift_name("stop()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DeviceStatisticsProvider")))
@interface GNCDeviceStatisticsProvider : GNCBase <GNCStatisticsProvider>
- (instancetype)initWithExecutor:(id<GNCExecutor>)executor deviceStateProvider:(id<GNCDeviceStatisticsProviderDeviceStateProvider>)deviceStateProvider __attribute__((swift_name("init(executor:deviceStateProvider:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCDeviceStatisticsProviderCompanion *companion __attribute__((swift_name("companion")));
- (NSDictionary<NSString *, id> *)getStatistics __attribute__((swift_name("getStatistics()")));
- (void)start __attribute__((swift_name("start()")));
- (void)stop __attribute__((swift_name("stop()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DeviceStatisticsProvider.Companion")))
@interface GNCDeviceStatisticsProviderCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCDeviceStatisticsProviderCompanion *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DeviceStatisticsProvider.DeviceState")))
@interface GNCDeviceStatisticsProviderDeviceState : GNCBase
- (instancetype)initWithIsCharging:(BOOL)isCharging batteryCapacityPercent:(double)batteryCapacityPercent thermalState:(GNCDeviceStatisticsProviderThermalState *)thermalState isAppInBackground:(BOOL)isAppInBackground isMainAppInForeground:(BOOL)isMainAppInForeground isCarAppInForeground:(BOOL)isCarAppInForeground __attribute__((swift_name("init(isCharging:batteryCapacityPercent:thermalState:isAppInBackground:isMainAppInForeground:isCarAppInForeground:)"))) __attribute__((objc_designated_initializer));
- (GNCDeviceStatisticsProviderDeviceState *)doCopyIsCharging:(BOOL)isCharging batteryCapacityPercent:(double)batteryCapacityPercent thermalState:(GNCDeviceStatisticsProviderThermalState *)thermalState isAppInBackground:(BOOL)isAppInBackground isMainAppInForeground:(BOOL)isMainAppInForeground isCarAppInForeground:(BOOL)isCarAppInForeground __attribute__((swift_name("doCopy(isCharging:batteryCapacityPercent:thermalState:isAppInBackground:isMainAppInForeground:isCarAppInForeground:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) double batteryCapacityPercent __attribute__((swift_name("batteryCapacityPercent")));
@property (readonly) BOOL isAppInBackground __attribute__((swift_name("isAppInBackground")));
@property (readonly) BOOL isCarAppInForeground __attribute__((swift_name("isCarAppInForeground")));
@property (readonly) BOOL isCharging __attribute__((swift_name("isCharging")));
@property (readonly) BOOL isMainAppInForeground __attribute__((swift_name("isMainAppInForeground")));
@property (readonly) GNCDeviceStatisticsProviderThermalState *thermalState __attribute__((swift_name("thermalState")));
@end

__attribute__((swift_name("DeviceStatisticsProviderDeviceStateProvider")))
@protocol GNCDeviceStatisticsProviderDeviceStateProvider
@required
- (GNCDeviceStatisticsProviderDeviceState *)getDeviceState __attribute__((swift_name("getDeviceState()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DeviceStatisticsProvider.DeviceStatistics")))
@interface GNCDeviceStatisticsProviderDeviceStatistics : GNCBase
- (instancetype)initWithBatteryCapacityChangeWhileChargingPercent:(double)batteryCapacityChangeWhileChargingPercent batteryCapacityChangeWithoutChargingPercent:(double)batteryCapacityChangeWithoutChargingPercent chargingDurationMs:(int64_t)chargingDurationMs appInBackgroundDurationMs:(int64_t)appInBackgroundDurationMs mainAppInForegroundMs:(int64_t)mainAppInForegroundMs carAppInForegroundMs:(int64_t)carAppInForegroundMs durationThermalStateMs:(NSDictionary<GNCDeviceStatisticsProviderThermalState *, GNCLong *> *)durationThermalStateMs __attribute__((swift_name("init(batteryCapacityChangeWhileChargingPercent:batteryCapacityChangeWithoutChargingPercent:chargingDurationMs:appInBackgroundDurationMs:mainAppInForegroundMs:carAppInForegroundMs:durationThermalStateMs:)"))) __attribute__((objc_designated_initializer));
- (GNCDeviceStatisticsProviderDeviceStatistics *)doCopyBatteryCapacityChangeWhileChargingPercent:(double)batteryCapacityChangeWhileChargingPercent batteryCapacityChangeWithoutChargingPercent:(double)batteryCapacityChangeWithoutChargingPercent chargingDurationMs:(int64_t)chargingDurationMs appInBackgroundDurationMs:(int64_t)appInBackgroundDurationMs mainAppInForegroundMs:(int64_t)mainAppInForegroundMs carAppInForegroundMs:(int64_t)carAppInForegroundMs durationThermalStateMs:(NSDictionary<GNCDeviceStatisticsProviderThermalState *, GNCLong *> *)durationThermalStateMs __attribute__((swift_name("doCopy(batteryCapacityChangeWhileChargingPercent:batteryCapacityChangeWithoutChargingPercent:chargingDurationMs:appInBackgroundDurationMs:mainAppInForegroundMs:carAppInForegroundMs:durationThermalStateMs:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t appInBackgroundDurationMs __attribute__((swift_name("appInBackgroundDurationMs")));
@property (readonly) double batteryCapacityChangeWhileChargingPercent __attribute__((swift_name("batteryCapacityChangeWhileChargingPercent")));
@property (readonly) double batteryCapacityChangeWithoutChargingPercent __attribute__((swift_name("batteryCapacityChangeWithoutChargingPercent")));
@property (readonly) int64_t carAppInForegroundMs __attribute__((swift_name("carAppInForegroundMs")));
@property (readonly) int64_t chargingDurationMs __attribute__((swift_name("chargingDurationMs")));
@property (readonly) NSDictionary<GNCDeviceStatisticsProviderThermalState *, GNCLong *> *durationThermalStateMs __attribute__((swift_name("durationThermalStateMs")));
@property (readonly) int64_t mainAppInForegroundMs __attribute__((swift_name("mainAppInForegroundMs")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DeviceStatisticsProvider.ThermalState")))
@interface GNCDeviceStatisticsProviderThermalState : GNCKotlinEnum<GNCDeviceStatisticsProviderThermalState *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCDeviceStatisticsProviderThermalState *none __attribute__((swift_name("none")));
@property (class, readonly) GNCDeviceStatisticsProviderThermalState *light __attribute__((swift_name("light")));
@property (class, readonly) GNCDeviceStatisticsProviderThermalState *moderate __attribute__((swift_name("moderate")));
@property (class, readonly) GNCDeviceStatisticsProviderThermalState *severe __attribute__((swift_name("severe")));
@property (class, readonly) GNCDeviceStatisticsProviderThermalState *critical __attribute__((swift_name("critical")));
@property (class, readonly) GNCDeviceStatisticsProviderThermalState *emergency __attribute__((swift_name("emergency")));
@property (class, readonly) GNCDeviceStatisticsProviderThermalState *shutdown __attribute__((swift_name("shutdown")));
+ (GNCKotlinArray<GNCDeviceStatisticsProviderThermalState *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((swift_name("NavigationEventHandlerOnInitialRouteReceivedListener")))
@protocol GNCNavigationEventHandlerOnInitialRouteReceivedListener
@required
- (void)onInitialRouteReceivedRoute:(GNCRoute *)route __attribute__((swift_name("onInitialRouteReceived(route:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NavigationStatisticsProvider")))
@interface GNCNavigationStatisticsProvider : GNCBase <GNCStatisticsProvider, GNCNavigationEventHandlerOnInitialRouteReceivedListener, GNCOnNavigationStateUpdatedListener>
- (instancetype)initWithNavigationSdk:(id<GNCNavigationSdk>)navigationSdk __attribute__((swift_name("init(navigationSdk:)"))) __attribute__((objc_designated_initializer));
- (NSDictionary<NSString *, id> *)getStatistics __attribute__((swift_name("getStatistics()")));
- (void)onInitialRouteReceivedRoute:(GNCRoute *)route __attribute__((swift_name("onInitialRouteReceived(route:)")));
- (void)onNavigationStateUpdatedNavigationState:(GNCNavigationState * _Nullable)navigationState __attribute__((swift_name("onNavigationStateUpdated(navigationState:)")));
- (void)start __attribute__((swift_name("start()")));
- (void)stop __attribute__((swift_name("stop()")));
@end

__attribute__((swift_name("OnRouteProjector")))
@protocol GNCOnRouteProjector
@required
- (void)addOnRouteProjectorListenerOnRouteProjectorListener:(id<GNCOnRouteProjectorOnRouteProjectorListener>)onRouteProjectorListener __attribute__((swift_name("addOnRouteProjectorListener(onRouteProjectorListener:)")));
- (void)removeOnRouteProjectorListenerOnRouteProjectorListener:(id<GNCOnRouteProjectorOnRouteProjectorListener>)onRouteProjectorListener __attribute__((swift_name("removeOnRouteProjectorListener(onRouteProjectorListener:)")));
@property (readonly) BOOL initialized __attribute__((swift_name("initialized")));
@property (readonly) GNCOnRouteProjectorProjectedLocation * _Nullable projection __attribute__((swift_name("projection")));
@property (readonly) GNCRoute * _Nullable route __attribute__((swift_name("route")));
@end

__attribute__((swift_name("OnRouteProjectorOnRouteProjectorListener")))
@protocol GNCOnRouteProjectorOnRouteProjectorListener
@required
- (void)onProjectionChangedProjectedLocation:(GNCOnRouteProjectorProjectedLocation *)projectedLocation __attribute__((swift_name("onProjectionChanged(projectedLocation:)")));
- (void)onRouteChangedRoute:(GNCRoute * _Nullable)route __attribute__((swift_name("onRouteChanged(route:)")));
@end

__attribute__((swift_name("Location")))
@interface GNCLocation : GNCFreezable
- (instancetype)initWithLocation:(GNCLocation *)location __attribute__((swift_name("init(location:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithProvider:(NSString *)provider timestamp:(int64_t)timestamp latLng:(GNCLatLng *)latLng altitude:(GNCLength * _Nullable)altitude heading:(GNCDouble * _Nullable)heading speed:(GNCSpeed * _Nullable)speed accuracy:(GNCLength * _Nullable)accuracy level:(GNCInt * _Nullable)level __attribute__((swift_name("init(provider:timestamp:latLng:altitude:heading:speed:accuracy:level:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCLocationCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
@property (readonly) GNCLength * _Nullable accuracy __attribute__((swift_name("accuracy")));
@property (readonly) GNCLength * _Nullable altitude __attribute__((swift_name("altitude")));
@property (readonly) GNCDouble * _Nullable heading __attribute__((swift_name("heading")));
@property (readonly) GNCLatLng *latLng __attribute__((swift_name("latLng")));
@property (readonly) GNCInt * _Nullable level __attribute__((swift_name("level")));
@property (readonly) NSString *provider __attribute__((swift_name("provider")));
@property (readonly) GNCSpeed * _Nullable speed __attribute__((swift_name("speed")));
@property (readonly) int64_t timestamp __attribute__((swift_name("timestamp")));
@end

__attribute__((swift_name("OnRouteProjectorProjectedLocation")))
@interface GNCOnRouteProjectorProjectedLocation : GNCLocation
- (instancetype)initWithLocation:(GNCLocation *)location route:(GNCRoute *)route segment:(GNCRouteSegment *)segment distanceToSegment:(GNCLength *)distanceToSegment __attribute__((swift_name("init(location:route:segment:distanceToSegment:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithProjectedProbe:(GNCOnRouteProjectorProjectedLocation *)projectedProbe __attribute__((swift_name("init(projectedProbe:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithProvider:(NSString *)provider timestamp:(int64_t)timestamp latLng:(GNCLatLng *)latLng altitude:(GNCLength * _Nullable)altitude heading:(GNCDouble * _Nullable)heading speed:(GNCSpeed * _Nullable)speed accuracy:(GNCLength * _Nullable)accuracy level:(GNCInt * _Nullable)level originalLocation:(GNCLocation *)originalLocation route:(GNCRoute *)route segment:(GNCRouteSegment *)segment distanceToSegment:(GNCLength *)distanceToSegment __attribute__((swift_name("init(provider:timestamp:latLng:altitude:heading:speed:accuracy:level:originalLocation:route:segment:distanceToSegment:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithLocation:(GNCLocation *)location __attribute__((swift_name("init(location:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithProvider:(NSString *)provider timestamp:(int64_t)timestamp latLng:(GNCLatLng *)latLng altitude:(GNCLength * _Nullable)altitude heading:(GNCDouble * _Nullable)heading speed:(GNCSpeed * _Nullable)speed accuracy:(GNCLength * _Nullable)accuracy level:(GNCInt * _Nullable)level __attribute__((swift_name("init(provider:timestamp:latLng:altitude:heading:speed:accuracy:level:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (GNCOnRouteProjectorProjectedLocation *)doCopyProvider:(NSString * _Nullable)provider timestamp:(GNCLong * _Nullable)timestamp latLng:(GNCLatLng * _Nullable)latLng altitude:(GNCLength * _Nullable)altitude heading:(GNCDouble * _Nullable)heading speed:(GNCSpeed * _Nullable)speed accuracy:(GNCLength * _Nullable)accuracy level:(GNCInt * _Nullable)level originalLocation:(GNCLocation * _Nullable)originalLocation route:(GNCRoute * _Nullable)route segment:(GNCRouteSegment * _Nullable)segment distanceToSegment:(GNCLength * _Nullable)distanceToSegment __attribute__((swift_name("doCopy(provider:timestamp:latLng:altitude:heading:speed:accuracy:level:originalLocation:route:segment:distanceToSegment:)")));
@property (readonly) GNCLength *distanceToSegment __attribute__((swift_name("distanceToSegment")));
@property (readonly) GNCLocation *originalLocation __attribute__((swift_name("originalLocation")));
@property (readonly) GNCRoute *route __attribute__((swift_name("route")));
@property (readonly) GNCRouteSegment *segment __attribute__((swift_name("segment")));
@end

__attribute__((swift_name("ProjectionFinder")))
@protocol GNCProjectionFinder
@required

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (GNCOnRouteProjectorProjectedLocation * _Nullable)findBestProjectionRoute:(GNCRoute *)route location:(GNCLocation *)location options:(GNCProjectionFinderOptions * _Nullable)options error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("findBestProjection(route:location:options:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DistanceAlignmentProjectionFinder")))
@interface GNCDistanceAlignmentProjectionFinder : GNCBase <GNCProjectionFinder>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property (class, readonly, getter=companion) GNCDistanceAlignmentProjectionFinderCompanion *companion __attribute__((swift_name("companion")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (GNCOnRouteProjectorProjectedLocation * _Nullable)findBestProjectionRoute:(GNCRoute *)route location:(GNCLocation *)location options:(GNCProjectionFinderOptions * _Nullable)options error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("findBestProjection(route:location:options:)")));
@property id<GNCDistanceAlignmentProjectionFinderProjectionResultListener> _Nullable projectionResultListener __attribute__((swift_name("projectionResultListener")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DistanceAlignmentProjectionFinder.Companion")))
@interface GNCDistanceAlignmentProjectionFinderCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCDistanceAlignmentProjectionFinderCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) double MAX_DISTANCE_METERS __attribute__((swift_name("MAX_DISTANCE_METERS")));
@property (readonly) float e __attribute__((swift_name("e")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DistanceAlignmentProjectionFinder.ProjectionResult")))
@interface GNCDistanceAlignmentProjectionFinderProjectionResult : GNCBase
- (instancetype)initWithRating:(double)rating segmentIndex:(int32_t)segmentIndex distance:(GNCLength *)distance distanceRating:(float)distanceRating alignment:(double)alignment alignmentRating:(float)alignmentRating projectedLocation:(GNCOnRouteProjectorProjectedLocation *)projectedLocation __attribute__((swift_name("init(rating:segmentIndex:distance:distanceRating:alignment:alignmentRating:projectedLocation:)"))) __attribute__((objc_designated_initializer));
- (GNCDistanceAlignmentProjectionFinderProjectionResult *)doCopyRating:(double)rating segmentIndex:(int32_t)segmentIndex distance:(GNCLength *)distance distanceRating:(float)distanceRating alignment:(double)alignment alignmentRating:(float)alignmentRating projectedLocation:(GNCOnRouteProjectorProjectedLocation *)projectedLocation __attribute__((swift_name("doCopy(rating:segmentIndex:distance:distanceRating:alignment:alignmentRating:projectedLocation:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) double alignment __attribute__((swift_name("alignment")));
@property (readonly) float alignmentRating __attribute__((swift_name("alignmentRating")));
@property (readonly) GNCLength *distance __attribute__((swift_name("distance")));
@property (readonly) float distanceRating __attribute__((swift_name("distanceRating")));
@property (readonly) GNCOnRouteProjectorProjectedLocation *projectedLocation __attribute__((swift_name("projectedLocation")));
@property (readonly) double rating __attribute__((swift_name("rating")));
@property (readonly) int32_t segmentIndex __attribute__((swift_name("segmentIndex")));
@end

__attribute__((swift_name("DistanceAlignmentProjectionFinderProjectionResultListener")))
@protocol GNCDistanceAlignmentProjectionFinderProjectionResultListener
@required
- (void)bestProjectionResultFoundProjectionResults:(GNCDistanceAlignmentProjectionFinderProjectionResult *)projectionResults __attribute__((swift_name("bestProjectionResultFound(projectionResults:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PlainDistanceProjectionFinder")))
@interface GNCPlainDistanceProjectionFinder : GNCBase <GNCProjectionFinder>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (GNCOnRouteProjectorProjectedLocation * _Nullable)findBestProjectionRoute:(GNCRoute *)route location:(GNCLocation *)location options:(GNCProjectionFinderOptions * _Nullable)options error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("findBestProjection(route:location:options:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProjectionFinderOptions")))
@interface GNCProjectionFinderOptions : GNCBase
- (instancetype)initWithStartIndex:(int32_t)startIndex maxSearchDistance:(GNCLength * _Nullable)maxSearchDistance __attribute__((swift_name("init(startIndex:maxSearchDistance:)"))) __attribute__((objc_designated_initializer));
- (GNCProjectionFinderOptions *)doCopyStartIndex:(int32_t)startIndex maxSearchDistance:(GNCLength * _Nullable)maxSearchDistance __attribute__((swift_name("doCopy(startIndex:maxSearchDistance:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCLength * _Nullable maxSearchDistance __attribute__((swift_name("maxSearchDistance")));
@property (readonly) int32_t startIndex __attribute__((swift_name("startIndex")));
@end

__attribute__((swift_name("OnRoutePredictor")))
@protocol GNCOnRoutePredictor
@required
- (GNCLocation * _Nullable)predictOptions:(GNCOnRoutePredictorOptions *)options __attribute__((swift_name("predict(options:)")));
@property id<GNCOnRoutePredictorOnRoutePredictionListener> _Nullable onRoutePredictionListener __attribute__((swift_name("onRoutePredictionListener")));
@end

__attribute__((swift_name("OnRoutePredictorOnRoutePredictionListener")))
@protocol GNCOnRoutePredictorOnRoutePredictionListener
@required
- (void)onNewPredictionLocation:(GNCLocation *)location __attribute__((swift_name("onNewPrediction(location:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OnRoutePredictorOptions")))
@interface GNCOnRoutePredictorOptions : GNCFreezable
- (instancetype)initWithStopAtNextManeuver:(BOOL)stopAtNextManeuver predictionTimestamp:(int64_t)predictionTimestamp minPredictionDistance:(GNCLength *)minPredictionDistance __attribute__((swift_name("init(stopAtNextManeuver:predictionTimestamp:minPredictionDistance:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCOnRoutePredictorOptions *)doCopyStopAtNextManeuver:(BOOL)stopAtNextManeuver predictionTimestamp:(int64_t)predictionTimestamp minPredictionDistance:(GNCLength *)minPredictionDistance __attribute__((swift_name("doCopy(stopAtNextManeuver:predictionTimestamp:minPredictionDistance:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCLength *minPredictionDistance __attribute__((swift_name("minPredictionDistance")));
@property (readonly) int64_t predictionTimestamp __attribute__((swift_name("predictionTimestamp")));
@property (readonly) BOOL stopAtNextManeuver __attribute__((swift_name("stopAtNextManeuver")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OnRoutePredictorPredictedLocation")))
@interface GNCOnRoutePredictorPredictedLocation : GNCOnRouteProjectorProjectedLocation
- (instancetype)initWithProvider:(NSString *)provider timestamp:(int64_t)timestamp latLng:(GNCLatLng *)latLng altitude:(GNCLength * _Nullable)altitude heading:(GNCDouble * _Nullable)heading speed:(GNCSpeed * _Nullable)speed accuracy:(GNCLength * _Nullable)accuracy level:(GNCInt * _Nullable)level originalLocation:(GNCLocation *)originalLocation route:(GNCRoute *)route segment:(GNCRouteSegment *)segment distanceToSegment:(GNCLength *)distanceToSegment __attribute__((swift_name("init(provider:timestamp:latLng:altitude:heading:speed:accuracy:level:originalLocation:route:segment:distanceToSegment:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithProjectedProbe:(GNCOnRouteProjectorProjectedLocation *)projectedProbe predictedDistance:(GNCLength *)predictedDistance __attribute__((swift_name("init(projectedProbe:predictedDistance:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithLocation:(GNCLocation *)location route:(GNCRoute *)route segment:(GNCRouteSegment *)segment distanceToSegment:(GNCLength *)distanceToSegment __attribute__((swift_name("init(location:route:segment:distanceToSegment:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithProjectedProbe:(GNCOnRouteProjectorProjectedLocation *)projectedProbe __attribute__((swift_name("init(projectedProbe:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) GNCLength *predictedDistance __attribute__((swift_name("predictedDistance")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SpeedBasedOnRoutePredictor")))
@interface GNCSpeedBasedOnRoutePredictor : GNCBase <GNCOnRoutePredictor>
- (instancetype)initWithOnRouteProjector:(id<GNCOnRouteProjector>)onRouteProjector onRouteShifter:(id<GNCOnRouteShifter>)onRouteShifter speedTracker:(id<GNCSpeedTracker>)speedTracker requiredSpeedForPrediction:(GNCSpeed *)requiredSpeedForPrediction timeProvider:(id<GNCTimeProvider>)timeProvider __attribute__((swift_name("init(onRouteProjector:onRouteShifter:speedTracker:requiredSpeedForPrediction:timeProvider:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCSpeedBasedOnRoutePredictorCompanion *companion __attribute__((swift_name("companion")));
- (GNCLocation * _Nullable)predictOptions:(GNCOnRoutePredictorOptions *)options __attribute__((swift_name("predict(options:)")));
@property id<GNCOnRoutePredictorOnRoutePredictionListener> _Nullable onRoutePredictionListener __attribute__((swift_name("onRoutePredictionListener")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SpeedBasedOnRoutePredictor.Companion")))
@interface GNCSpeedBasedOnRoutePredictorCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCSpeedBasedOnRoutePredictorCompanion *shared __attribute__((swift_name("shared")));
@end

__attribute__((swift_name("OnRouteShifter")))
@protocol GNCOnRouteShifter
@required
- (GNCOnRouteShifterShiftedLocation *)shiftProjection:(GNCOnRouteProjectorProjectedLocation *)projection shiftParameters:(GNCOnRouteShifterShiftParameters *)shiftParameters __attribute__((swift_name("shift(projection:shiftParameters:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OnRouteShifterShiftParameters")))
@interface GNCOnRouteShifterShiftParameters : GNCFreezable
- (instancetype)initWithDistance:(GNCLength *)distance endIndex:(GNCInt * _Nullable)endIndex __attribute__((swift_name("init(distance:endIndex:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCOnRouteShifterShiftParameters *)doCopyDistance:(GNCLength *)distance endIndex:(GNCInt * _Nullable)endIndex __attribute__((swift_name("doCopy(distance:endIndex:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCLength *distance __attribute__((swift_name("distance")));
@property (readonly) GNCInt * _Nullable endIndex __attribute__((swift_name("endIndex")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OnRouteShifterShiftedLocation")))
@interface GNCOnRouteShifterShiftedLocation : GNCLocation
- (instancetype)initWithLocation:(GNCLocation *)location segment:(GNCRouteSegment *)segment __attribute__((swift_name("init(location:segment:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithLocation:(GNCLocation *)location __attribute__((swift_name("init(location:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithProvider:(NSString *)provider timestamp:(int64_t)timestamp latLng:(GNCLatLng *)latLng altitude:(GNCLength * _Nullable)altitude heading:(GNCDouble * _Nullable)heading speed:(GNCSpeed * _Nullable)speed accuracy:(GNCLength * _Nullable)accuracy level:(GNCInt * _Nullable)level __attribute__((swift_name("init(provider:timestamp:latLng:altitude:heading:speed:accuracy:level:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) GNCRouteSegment *segment __attribute__((swift_name("segment")));
@end

__attribute__((swift_name("NavigationStateRepository")))
@protocol GNCNavigationStateRepository
@required
- (void)addOnNavigationStateInitializedListenerOnNavigationStateInitializedListener:(id<GNCOnNavigationStateInitializedListener>)onNavigationStateInitializedListener __attribute__((swift_name("addOnNavigationStateInitializedListener(onNavigationStateInitializedListener:)")));
- (void)addOnNavigationStateUpdatedListenerOnNavigationStateUpdatedListener:(id<GNCOnNavigationStateUpdatedListener>)onNavigationStateUpdatedListener __attribute__((swift_name("addOnNavigationStateUpdatedListener(onNavigationStateUpdatedListener:)")));
- (void)clear __attribute__((swift_name("clear()")));
- (void)createSessionId:(NSString *)sessionId routable:(id<GNCRoutable>)routable vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig __attribute__((swift_name("create(sessionId:routable:vehicleConfig:)")));
- (void)removeOnNavigationStateInitializedListenerOnNavigationStateInitializedListener:(id<GNCOnNavigationStateInitializedListener>)onNavigationStateInitializedListener __attribute__((swift_name("removeOnNavigationStateInitializedListener(onNavigationStateInitializedListener:)")));
- (void)removeOnNavigationStateUpdatedListenerOnNavigationStateUpdatedListener:(id<GNCOnNavigationStateUpdatedListener>)onNavigationStateUpdatedListener __attribute__((swift_name("removeOnNavigationStateUpdatedListener(onNavigationStateUpdatedListener:)")));

/**
 * @note This method converts instances of IllegalStateException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (GNCNavigationState * _Nullable)updateRouteProgress:(GNCRouteProgressTrackerRouteProgress *)routeProgress error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("update(routeProgress:)")));
@property (readonly) GNCNavigationState * _Nullable navigationState __attribute__((swift_name("navigationState")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultNavigationStateRepository")))
@interface GNCDefaultNavigationStateRepository : GNCBase <GNCNavigationStateRepository>
- (instancetype)initWithSpeedTracker:(id<GNCSpeedTracker>)speedTracker onRouteTracker:(id<GNCOnRouteTracker>)onRouteTracker destinationReachedValidator:(id<GNCValidator>)destinationReachedValidator leavingDestinationValidator:(id<GNCValidator>)leavingDestinationValidator __attribute__((swift_name("init(speedTracker:onRouteTracker:destinationReachedValidator:leavingDestinationValidator:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCDefaultNavigationStateRepositoryCompanion *companion __attribute__((swift_name("companion")));
- (void)addOnNavigationStateInitializedListenerOnNavigationStateInitializedListener:(id<GNCOnNavigationStateInitializedListener>)onNavigationStateInitializedListener __attribute__((swift_name("addOnNavigationStateInitializedListener(onNavigationStateInitializedListener:)")));
- (void)addOnNavigationStateUpdatedListenerOnNavigationStateUpdatedListener:(id<GNCOnNavigationStateUpdatedListener>)onNavigationStateUpdatedListener __attribute__((swift_name("addOnNavigationStateUpdatedListener(onNavigationStateUpdatedListener:)")));
- (void)clear __attribute__((swift_name("clear()")));
- (void)createSessionId:(NSString *)sessionId routable:(id<GNCRoutable>)routable vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig __attribute__((swift_name("create(sessionId:routable:vehicleConfig:)")));
- (void)removeOnNavigationStateInitializedListenerOnNavigationStateInitializedListener:(id<GNCOnNavigationStateInitializedListener>)onNavigationStateInitializedListener __attribute__((swift_name("removeOnNavigationStateInitializedListener(onNavigationStateInitializedListener:)")));
- (void)removeOnNavigationStateUpdatedListenerOnNavigationStateUpdatedListener:(id<GNCOnNavigationStateUpdatedListener>)onNavigationStateUpdatedListener __attribute__((swift_name("removeOnNavigationStateUpdatedListener(onNavigationStateUpdatedListener:)")));

/**
 * @note This method converts instances of IllegalStateException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (GNCNavigationState * _Nullable)updateRouteProgress:(GNCRouteProgressTrackerRouteProgress *)routeProgress error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("update(routeProgress:)")));
@property GNCNavigationState * _Nullable navigationState __attribute__((swift_name("navigationState")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultNavigationStateRepository.Companion")))
@interface GNCDefaultNavigationStateRepositoryCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCDefaultNavigationStateRepositoryCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) double MIN_TRACKING_SPEED_KMH __attribute__((swift_name("MIN_TRACKING_SPEED_KMH")));
@property (readonly) int64_t MIN_TRAVEL_DURATION_DESTINATION_REACHED_SEC __attribute__((swift_name("MIN_TRAVEL_DURATION_DESTINATION_REACHED_SEC")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NavigationState")))
@interface GNCNavigationState : GNCFreezable
- (instancetype)initWithSessionId:(NSString *)sessionId destination:(id<GNCRoutable>)destination startTime:(int64_t)startTime vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig firstRoute:(BOOL)firstRoute onRoute:(BOOL)onRoute speed:(GNCSpeed * _Nullable)speed traveledDuration:(GNCDuration *)traveledDuration routeProgress:(GNCRouteProgressTrackerRouteProgress * _Nullable)routeProgress destinationReached:(BOOL)destinationReached trackingSpeedReached:(BOOL)trackingSpeedReached __attribute__((swift_name("init(sessionId:destination:startTime:vehicleConfig:firstRoute:onRoute:speed:traveledDuration:routeProgress:destinationReached:trackingSpeedReached:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCNavigationState *)doCopySessionId:(NSString *)sessionId destination:(id<GNCRoutable>)destination startTime:(int64_t)startTime vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig firstRoute:(BOOL)firstRoute onRoute:(BOOL)onRoute speed:(GNCSpeed * _Nullable)speed traveledDuration:(GNCDuration *)traveledDuration routeProgress:(GNCRouteProgressTrackerRouteProgress * _Nullable)routeProgress destinationReached:(BOOL)destinationReached trackingSpeedReached:(BOOL)trackingSpeedReached __attribute__((swift_name("doCopy(sessionId:destination:startTime:vehicleConfig:firstRoute:onRoute:speed:traveledDuration:routeProgress:destinationReached:trackingSpeedReached:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<GNCRoutable> destination __attribute__((swift_name("destination")));
@property (readonly) BOOL destinationReached __attribute__((swift_name("destinationReached")));
@property (readonly) BOOL firstRoute __attribute__((swift_name("firstRoute")));
@property (readonly) BOOL initialized __attribute__((swift_name("initialized")));
@property (readonly) BOOL onRoute __attribute__((swift_name("onRoute")));
@property (readonly) GNCRoute * _Nullable route __attribute__((swift_name("route")));
@property (readonly) GNCRouteProgressTrackerRouteProgress * _Nullable routeProgress __attribute__((swift_name("routeProgress")));
@property (readonly) NSString *sessionId __attribute__((swift_name("sessionId")));
@property (readonly) GNCSpeed * _Nullable speed __attribute__((swift_name("speed")));
@property (readonly) int64_t startTime __attribute__((swift_name("startTime")));
@property (readonly) BOOL trackingSpeedReached __attribute__((swift_name("trackingSpeedReached")));
@property (readonly) GNCLength *traveledDistance __attribute__((swift_name("traveledDistance")));
@property (readonly) GNCDuration *traveledDuration __attribute__((swift_name("traveledDuration")));
@property (readonly) id<GNCVehicleConfig> vehicleConfig __attribute__((swift_name("vehicleConfig")));
@end

__attribute__((swift_name("OnNavigationStateInitializedListener")))
@protocol GNCOnNavigationStateInitializedListener
@required
- (void)onNavigationStateInitializedNavigationState:(GNCNavigationState *)navigationState __attribute__((swift_name("onNavigationStateInitialized(navigationState:)")));
@end

__attribute__((swift_name("SessionClient")))
@protocol GNCSessionClient
@required
- (void)stopSessionSessionId:(NSString *)sessionId callback:(id<GNCSessionClientCallback> _Nullable)callback __attribute__((swift_name("stopSession(sessionId:callback:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KtorSessionClient")))
@interface GNCKtorSessionClient : GNCBase <GNCSessionClient>
- (instancetype)initWithHttpClient:(GNCHttpClient *)httpClient __attribute__((swift_name("init(httpClient:)"))) __attribute__((objc_designated_initializer));
- (void)stopSessionSessionId:(NSString *)sessionId callback:(id<GNCSessionClientCallback> _Nullable)callback __attribute__((swift_name("stopSession(sessionId:callback:)")));
@end

__attribute__((swift_name("SessionClientCallback")))
@protocol GNCSessionClientCallback
@required
- (void)onFailedE:(GNCKotlinException *)e __attribute__((swift_name("onFailed(e:)")));
- (void)onSuccess __attribute__((swift_name("onSuccess()")));
@end

__attribute__((swift_name("SessionIdGenerator")))
@protocol GNCSessionIdGenerator
@required
- (NSString *)generate __attribute__((swift_name("generate()")));
@end

__attribute__((swift_name("SessionRepository")))
@protocol GNCSessionRepository
@required
- (NSString *)startSessionSessionId:(NSString * _Nullable)sessionId __attribute__((swift_name("startSession(sessionId:)")));
- (void)stopSession __attribute__((swift_name("stopSession()")));
@property (readonly) NSString * _Nullable sessionId __attribute__((swift_name("sessionId")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SimpleSessionRepository")))
@interface GNCSimpleSessionRepository : GNCBase <GNCSessionRepository>
- (instancetype)initWithSessionIdGenerator:(id<GNCSessionIdGenerator>)sessionIdGenerator sessionClient:(id<GNCSessionClient>)sessionClient __attribute__((swift_name("init(sessionIdGenerator:sessionClient:)"))) __attribute__((objc_designated_initializer));
- (NSString *)startSessionSessionId:(NSString * _Nullable)sessionId __attribute__((swift_name("startSession(sessionId:)")));
- (void)stopSession __attribute__((swift_name("stopSession()")));
@property (readonly) NSString * _Nullable sessionId __attribute__((swift_name("sessionId")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UUIDSessionIdGenerator")))
@interface GNCUUIDSessionIdGenerator : GNCBase <GNCSessionIdGenerator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString *)generate __attribute__((swift_name("generate()")));
@end

__attribute__((swift_name("NavigationEventHandler")))
@protocol GNCNavigationEventHandler
@required
- (void)addOnDestinationChangedListenerOnDestinationChangedListener:(id<GNCNavigationEventHandlerOnDestinationChangedListener>)onDestinationChangedListener __attribute__((swift_name("addOnDestinationChangedListener(onDestinationChangedListener:)")));
- (void)addOnDestinationReachedListenerOnDestinationReachedListener:(id<GNCNavigationEventHandlerOnDestinationReachedListener>)onDestinationReachedListener __attribute__((swift_name("addOnDestinationReachedListener(onDestinationReachedListener:)")));
- (void)addOnInitialRouteReceivedListenerOnInitialRouteReceivedListener:(id<GNCNavigationEventHandlerOnInitialRouteReceivedListener>)onInitialRouteReceivedListener __attribute__((swift_name("addOnInitialRouteReceivedListener(onInitialRouteReceivedListener:)")));
- (void)addOnLeavingDestinationListenerOnLeavingDestinationListener:(id<GNCNavigationEventHandlerOnLeavingDestinationListener>)onLeavingDestinationListener __attribute__((swift_name("addOnLeavingDestinationListener(onLeavingDestinationListener:)")));
- (void)addOnNavigationStartedListenerOnNavigationStartedListener:(id<GNCNavigationEventHandlerOnNavigationStartedListener>)onNavigationStartedListener __attribute__((swift_name("addOnNavigationStartedListener(onNavigationStartedListener:)")));
- (void)addOnNavigationStoppedListenerOnNavigationStoppedListener:(id<GNCNavigationEventHandlerOnNavigationStoppedListener>)onNavigationStoppedListener __attribute__((swift_name("addOnNavigationStoppedListener(onNavigationStoppedListener:)")));
- (void)addOnOffRouteListenerOffRouteListener:(id<GNCNavigationEventHandlerOnOffRouteListener>)offRouteListener __attribute__((swift_name("addOnOffRouteListener(offRouteListener:)")));
- (void)addOnRouteRequestFailedListenerOnRouteRequestFailedListener:(id<GNCNavigationEventHandlerOnRouteRequestFailedListener>)onRouteRequestFailedListener __attribute__((swift_name("addOnRouteRequestFailedListener(onRouteRequestFailedListener:)")));
- (void)addOnRouteUpdateListenerOnRouteUpdateListener:(id<GNCNavigationEventHandlerOnRouteUpdateListener>)onRouteUpdateListener __attribute__((swift_name("addOnRouteUpdateListener(onRouteUpdateListener:)")));
- (void)addOnTrackingSpeedReachedListenerOnTrackingSpeedReachedListener:(id<GNCNavigationEventHandlerOnTrackingSpeedReachedListener>)onTrackingSpeedReachedListener __attribute__((swift_name("addOnTrackingSpeedReachedListener(onTrackingSpeedReachedListener:)")));
- (void)removeOnDestinationChangedListenerOnDestinationChangedListener:(id<GNCNavigationEventHandlerOnDestinationChangedListener>)onDestinationChangedListener __attribute__((swift_name("removeOnDestinationChangedListener(onDestinationChangedListener:)")));
- (void)removeOnDestinationReachedListenerOnDestinationReachedListener:(id<GNCNavigationEventHandlerOnDestinationReachedListener>)onDestinationReachedListener __attribute__((swift_name("removeOnDestinationReachedListener(onDestinationReachedListener:)")));
- (void)removeOnInitialRouteReceivedListenerOnInitialRouteReceivedListener:(id<GNCNavigationEventHandlerOnInitialRouteReceivedListener>)onInitialRouteReceivedListener __attribute__((swift_name("removeOnInitialRouteReceivedListener(onInitialRouteReceivedListener:)")));
- (void)removeOnLeavingDestinationListenerOnLeavingDestinationListener:(id<GNCNavigationEventHandlerOnLeavingDestinationListener>)onLeavingDestinationListener __attribute__((swift_name("removeOnLeavingDestinationListener(onLeavingDestinationListener:)")));
- (void)removeOnNavigationStartedListenerOnNavigationStartedListener:(id<GNCNavigationEventHandlerOnNavigationStartedListener>)onNavigationStartedListener __attribute__((swift_name("removeOnNavigationStartedListener(onNavigationStartedListener:)")));
- (void)removeOnNavigationStoppedListenerOnNavigationStoppedListener:(id<GNCNavigationEventHandlerOnNavigationStoppedListener>)onNavigationStoppedListener __attribute__((swift_name("removeOnNavigationStoppedListener(onNavigationStoppedListener:)")));
- (void)removeOnOffRouteListenerOffRouteListener:(id<GNCNavigationEventHandlerOnOffRouteListener>)offRouteListener __attribute__((swift_name("removeOnOffRouteListener(offRouteListener:)")));
- (void)removeOnRouteRequestFailedListenerOnRouteRequestFailedListener:(id<GNCNavigationEventHandlerOnRouteRequestFailedListener>)onRouteRequestFailedListener __attribute__((swift_name("removeOnRouteRequestFailedListener(onRouteRequestFailedListener:)")));
- (void)removeOnRouteUpdateListenerOnRouteUpdateListener:(id<GNCNavigationEventHandlerOnRouteUpdateListener>)onRouteUpdateListener __attribute__((swift_name("removeOnRouteUpdateListener(onRouteUpdateListener:)")));
- (void)removeOnTrackingSpeedReachedListenerOnTrackingSpeedReachedListener:(id<GNCNavigationEventHandlerOnTrackingSpeedReachedListener>)onTrackingSpeedReachedListener __attribute__((swift_name("removeOnTrackingSpeedReachedListener(onTrackingSpeedReachedListener:)")));
@end

__attribute__((swift_name("NavigationEventHandlerOnDestinationChangedListener")))
@protocol GNCNavigationEventHandlerOnDestinationChangedListener
@required
- (void)onDestinationChangedRoutable:(id<GNCRoutable> _Nullable)routable __attribute__((swift_name("onDestinationChanged(routable:)")));
@end

__attribute__((swift_name("NavigationEventHandlerOnDestinationReachedListener")))
@protocol GNCNavigationEventHandlerOnDestinationReachedListener
@required
- (void)onDestinationReachedNavigationResult:(GNCNavigationResult *)navigationResult __attribute__((swift_name("onDestinationReached(navigationResult:)")));
@end

__attribute__((swift_name("NavigationEventHandlerOnLeavingDestinationListener")))
@protocol GNCNavigationEventHandlerOnLeavingDestinationListener
@required
- (void)onLeavingDestinationRoutable:(id<GNCRoutable>)routable __attribute__((swift_name("onLeavingDestination(routable:)")));
@end

__attribute__((swift_name("NavigationEventHandlerOnNavigationStartedListener")))
@protocol GNCNavigationEventHandlerOnNavigationStartedListener
@required
- (void)onNavigationStartedRoutable:(id<GNCRoutable>)routable __attribute__((swift_name("onNavigationStarted(routable:)")));
@end

__attribute__((swift_name("NavigationEventHandlerOnNavigationStoppedListener")))
@protocol GNCNavigationEventHandlerOnNavigationStoppedListener
@required
- (void)onNavigationStopped __attribute__((swift_name("onNavigationStopped()")));
@end

__attribute__((swift_name("NavigationEventHandlerOnOffRouteListener")))
@protocol GNCNavigationEventHandlerOnOffRouteListener
@required
- (void)onOffRouteDetected __attribute__((swift_name("onOffRouteDetected()")));
- (void)onOffRouteVerified __attribute__((swift_name("onOffRouteVerified()")));
@end

__attribute__((swift_name("NavigationEventHandlerOnRouteRequestFailedListener")))
@protocol GNCNavigationEventHandlerOnRouteRequestFailedListener
@required
- (void)onRouteRequestFailedE:(GNCKotlinException *)e __attribute__((swift_name("onRouteRequestFailed(e:)")));
@end

__attribute__((swift_name("NavigationEventHandlerOnRouteUpdateListener")))
@protocol GNCNavigationEventHandlerOnRouteUpdateListener
@required
- (void)onRouteUpdatedRoute:(GNCRoute *)route __attribute__((swift_name("onRouteUpdated(route:)")));
@end

__attribute__((swift_name("NavigationEventHandlerOnTrackingSpeedReachedListener")))
@protocol GNCNavigationEventHandlerOnTrackingSpeedReachedListener
@required
- (void)onTrackingSpeedReachedSpeed:(GNCSpeed *)speed __attribute__((swift_name("onTrackingSpeedReached(speed:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NavigationResult")))
@interface GNCNavigationResult : GNCBase
- (instancetype)initWithDistanceDriven:(GNCLength *)distanceDriven duration:(GNCDuration *)duration destination:(id<GNCRoutable>)destination __attribute__((swift_name("init(distanceDriven:duration:destination:)"))) __attribute__((objc_designated_initializer));
- (GNCNavigationResult *)doCopyDistanceDriven:(GNCLength *)distanceDriven duration:(GNCDuration *)duration destination:(id<GNCRoutable>)destination __attribute__((swift_name("doCopy(distanceDriven:duration:destination:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<GNCRoutable> destination __attribute__((swift_name("destination")));
@property (readonly) GNCLength *distanceDriven __attribute__((swift_name("distanceDriven")));
@property (readonly) GNCDuration *duration __attribute__((swift_name("duration")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SimpleNavigationEventHandler")))
@interface GNCSimpleNavigationEventHandler : GNCBase <GNCNavigationEventHandler>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)addOnDestinationChangedListenerOnDestinationChangedListener:(id<GNCNavigationEventHandlerOnDestinationChangedListener>)onDestinationChangedListener __attribute__((swift_name("addOnDestinationChangedListener(onDestinationChangedListener:)")));
- (void)addOnDestinationReachedListenerOnDestinationReachedListener:(id<GNCNavigationEventHandlerOnDestinationReachedListener>)onDestinationReachedListener __attribute__((swift_name("addOnDestinationReachedListener(onDestinationReachedListener:)")));
- (void)addOnInitialRouteReceivedListenerOnInitialRouteReceivedListener:(id<GNCNavigationEventHandlerOnInitialRouteReceivedListener>)onInitialRouteReceivedListener __attribute__((swift_name("addOnInitialRouteReceivedListener(onInitialRouteReceivedListener:)")));
- (void)addOnLeavingDestinationListenerOnLeavingDestinationListener:(id<GNCNavigationEventHandlerOnLeavingDestinationListener>)onLeavingDestinationListener __attribute__((swift_name("addOnLeavingDestinationListener(onLeavingDestinationListener:)")));
- (void)addOnNavigationStartedListenerOnNavigationStartedListener:(id<GNCNavigationEventHandlerOnNavigationStartedListener>)onNavigationStartedListener __attribute__((swift_name("addOnNavigationStartedListener(onNavigationStartedListener:)")));
- (void)addOnNavigationStoppedListenerOnNavigationStoppedListener:(id<GNCNavigationEventHandlerOnNavigationStoppedListener>)onNavigationStoppedListener __attribute__((swift_name("addOnNavigationStoppedListener(onNavigationStoppedListener:)")));
- (void)addOnOffRouteListenerOffRouteListener:(id<GNCNavigationEventHandlerOnOffRouteListener>)offRouteListener __attribute__((swift_name("addOnOffRouteListener(offRouteListener:)")));
- (void)addOnRouteRequestFailedListenerOnRouteRequestFailedListener:(id<GNCNavigationEventHandlerOnRouteRequestFailedListener>)onRouteRequestFailedListener __attribute__((swift_name("addOnRouteRequestFailedListener(onRouteRequestFailedListener:)")));
- (void)addOnRouteUpdateListenerOnRouteUpdateListener:(id<GNCNavigationEventHandlerOnRouteUpdateListener>)onRouteUpdateListener __attribute__((swift_name("addOnRouteUpdateListener(onRouteUpdateListener:)")));
- (void)addOnTrackingSpeedReachedListenerOnTrackingSpeedReachedListener:(id<GNCNavigationEventHandlerOnTrackingSpeedReachedListener>)onTrackingSpeedReachedListener __attribute__((swift_name("addOnTrackingSpeedReachedListener(onTrackingSpeedReachedListener:)")));
- (void)removeOnDestinationChangedListenerOnDestinationChangedListener:(id<GNCNavigationEventHandlerOnDestinationChangedListener>)onDestinationChangedListener __attribute__((swift_name("removeOnDestinationChangedListener(onDestinationChangedListener:)")));
- (void)removeOnDestinationReachedListenerOnDestinationReachedListener:(id<GNCNavigationEventHandlerOnDestinationReachedListener>)onDestinationReachedListener __attribute__((swift_name("removeOnDestinationReachedListener(onDestinationReachedListener:)")));
- (void)removeOnInitialRouteReceivedListenerOnInitialRouteReceivedListener:(id<GNCNavigationEventHandlerOnInitialRouteReceivedListener>)onInitialRouteReceivedListener __attribute__((swift_name("removeOnInitialRouteReceivedListener(onInitialRouteReceivedListener:)")));
- (void)removeOnLeavingDestinationListenerOnLeavingDestinationListener:(id<GNCNavigationEventHandlerOnLeavingDestinationListener>)onLeavingDestinationListener __attribute__((swift_name("removeOnLeavingDestinationListener(onLeavingDestinationListener:)")));
- (void)removeOnNavigationStartedListenerOnNavigationStartedListener:(id<GNCNavigationEventHandlerOnNavigationStartedListener>)onNavigationStartedListener __attribute__((swift_name("removeOnNavigationStartedListener(onNavigationStartedListener:)")));
- (void)removeOnNavigationStoppedListenerOnNavigationStoppedListener:(id<GNCNavigationEventHandlerOnNavigationStoppedListener>)onNavigationStoppedListener __attribute__((swift_name("removeOnNavigationStoppedListener(onNavigationStoppedListener:)")));
- (void)removeOnOffRouteListenerOffRouteListener:(id<GNCNavigationEventHandlerOnOffRouteListener>)offRouteListener __attribute__((swift_name("removeOnOffRouteListener(offRouteListener:)")));
- (void)removeOnRouteRequestFailedListenerOnRouteRequestFailedListener:(id<GNCNavigationEventHandlerOnRouteRequestFailedListener>)onRouteRequestFailedListener __attribute__((swift_name("removeOnRouteRequestFailedListener(onRouteRequestFailedListener:)")));
- (void)removeOnRouteUpdateListenerOnRouteUpdateListener:(id<GNCNavigationEventHandlerOnRouteUpdateListener>)onRouteUpdateListener __attribute__((swift_name("removeOnRouteUpdateListener(onRouteUpdateListener:)")));
- (void)removeOnTrackingSpeedReachedListenerOnTrackingSpeedReachedListener:(id<GNCNavigationEventHandlerOnTrackingSpeedReachedListener>)onTrackingSpeedReachedListener __attribute__((swift_name("removeOnTrackingSpeedReachedListener(onTrackingSpeedReachedListener:)")));
@property (readonly) GNCMutableSet<id<GNCNavigationEventHandlerOnDestinationChangedListener>> *onDestinationChangedListeners __attribute__((swift_name("onDestinationChangedListeners")));
@property (readonly) GNCMutableSet<id<GNCNavigationEventHandlerOnDestinationReachedListener>> *onDestinationReachedListeners __attribute__((swift_name("onDestinationReachedListeners")));
@property (readonly) GNCMutableSet<id<GNCNavigationEventHandlerOnInitialRouteReceivedListener>> *onInitialRouteReceivedListeners __attribute__((swift_name("onInitialRouteReceivedListeners")));
@property (readonly) GNCMutableSet<id<GNCNavigationEventHandlerOnLeavingDestinationListener>> *onLeavingDestinationListeners __attribute__((swift_name("onLeavingDestinationListeners")));
@property (readonly) GNCMutableSet<id<GNCNavigationEventHandlerOnNavigationStartedListener>> *onNavigationStartedListeners __attribute__((swift_name("onNavigationStartedListeners")));
@property (readonly) GNCMutableSet<id<GNCNavigationEventHandlerOnNavigationStoppedListener>> *onNavigationStoppedListeners __attribute__((swift_name("onNavigationStoppedListeners")));
@property (readonly) GNCMutableSet<id<GNCNavigationEventHandlerOnOffRouteListener>> *onOffRouteListeners __attribute__((swift_name("onOffRouteListeners")));
@property (readonly) GNCMutableSet<id<GNCNavigationEventHandlerOnRouteRequestFailedListener>> *onRouteRequestFailedListeners __attribute__((swift_name("onRouteRequestFailedListeners")));
@property (readonly) GNCMutableSet<id<GNCNavigationEventHandlerOnRouteUpdateListener>> *onRouteUpdateListeners __attribute__((swift_name("onRouteUpdateListeners")));
@property (readonly) GNCMutableSet<id<GNCNavigationEventHandlerOnTrackingSpeedReachedListener>> *onTrackingSpeedReachedListeners __attribute__((swift_name("onTrackingSpeedReachedListeners")));
@end

__attribute__((swift_name("DestinationRepository")))
@protocol GNCDestinationRepository
@required
- (void)addOnDestinationChangedListenerOnDestinationChangedListener_:(id<GNCDestinationRepositoryOnDestinationChangedListener>)onDestinationChangedListener __attribute__((swift_name("addOnDestinationChangedListener(onDestinationChangedListener_:)")));
- (void)removeOnDestinationChangedListenerOnDestinationChangedListener_:(id<GNCDestinationRepositoryOnDestinationChangedListener>)onDestinationChangedListener __attribute__((swift_name("removeOnDestinationChangedListener(onDestinationChangedListener_:)")));
@property id<GNCRoutable> _Nullable destination __attribute__((swift_name("destination")));
@end

__attribute__((swift_name("DestinationRepositoryOnDestinationChangedListener")))
@protocol GNCDestinationRepositoryOnDestinationChangedListener
@required
- (void)onDestinationChangedDestination:(id<GNCRoutable> _Nullable)destination __attribute__((swift_name("onDestinationChanged(destination:)")));
@end

__attribute__((swift_name("MultiStopRepository")))
@protocol GNCMultiStopRepository
@required
- (void)addOnStopsChangedListenerOnRemainingStopsChangedListener:(id<GNCMultiStopRepositoryOnStopsChangedListener>)onRemainingStopsChangedListener __attribute__((swift_name("addOnStopsChangedListener(onRemainingStopsChangedListener:)")));
- (void)addStopRoutable:(id<GNCRoutable>)routable __attribute__((swift_name("addStop(routable:)")));
- (void)addStopRoutable:(id<GNCRoutable>)routable index:(GNCInt * _Nullable)index __attribute__((swift_name("addStop(routable:index:)")));
- (void)changeToNextStop __attribute__((swift_name("changeToNextStop()")));
- (void)clearStops __attribute__((swift_name("clearStops()")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)moveStopFromIndex:(int32_t)fromIndex toIndex:(int32_t)toIndex error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("moveStop(fromIndex:toIndex:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)moveStopRoutable:(id<GNCRoutable>)routable toIndex:(int32_t)toIndex error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("moveStop(routable:toIndex:)")));
- (void)removeOnRemainingStopsChangedListenerOnRemainingStopsChangedListener:(id<GNCMultiStopRepositoryOnStopsChangedListener>)onRemainingStopsChangedListener __attribute__((swift_name("removeOnRemainingStopsChangedListener(onRemainingStopsChangedListener:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)removeStopIndex:(int32_t)index error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("removeStop(index:)")));
- (void)removeStopRoutable:(id<GNCRoutable>)routable __attribute__((swift_name("removeStop(routable:)")));
@property NSArray<id<GNCRoutable>> *stops __attribute__((swift_name("stops")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MultiStopDestinationRepository")))
@interface GNCMultiStopDestinationRepository : GNCBase <GNCMultiStopRepository, GNCDestinationRepository>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)addOnDestinationChangedListenerOnDestinationChangedListener_:(id<GNCDestinationRepositoryOnDestinationChangedListener>)onDestinationChangedListener __attribute__((swift_name("addOnDestinationChangedListener(onDestinationChangedListener_:)")));
- (void)addOnStopsChangedListenerOnRemainingStopsChangedListener:(id<GNCMultiStopRepositoryOnStopsChangedListener>)onRemainingStopsChangedListener __attribute__((swift_name("addOnStopsChangedListener(onRemainingStopsChangedListener:)")));
- (void)addStopRoutable:(id<GNCRoutable>)routable __attribute__((swift_name("addStop(routable:)")));
- (void)addStopRoutable:(id<GNCRoutable>)routable index:(GNCInt * _Nullable)index __attribute__((swift_name("addStop(routable:index:)")));
- (void)changeToNextStop __attribute__((swift_name("changeToNextStop()")));
- (void)clearStops __attribute__((swift_name("clearStops()")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)moveStopFromIndex:(int32_t)fromIndex toIndex:(int32_t)toIndex error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("moveStop(fromIndex:toIndex:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)moveStopRoutable:(id<GNCRoutable>)routable toIndex:(int32_t)toIndex error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("moveStop(routable:toIndex:)")));
- (void)removeOnDestinationChangedListenerOnDestinationChangedListener_:(id<GNCDestinationRepositoryOnDestinationChangedListener>)onDestinationChangedListener __attribute__((swift_name("removeOnDestinationChangedListener(onDestinationChangedListener_:)")));
- (void)removeOnRemainingStopsChangedListenerOnRemainingStopsChangedListener:(id<GNCMultiStopRepositoryOnStopsChangedListener>)onRemainingStopsChangedListener __attribute__((swift_name("removeOnRemainingStopsChangedListener(onRemainingStopsChangedListener:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (BOOL)removeStopIndex:(int32_t)index error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("removeStop(index:)")));
- (void)removeStopRoutable:(id<GNCRoutable>)routable __attribute__((swift_name("removeStop(routable:)")));
@property id<GNCRoutable> _Nullable destination __attribute__((swift_name("destination")));
@property NSArray<id<GNCRoutable>> *stops __attribute__((swift_name("stops")));
@end

__attribute__((swift_name("MultiStopRepositoryOnStopsChangedListener")))
@protocol GNCMultiStopRepositoryOnStopsChangedListener
@required
- (void)onStopsChangedStops:(NSArray<id<GNCRoutable>> *)stops __attribute__((swift_name("onStopsChanged(stops:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SingleDestinationRepository")))
@interface GNCSingleDestinationRepository : GNCBase <GNCDestinationRepository>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)addOnDestinationChangedListenerOnDestinationChangedListener_:(id<GNCDestinationRepositoryOnDestinationChangedListener>)onDestinationChangedListener __attribute__((swift_name("addOnDestinationChangedListener(onDestinationChangedListener_:)")));
- (void)removeOnDestinationChangedListenerOnDestinationChangedListener_:(id<GNCDestinationRepositoryOnDestinationChangedListener>)onDestinationChangedListener __attribute__((swift_name("removeOnDestinationChangedListener(onDestinationChangedListener_:)")));
@property id<GNCRoutable> _Nullable destination __attribute__((swift_name("destination")));
@end

__attribute__((swift_name("NavigationEngine")))
@protocol GNCNavigationEngine
@required
- (void)startNavigationStops:(NSArray<id<GNCRoutable>> *)stops vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig __attribute__((swift_name("startNavigation(stops:vehicleConfig_:)")));
- (void)startNavigationRoutable:(id<GNCRoutable> _Nullable)routable vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig __attribute__((swift_name("startNavigation(routable:vehicleConfig_:)")));
- (void)startNavigationRoute:(GNCRoute *)route sessionId:(NSString * _Nullable)sessionId vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig __attribute__((swift_name("startNavigation(route:sessionId:vehicleConfig_:)")));
- (void)stopNavigation __attribute__((swift_name("stopNavigation()")));
@end

__attribute__((swift_name("RouteRepositoryRouteUpdatedListener")))
@protocol GNCRouteRepositoryRouteUpdatedListener
@required
- (void)onRouteUpdateCanceledRouteRequest:(GNCRouteProviderRouteRequest *)routeRequest __attribute__((swift_name("onRouteUpdateCanceled(routeRequest:)")));
- (void)onRouteUpdateFailedE:(GNCKotlinException *)e __attribute__((swift_name("onRouteUpdateFailed(e:)")));
- (void)onRouteUpdateStartedRouteRequest:(GNCRouteProviderRouteRequest *)routeRequest __attribute__((swift_name("onRouteUpdateStarted(routeRequest:)")));
- (void)onRouteUpdatedRoute:(GNCRoute *)route __attribute__((swift_name("onRouteUpdated(route:)")));
@end

__attribute__((swift_name("RouteProgressTrackerOnRouteProgressUpdatedListener")))
@protocol GNCRouteProgressTrackerOnRouteProgressUpdatedListener
@required
- (void)onRouteProgressUpdatedRouteProgress:(GNCRouteProgressTrackerRouteProgress *)routeProgress __attribute__((swift_name("onRouteProgressUpdated(routeProgress:)")));
@end

__attribute__((swift_name("OnRouteTrackerOnRouteStateListener")))
@protocol GNCOnRouteTrackerOnRouteStateListener
@required
- (void)onStateChangedState:(GNCOnRouteTrackerState *)state location:(GNCLocation *)location __attribute__((swift_name("onStateChanged(state:location:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SchedulingNavigationEngine")))
@interface GNCSchedulingNavigationEngine : GNCBase <GNCNavigationEngine, GNCRouteRepositoryRouteUpdatedListener, GNCRouteProgressTrackerOnRouteProgressUpdatedListener, GNCOnRouteTrackerOnRouteStateListener, GNCDestinationRepositoryOnDestinationChangedListener>
- (instancetype)initWithSimpleNavigationEventHandler:(GNCSimpleNavigationEventHandler *)simpleNavigationEventHandler routeRepository:(id<GNCRouteRepository>)routeRepository destinationRepository:(id<GNCDestinationRepository>)destinationRepository sessionRepository:(id<GNCSessionRepository>)sessionRepository routeProgressTracker:(id<GNCRouteProgressTracker>)routeProgressTracker navigationStateRepository:(id<GNCNavigationStateRepository>)navigationStateRepository onRouteTracker:(id<GNCOnRouteTracker>)onRouteTracker __attribute__((swift_name("init(simpleNavigationEventHandler:routeRepository:destinationRepository:sessionRepository:routeProgressTracker:navigationStateRepository:onRouteTracker:)"))) __attribute__((objc_designated_initializer));
- (void)onDestinationChangedDestination:(id<GNCRoutable> _Nullable)destination __attribute__((swift_name("onDestinationChanged(destination:)")));
- (void)onRouteProgressUpdatedRouteProgress:(GNCRouteProgressTrackerRouteProgress *)routeProgress __attribute__((swift_name("onRouteProgressUpdated(routeProgress:)")));
- (void)onRouteUpdateCanceledRouteRequest:(GNCRouteProviderRouteRequest *)routeRequest __attribute__((swift_name("onRouteUpdateCanceled(routeRequest:)")));
- (void)onRouteUpdateFailedE:(GNCKotlinException *)e __attribute__((swift_name("onRouteUpdateFailed(e:)")));
- (void)onRouteUpdateStartedRouteRequest:(GNCRouteProviderRouteRequest *)routeRequest __attribute__((swift_name("onRouteUpdateStarted(routeRequest:)")));
- (void)onRouteUpdatedRoute:(GNCRoute *)route __attribute__((swift_name("onRouteUpdated(route:)")));
- (void)onStateChangedState:(GNCOnRouteTrackerState *)state location:(GNCLocation *)location __attribute__((swift_name("onStateChanged(state:location:)")));
- (void)startNavigationStops:(NSArray<id<GNCRoutable>> *)stops vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig __attribute__((swift_name("startNavigation(stops:vehicleConfig_:)")));
- (void)startNavigationRoutable:(id<GNCRoutable> _Nullable)routable vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig __attribute__((swift_name("startNavigation(routable:vehicleConfig_:)")));
- (void)startNavigationRoute:(GNCRoute *)route sessionId:(NSString * _Nullable)sessionId vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig __attribute__((swift_name("startNavigation(route:sessionId:vehicleConfig_:)")));
- (void)stopNavigation __attribute__((swift_name("stopNavigation()")));
@end

__attribute__((swift_name("UpdateRateProvider")))
@protocol GNCUpdateRateProvider
@required
- (GNCDuration *)getUpdateRateRouteProgress:(GNCRouteProgressTrackerRouteProgress * _Nullable)routeProgress __attribute__((swift_name("getUpdateRate(routeProgress:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DistanceBasedUpdateRateProvider")))
@interface GNCDistanceBasedUpdateRateProvider : GNCBase <GNCUpdateRateProvider>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property (class, readonly, getter=companion) GNCDistanceBasedUpdateRateProviderCompanion *companion __attribute__((swift_name("companion")));
- (GNCDuration *)getUpdateRateRouteProgress:(GNCRouteProgressTrackerRouteProgress * _Nullable)routeProgress __attribute__((swift_name("getUpdateRate(routeProgress:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DistanceBasedUpdateRateProvider.Companion")))
@interface GNCDistanceBasedUpdateRateProviderCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCDistanceBasedUpdateRateProviderCompanion *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StaticUpdateRateProvider")))
@interface GNCStaticUpdateRateProvider : GNCBase <GNCUpdateRateProvider>
- (instancetype)initWithUpdateRate:(GNCDuration *)updateRate __attribute__((swift_name("init(updateRate:)"))) __attribute__((objc_designated_initializer));
- (GNCDuration *)getUpdateRateRouteProgress:(GNCRouteProgressTrackerRouteProgress * _Nullable)routeProgress __attribute__((swift_name("getUpdateRate(routeProgress:)")));
@end

__attribute__((swift_name("RouteProgressTracker")))
@protocol GNCRouteProgressTracker
@required
- (void)addRouteProgressListenerOnRouteProgressUpdatedListener:(id<GNCRouteProgressTrackerOnRouteProgressUpdatedListener>)onRouteProgressUpdatedListener __attribute__((swift_name("addRouteProgressListener(onRouteProgressUpdatedListener:)")));
- (GNCLength * _Nullable)getDistanceToWaypointWaypointIndex:(int32_t)waypointIndex __attribute__((swift_name("getDistanceToWaypoint(waypointIndex:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (GNCLength * _Nullable)getDistanceToWaypointWaypoint:(GNCRouteWaypoint *)waypoint error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("getDistanceToWaypoint(waypoint:)"))) __attribute__((swift_error(nonnull_error)));
- (GNCDuration * _Nullable)getDurationToWaypointWaypointIndex:(int32_t)waypointIndex __attribute__((swift_name("getDurationToWaypoint(waypointIndex:)")));
- (GNCDuration * _Nullable)getDurationToWaypointWaypoint:(GNCRouteWaypoint *)waypoint __attribute__((swift_name("getDurationToWaypoint(waypoint:)")));
- (int32_t)indexOfWaypoint:(GNCRouteWaypoint *)waypoint __attribute__((swift_name("indexOf(waypoint:)")));
- (BOOL)isWaypointReachedWaypointIndex:(int32_t)waypointIndex __attribute__((swift_name("isWaypointReached(waypointIndex:)")));
- (BOOL)isWaypointReachedWaypoint:(GNCRouteWaypoint *)waypoint __attribute__((swift_name("isWaypointReached(waypoint:)")));
- (void)removeRouteProgressListenerOnRouteProgressUpdatedListener:(id<GNCRouteProgressTrackerOnRouteProgressUpdatedListener>)onRouteProgressUpdatedListener __attribute__((swift_name("removeRouteProgressListener(onRouteProgressUpdatedListener:)")));
- (void)start __attribute__((swift_name("start()")));
- (void)stop __attribute__((swift_name("stop()")));
@property (readonly) BOOL initialized __attribute__((swift_name("initialized")));
@property (readonly) GNCRouteProgressTrackerRouteProgress * _Nullable routeProgress __attribute__((swift_name("routeProgress")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PredictionBasedRouteProgressTracker")))
@interface GNCPredictionBasedRouteProgressTracker : GNCBase <GNCRouteProgressTracker>
- (instancetype)initWithExecutor:(id<GNCExecutor>)executor timeProvider:(id<GNCTimeProvider>)timeProvider routeProgressStateUpdater:(id<GNCRouteProgressStateUpdater>)routeProgressStateUpdater onRoutePredictor:(id<GNCOnRoutePredictor>)onRoutePredictor updateRateProvider:(id<GNCUpdateRateProvider>)updateRateProvider speedTracker:(id<GNCSpeedTracker>)speedTracker maxManeuverStopSpeed:(GNCSpeed *)maxManeuverStopSpeed __attribute__((swift_name("init(executor:timeProvider:routeProgressStateUpdater:onRoutePredictor:updateRateProvider:speedTracker:maxManeuverStopSpeed:)"))) __attribute__((objc_designated_initializer));
- (void)addRouteProgressListenerOnRouteProgressUpdatedListener:(id<GNCRouteProgressTrackerOnRouteProgressUpdatedListener>)onRouteProgressUpdatedListener __attribute__((swift_name("addRouteProgressListener(onRouteProgressUpdatedListener:)")));
- (GNCLength * _Nullable)getDistanceToWaypointWaypointIndex:(int32_t)waypointIndex __attribute__((swift_name("getDistanceToWaypoint(waypointIndex:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (GNCLength * _Nullable)getDistanceToWaypointWaypoint:(GNCRouteWaypoint *)waypoint error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("getDistanceToWaypoint(waypoint:)"))) __attribute__((swift_error(nonnull_error)));
- (GNCDuration * _Nullable)getDurationToWaypointWaypointIndex:(int32_t)waypointIndex __attribute__((swift_name("getDurationToWaypoint(waypointIndex:)")));
- (GNCDuration * _Nullable)getDurationToWaypointWaypoint:(GNCRouteWaypoint *)waypoint __attribute__((swift_name("getDurationToWaypoint(waypoint:)")));
- (int32_t)indexOfWaypoint:(GNCRouteWaypoint *)waypoint __attribute__((swift_name("indexOf(waypoint:)")));
- (BOOL)isWaypointReachedWaypointIndex:(int32_t)waypointIndex __attribute__((swift_name("isWaypointReached(waypointIndex:)")));
- (BOOL)isWaypointReachedWaypoint:(GNCRouteWaypoint *)waypoint __attribute__((swift_name("isWaypointReached(waypoint:)")));
- (void)removeRouteProgressListenerOnRouteProgressUpdatedListener:(id<GNCRouteProgressTrackerOnRouteProgressUpdatedListener>)onRouteProgressUpdatedListener __attribute__((swift_name("removeRouteProgressListener(onRouteProgressUpdatedListener:)")));
- (void)start __attribute__((swift_name("start()")));
- (void)stop __attribute__((swift_name("stop()")));
@property (readonly) BOOL initialized __attribute__((swift_name("initialized")));
@property (readonly) GNCRouteProgressTrackerRouteProgress * _Nullable routeProgress __attribute__((swift_name("routeProgress")));
@end

__attribute__((swift_name("RouteProgressStateUpdater")))
@protocol GNCRouteProgressStateUpdater
@required
- (GNCRouteProgressTrackerRouteProgress *)initializeRoute:(GNCRoute *)route projectedLocation:(GNCOnRouteProjectorProjectedLocation *)projectedLocation previousRouteProgress:(GNCRouteProgressTrackerRouteProgress * _Nullable)previousRouteProgress __attribute__((swift_name("initialize(route:projectedLocation:previousRouteProgress:)")));
- (GNCRouteProgressTrackerRouteProgress *)updateRouteProgress:(GNCRouteProgressTrackerRouteProgress *)routeProgress projectedLocation:(GNCOnRouteProjectorProjectedLocation *)projectedLocation __attribute__((swift_name("update(routeProgress:projectedLocation:)")));
@end

__attribute__((swift_name("KotlinThrowable")))
@interface GNCKotlinThrowable : GNCBase
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (GNCKotlinArray<NSString *> *)getStackTrace __attribute__((swift_name("getStackTrace()")));
- (void)printStackTrace __attribute__((swift_name("printStackTrace()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCKotlinThrowable * _Nullable cause __attribute__((swift_name("cause")));
@property (readonly) NSString * _Nullable message __attribute__((swift_name("message")));
- (NSError *)asError __attribute__((swift_name("asError()")));
@end

__attribute__((swift_name("KotlinException")))
@interface GNCKotlinException : GNCKotlinThrowable
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteProgressTrackerNotYetInitializedException")))
@interface GNCRouteProgressTrackerNotYetInitializedException : GNCKotlinException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteProgressTrackerRouteProgress")))
@interface GNCRouteProgressTrackerRouteProgress : GNCFreezable
- (instancetype)initWithRoute:(GNCRoute *)route remainingWaypoints:(NSArray<GNCRouteWaypoint *> *)remainingWaypoints destination:(id<GNCRoutable>)destination remainingDistance:(GNCLength *)remainingDistance traveledDistance:(GNCLength *)traveledDistance locationOnRoute:(GNCOnRouteProjectorProjectedLocation *)locationOnRoute streetName:(NSString * _Nullable)streetName remainingManeuvers:(NSArray<GNCManeuver *> *)remainingManeuvers remainingTravelTime:(GNCDuration *)remainingTravelTime estimatedArrivalTime:(int64_t)estimatedArrivalTime speedLimit:(GNCSpeed * _Nullable)speedLimit anticipatedSpeed:(GNCSpeed * _Nullable)anticipatedSpeed distancesWaypointToDestination:(NSArray<GNCLength *> *)distancesWaypointToDestination waypointToDestinationTravelTimes:(NSArray<GNCDuration *> *)waypointToDestinationTravelTimes currentWaypoint:(GNCRouteWaypoint * _Nullable)currentWaypoint currentWaypointIndex:(int32_t)currentWaypointIndex __attribute__((swift_name("init(route:remainingWaypoints:destination:remainingDistance:traveledDistance:locationOnRoute:streetName:remainingManeuvers:remainingTravelTime:estimatedArrivalTime:speedLimit:anticipatedSpeed:distancesWaypointToDestination:waypointToDestinationTravelTimes:currentWaypoint:currentWaypointIndex:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCRouteProgressTrackerRouteProgress *)doCopyRoute:(GNCRoute *)route remainingWaypoints:(NSArray<GNCRouteWaypoint *> *)remainingWaypoints destination:(id<GNCRoutable>)destination remainingDistance:(GNCLength *)remainingDistance traveledDistance:(GNCLength *)traveledDistance locationOnRoute:(GNCOnRouteProjectorProjectedLocation *)locationOnRoute streetName:(NSString * _Nullable)streetName remainingManeuvers:(NSArray<GNCManeuver *> *)remainingManeuvers remainingTravelTime:(GNCDuration *)remainingTravelTime estimatedArrivalTime:(int64_t)estimatedArrivalTime speedLimit:(GNCSpeed * _Nullable)speedLimit anticipatedSpeed:(GNCSpeed * _Nullable)anticipatedSpeed distancesWaypointToDestination:(NSArray<GNCLength *> *)distancesWaypointToDestination waypointToDestinationTravelTimes:(NSArray<GNCDuration *> *)waypointToDestinationTravelTimes currentWaypoint:(GNCRouteWaypoint * _Nullable)currentWaypoint currentWaypointIndex:(int32_t)currentWaypointIndex __attribute__((swift_name("doCopy(route:remainingWaypoints:destination:remainingDistance:traveledDistance:locationOnRoute:streetName:remainingManeuvers:remainingTravelTime:estimatedArrivalTime:speedLimit:anticipatedSpeed:distancesWaypointToDestination:waypointToDestinationTravelTimes:currentWaypoint:currentWaypointIndex:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCSpeed * _Nullable anticipatedSpeed __attribute__((swift_name("anticipatedSpeed")));
@property (readonly) GNCRouteWaypoint * _Nullable currentWaypoint __attribute__((swift_name("currentWaypoint")));
@property (readonly) int32_t currentWaypointIndex __attribute__((swift_name("currentWaypointIndex")));
@property (readonly) id<GNCRoutable> destination __attribute__((swift_name("destination")));
@property (readonly) int64_t estimatedArrivalTime __attribute__((swift_name("estimatedArrivalTime")));
@property (readonly) BOOL initialized __attribute__((swift_name("initialized")));
@property (readonly) GNCOnRouteProjectorProjectedLocation *locationOnRoute __attribute__((swift_name("locationOnRoute")));
@property (readonly) GNCManeuver *nextManeuver __attribute__((swift_name("nextManeuver")));
@property (readonly) GNCLength *remainingDistance __attribute__((swift_name("remainingDistance")));
@property (readonly) NSArray<GNCManeuver *> *remainingManeuvers __attribute__((swift_name("remainingManeuvers")));
@property (readonly) GNCDuration *remainingTravelTime __attribute__((swift_name("remainingTravelTime")));
@property (readonly) NSArray<GNCRouteWaypoint *> *remainingWaypoints __attribute__((swift_name("remainingWaypoints")));
@property (readonly) GNCRoute *route __attribute__((swift_name("route")));
@property (readonly) GNCSpeed * _Nullable speedLimit __attribute__((swift_name("speedLimit")));
@property (readonly) NSString * _Nullable streetName __attribute__((swift_name("streetName")));
@property (readonly) GNCLength *traveledDistance __attribute__((swift_name("traveledDistance")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StatelessRouteProgressStateUpdater")))
@interface GNCStatelessRouteProgressStateUpdater : GNCBase <GNCRouteProgressStateUpdater>
- (instancetype)initWithInternetConnectionValidator:(id<GNCInternetConnectionValidator>)internetConnectionValidator __attribute__((swift_name("init(internetConnectionValidator:)"))) __attribute__((objc_designated_initializer));
- (GNCRouteProgressTrackerRouteProgress *)initializeRoute:(GNCRoute *)route projectedLocation:(GNCOnRouteProjectorProjectedLocation *)projectedLocation previousRouteProgress:(GNCRouteProgressTrackerRouteProgress * _Nullable)previousRouteProgress __attribute__((swift_name("initialize(route:projectedLocation:previousRouteProgress:)")));
- (GNCRouteProgressTrackerRouteProgress *)updateRouteProgress:(GNCRouteProgressTrackerRouteProgress *)routeProgress projectedLocation:(GNCOnRouteProjectorProjectedLocation *)projectedLocation __attribute__((swift_name("update(routeProgress:projectedLocation:)")));
@end

__attribute__((swift_name("Validator")))
@protocol GNCValidator
@required
- (BOOL)isValidRouteProgress:(GNCRouteProgressTrackerRouteProgress *)routeProgress __attribute__((swift_name("isValid(routeProgress:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InterceptingValidator")))
@interface GNCInterceptingValidator : GNCBase <GNCValidator>
- (void)addInterceptorInterceptor:(id<GNCInterceptingValidatorInterceptor>)interceptor __attribute__((swift_name("addInterceptor(interceptor:)")));
- (BOOL)isValidRouteProgress:(GNCRouteProgressTrackerRouteProgress *)routeProgress __attribute__((swift_name("isValid(routeProgress:)")));
@end

__attribute__((swift_name("InterceptingValidatorInterceptor")))
@protocol GNCInterceptingValidatorInterceptor
@required
- (GNCBoolean * _Nullable)interceptRouteProgress:(GNCRouteProgressTrackerRouteProgress *)routeProgress originalResult:(BOOL)originalResult __attribute__((swift_name("intercept(routeProgress:originalResult:)")));
@end

__attribute__((swift_name("DistanceBasedReachingDestinationValidator")))
@interface GNCDistanceBasedReachingDestinationValidator : GNCBase <GNCValidator>
- (instancetype)initWithDefaultDistance:(GNCLength *)defaultDistance __attribute__((swift_name("init(defaultDistance:)"))) __attribute__((objc_designated_initializer));
- (BOOL)isValidRouteProgress:(GNCRouteProgressTrackerRouteProgress *)routeProgress __attribute__((swift_name("isValid(routeProgress:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DistanceBasedLeavingDestinationValidator")))
@interface GNCDistanceBasedLeavingDestinationValidator : GNCBase <GNCValidator>
- (instancetype)initWithLocationRepository:(id<GNCLocationRepository>)locationRepository __attribute__((swift_name("init(locationRepository:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithLocationRepository:(id<GNCLocationRepository>)locationRepository leavingDestinationDistance:(GNCLength *)leavingDestinationDistance __attribute__((swift_name("init(locationRepository:leavingDestinationDistance:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCDistanceBasedLeavingDestinationValidatorCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)isValidRouteProgress:(GNCRouteProgressTrackerRouteProgress *)routeProgress __attribute__((swift_name("isValid(routeProgress:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DistanceBasedLeavingDestinationValidator.Companion")))
@interface GNCDistanceBasedLeavingDestinationValidatorCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCDistanceBasedLeavingDestinationValidatorCompanion *shared __attribute__((swift_name("shared")));
@end

__attribute__((swift_name("SchedulingRouteRepositoryOffRouteRequestValidator")))
@protocol GNCSchedulingRouteRepositoryOffRouteRequestValidator
@required
- (void)updateRoute:(GNCRoute *)route __attribute__((swift_name("update(route:)")));
- (BOOL)validateLocation:(GNCLocation *)location previousRouteRequestJob:(GNCRouteRequestJob * _Nullable)previousRouteRequestJob __attribute__((swift_name("validate(location:previousRouteRequestJob:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CombiningOffRouteRequestValidator")))
@interface GNCCombiningOffRouteRequestValidator : GNCBase <GNCSchedulingRouteRepositoryOffRouteRequestValidator>
- (instancetype)initWithOffRouteRequestValidators:(NSArray<id<GNCSchedulingRouteRepositoryOffRouteRequestValidator>> *)offRouteRequestValidators __attribute__((swift_name("init(offRouteRequestValidators:)"))) __attribute__((objc_designated_initializer));
- (void)updateRoute:(GNCRoute *)route __attribute__((swift_name("update(route:)")));
- (BOOL)validateLocation:(GNCLocation *)location previousRouteRequestJob:(GNCRouteRequestJob * _Nullable)previousRouteRequestJob __attribute__((swift_name("validate(location:previousRouteRequestJob:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DistanceOffRouteRequestValidator")))
@interface GNCDistanceOffRouteRequestValidator : GNCBase <GNCSchedulingRouteRepositoryOffRouteRequestValidator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMinDisplacement:(GNCLength *)minDisplacement __attribute__((swift_name("init(minDisplacement:)"))) __attribute__((objc_designated_initializer));
- (void)updateRoute:(GNCRoute *)route __attribute__((swift_name("update(route:)")));
- (BOOL)validateLocation:(GNCLocation *)location previousRouteRequestJob:(GNCRouteRequestJob * _Nullable)previousRouteRequestJob __attribute__((swift_name("validate(location:previousRouteRequestJob:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DurationOffRouteRequestValidator")))
@interface GNCDurationOffRouteRequestValidator : GNCBase <GNCSchedulingRouteRepositoryOffRouteRequestValidator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMinDuration:(GNCDuration *)minDuration __attribute__((swift_name("init(minDuration:)"))) __attribute__((objc_designated_initializer));
- (void)updateRoute:(GNCRoute *)route __attribute__((swift_name("update(route:)")));
- (BOOL)validateLocation:(GNCLocation *)location previousRouteRequestJob:(GNCRouteRequestJob * _Nullable)previousRouteRequestJob __attribute__((swift_name("validate(location:previousRouteRequestJob:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NoLocationAvailableException")))
@interface GNCNoLocationAvailableException : GNCKotlinException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((swift_name("RouteRepository")))
@protocol GNCRouteRepository
@required
- (void)addRouteUpdatedListenerRouteUpdatedListener:(id<GNCRouteRepositoryRouteUpdatedListener>)routeUpdatedListener __attribute__((swift_name("addRouteUpdatedListener(routeUpdatedListener:)")));
- (void)removeRouteUpdatedListenerRouteUpdatedListener:(id<GNCRouteRepositoryRouteUpdatedListener>)routeUpdatedListener __attribute__((swift_name("removeRouteUpdatedListener(routeUpdatedListener:)")));
- (void)reportOffRouteLocation:(GNCLocation *)location __attribute__((swift_name("reportOffRoute(location:)")));
- (void)startRoute:(GNCRoute * _Nullable)route vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig __attribute__((swift_name("start(route:vehicleConfig:)")));
- (void)stop __attribute__((swift_name("stop()")));
@property (readonly) BOOL active __attribute__((swift_name("active")));
@property (readonly) GNCRoute * _Nullable route __attribute__((swift_name("route")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteRequestJob")))
@interface GNCRouteRequestJob : GNCBase
- (instancetype)initWithRouteProvider:(id<GNCRouteProvider>)routeProvider routeRequest:(GNCRouteProviderRouteRequest *)routeRequest listener:(id<GNCRouteRequestJobListener> _Nullable)listener __attribute__((swift_name("init(routeProvider:routeRequest:listener:)"))) __attribute__((objc_designated_initializer));
- (void)cancel __attribute__((swift_name("cancel()")));
- (void)execute __attribute__((swift_name("execute()")));
@property (readonly) BOOL finished __attribute__((swift_name("finished")));
@property (readonly) GNCRouteProviderRouteRequest *routeRequest __attribute__((swift_name("routeRequest")));
@end

__attribute__((swift_name("RouteRequestJobListener")))
@protocol GNCRouteRequestJobListener
@required
- (void)onDoneRouteRequest:(GNCRouteProviderRouteRequest *)routeRequest route:(GNCRoute *)route __attribute__((swift_name("onDone(routeRequest:route:)")));
- (void)onFailedRouteRequest:(GNCRouteProviderRouteRequest *)routeRequest exception:(GNCKotlinException *)exception __attribute__((swift_name("onFailed(routeRequest:exception:)")));
- (void)onStartRouteRequest:(GNCRouteProviderRouteRequest *)routeRequest __attribute__((swift_name("onStart(routeRequest:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SchedulingRouteRepository")))
@interface GNCSchedulingRouteRepository : GNCBase <GNCRouteRepository, GNCRouteRequestJobListener, GNCLocationUpdateListener>
- (void)addRouteUpdatedListenerRouteUpdatedListener:(id<GNCRouteRepositoryRouteUpdatedListener>)routeUpdatedListener __attribute__((swift_name("addRouteUpdatedListener(routeUpdatedListener:)")));
- (void)onDoneRouteRequest:(GNCRouteProviderRouteRequest *)routeRequest route:(GNCRoute *)route __attribute__((swift_name("onDone(routeRequest:route:)")));
- (void)onFailedRouteRequest:(GNCRouteProviderRouteRequest *)routeRequest exception:(GNCKotlinException *)exception __attribute__((swift_name("onFailed(routeRequest:exception:)")));
- (void)onLocationUpdatedLocation:(GNCLocation *)location __attribute__((swift_name("onLocationUpdated(location:)")));
- (void)onStartRouteRequest:(GNCRouteProviderRouteRequest *)routeRequest __attribute__((swift_name("onStart(routeRequest:)")));
- (void)removeRouteUpdatedListenerRouteUpdatedListener:(id<GNCRouteRepositoryRouteUpdatedListener>)routeUpdatedListener __attribute__((swift_name("removeRouteUpdatedListener(routeUpdatedListener:)")));
- (void)reportOffRouteLocation:(GNCLocation *)location __attribute__((swift_name("reportOffRoute(location:)")));
- (void)startRoute:(GNCRoute * _Nullable)route vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig __attribute__((swift_name("start(route:vehicleConfig:)")));
- (void)stop __attribute__((swift_name("stop()")));
@property (readonly) BOOL active __attribute__((swift_name("active")));
@property (readonly) GNCRoute * _Nullable route __attribute__((swift_name("route")));
@end

__attribute__((swift_name("RouteProvider")))
@protocol GNCRouteProvider
@required

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (GNCRoute * _Nullable)requestRouteRouteRequest:(GNCRouteProviderRouteRequest *)routeRequest error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("requestRoute(routeRequest:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (GNCRouteData * _Nullable)requestRouteDataOrigin:(GNCLatLng *)origin destination:(GNCLatLng *)destination vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("requestRouteData(origin:destination:vehicleConfig:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KtorRouteProvider")))
@interface GNCKtorRouteProvider : GNCBase <GNCRouteProvider>
- (instancetype)initWithHttpClient:(GNCHttpClient *)httpClient routingConfig:(id<GNCRoutingConfig>)routingConfig routeDtoConverter:(id<GNCRouteDtoConverter>)routeDtoConverter routingParamProviders:(NSArray<id<GNCRoutingParamProvider>> *)routingParamProviders __attribute__((swift_name("init(httpClient:routingConfig:routeDtoConverter:routingParamProviders:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (GNCRoute * _Nullable)requestRouteRouteRequest:(GNCRouteProviderRouteRequest *)routeRequest error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("requestRoute(routeRequest:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (GNCRouteData * _Nullable)requestRouteDataOrigin:(GNCLatLng *)origin destination:(GNCLatLng *)destination vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("requestRouteData(origin:destination:vehicleConfig:)")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KtorRouteProvider.GetRouteBody")))
@interface GNCKtorRouteProviderGetRouteBody : GNCBase
- (instancetype)initWithProbes:(NSArray<GNCKtorRouteProviderProbeDto *> *)probes __attribute__((swift_name("init(probes:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCKtorRouteProviderGetRouteBodyCompanion *companion __attribute__((swift_name("companion")));
- (GNCKtorRouteProviderGetRouteBody *)doCopyProbes:(NSArray<GNCKtorRouteProviderProbeDto *> *)probes __attribute__((swift_name("doCopy(probes:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSArray<GNCKtorRouteProviderProbeDto *> *probes __attribute__((swift_name("probes")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KtorRouteProvider.GetRouteBodyCompanion")))
@interface GNCKtorRouteProviderGetRouteBodyCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCKtorRouteProviderGetRouteBodyCompanion *shared __attribute__((swift_name("shared")));
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KtorRouteProvider.ProbeDto")))
@interface GNCKtorRouteProviderProbeDto : GNCBase
- (instancetype)initWithProvider:(NSString *)provider timestampUnixMs:(int64_t)timestampUnixMs latitude:(double)latitude longitude:(double)longitude speedMps:(GNCDouble * _Nullable)speedMps heading:(GNCDouble * _Nullable)heading level:(GNCInt * _Nullable)level __attribute__((swift_name("init(provider:timestampUnixMs:latitude:longitude:speedMps:heading:level:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCKtorRouteProviderProbeDtoCompanion *companion __attribute__((swift_name("companion")));
- (GNCKtorRouteProviderProbeDto *)doCopyProvider:(NSString *)provider timestampUnixMs:(int64_t)timestampUnixMs latitude:(double)latitude longitude:(double)longitude speedMps:(GNCDouble * _Nullable)speedMps heading:(GNCDouble * _Nullable)heading level:(GNCInt * _Nullable)level __attribute__((swift_name("doCopy(provider:timestampUnixMs:latitude:longitude:speedMps:heading:level:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCDouble * _Nullable heading __attribute__((swift_name("heading")));
@property (readonly) double latitude __attribute__((swift_name("latitude")));
@property (readonly) GNCInt * _Nullable level __attribute__((swift_name("level")));
@property (readonly) double longitude __attribute__((swift_name("longitude")));
@property (readonly) NSString *provider __attribute__((swift_name("provider")));
@property (readonly) GNCDouble * _Nullable speedMps __attribute__((swift_name("speedMps")));
@property (readonly) int64_t timestampUnixMs __attribute__((swift_name("timestampUnixMs")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KtorRouteProvider.ProbeDtoCompanion")))
@interface GNCKtorRouteProviderProbeDtoCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCKtorRouteProviderProbeDtoCompanion *shared __attribute__((swift_name("shared")));
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteProviderRouteNotFoundException")))
@interface GNCRouteProviderRouteNotFoundException : GNCKotlinException
- (instancetype)initWithMessage:(NSString *)message routeRequest:(GNCRouteProviderRouteRequest *)routeRequest __attribute__((swift_name("init(message:routeRequest:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) GNCRouteProviderRouteRequest *routeRequest __attribute__((swift_name("routeRequest")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteProviderRouteRequest")))
@interface GNCRouteProviderRouteRequest : GNCFreezable
- (instancetype)initWithOrigin:(GNCLocation *)origin forceRoute:(BOOL)forceRoute type:(GNCRouteProviderType *)type verifyOffRoute:(BOOL)verifyOffRoute sessionId:(NSString * _Nullable)sessionId destination:(GNCRouteProviderRouteRequestDestination *)destination previousRoute:(GNCRoute * _Nullable)previousRoute vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig locationTrail:(NSArray<GNCLocation *> *)locationTrail __attribute__((swift_name("init(origin:forceRoute:type:verifyOffRoute:sessionId:destination:previousRoute:vehicleConfig:locationTrail:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCRouteProviderRouteRequest *)doCopyOrigin:(GNCLocation *)origin forceRoute:(BOOL)forceRoute type:(GNCRouteProviderType *)type verifyOffRoute:(BOOL)verifyOffRoute sessionId:(NSString * _Nullable)sessionId destination:(GNCRouteProviderRouteRequestDestination *)destination previousRoute:(GNCRoute * _Nullable)previousRoute vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig locationTrail:(NSArray<GNCLocation *> *)locationTrail __attribute__((swift_name("doCopy(origin:forceRoute:type:verifyOffRoute:sessionId:destination:previousRoute:vehicleConfig:locationTrail:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCRouteProviderRouteRequestDestination *destination __attribute__((swift_name("destination")));
@property (readonly) BOOL forceRoute __attribute__((swift_name("forceRoute")));
@property (readonly) NSArray<GNCLocation *> *locationTrail __attribute__((swift_name("locationTrail")));
@property (readonly) GNCLocation *origin __attribute__((swift_name("origin")));
@property (readonly) GNCRoute * _Nullable previousRoute __attribute__((swift_name("previousRoute")));
@property (readonly) NSString * _Nullable sessionId __attribute__((swift_name("sessionId")));
@property (readonly) GNCRouteProviderType *type __attribute__((swift_name("type")));
@property (readonly) id<GNCVehicleConfig> vehicleConfig __attribute__((swift_name("vehicleConfig")));
@property (readonly) BOOL verifyOffRoute __attribute__((swift_name("verifyOffRoute")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteProviderRouteRequest.Destination")))
@interface GNCRouteProviderRouteRequestDestination : GNCBase
- (instancetype)initWithRoutable:(id<GNCRoutable>)routable approachHeading:(GNCDouble * _Nullable)approachHeading streetName:(NSString * _Nullable)streetName parkingLocation:(GNCLatLng * _Nullable)parkingLocation __attribute__((swift_name("init(routable:approachHeading:streetName:parkingLocation:)"))) __attribute__((objc_designated_initializer));
- (GNCRouteProviderRouteRequestDestination *)doCopyRoutable:(id<GNCRoutable>)routable approachHeading:(GNCDouble * _Nullable)approachHeading streetName:(NSString * _Nullable)streetName parkingLocation:(GNCLatLng * _Nullable)parkingLocation __attribute__((swift_name("doCopy(routable:approachHeading:streetName:parkingLocation:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCDouble * _Nullable approachHeading __attribute__((swift_name("approachHeading")));
@property (readonly) GNCLatLng * _Nullable parkingLocation __attribute__((swift_name("parkingLocation")));
@property (readonly) id<GNCRoutable> routable __attribute__((swift_name("routable")));
@property (readonly) NSString * _Nullable streetName __attribute__((swift_name("streetName")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteProviderType")))
@interface GNCRouteProviderType : GNCKotlinEnum<GNCRouteProviderType *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCRouteProviderType *light __attribute__((swift_name("light")));
@property (class, readonly) GNCRouteProviderType *full __attribute__((swift_name("full")));
+ (GNCKotlinArray<GNCRouteProviderType *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((swift_name("RoutingConfig")))
@protocol GNCRoutingConfig
@required
@property (readonly) NSString *instanceId __attribute__((swift_name("instanceId")));
@property (readonly) NSString *serviceUrl __attribute__((swift_name("serviceUrl")));
@end

__attribute__((swift_name("RoutingParamProvider")))
@protocol GNCRoutingParamProvider
@required
- (NSDictionary<NSString *, NSString *> *)getRoutingParametersRequest:(GNCRouteProviderRouteRequest *)request __attribute__((swift_name("getRoutingParameters(request:)")));
@end

__attribute__((swift_name("LocationTrailProvider")))
@protocol GNCLocationTrailProvider
@required
@property (readonly) NSArray<GNCLocation *> *trail __attribute__((swift_name("trail")));
@end

__attribute__((swift_name("RouteDtoConverter")))
@protocol GNCRouteDtoConverter
@required

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (GNCRoute * _Nullable)convertRouteRequest:(GNCRouteProviderRouteRequest *)routeRequest routeDto:(GNCRouteDto *)routeDto previousRoute:(GNCRoute * _Nullable)previousRoute origin:(GNCLatLng * _Nullable)origin destination:(id<GNCRoutable> _Nullable)destination error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("convert(routeRequest:routeDto:previousRoute:origin:destination:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (GNCRouteData * _Nullable)convertRouteDataDto:(GNCRouteDataDto *)routeDataDto error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("convert(routeDataDto:)")));
@end

__attribute__((swift_name("FullRouteDtoConverter")))
@interface GNCFullRouteDtoConverter : GNCBase <GNCRouteDtoConverter>
- (instancetype)initWithTimeProvider:(id<GNCTimeProvider>)timeProvider __attribute__((swift_name("init(timeProvider:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCFullRouteDtoConverterCompanion *companion __attribute__((swift_name("companion")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (GNCRoute * _Nullable)convertRouteRequest:(GNCRouteProviderRouteRequest *)routeRequest routeDto:(GNCRouteDto *)routeDto previousRoute:(GNCRoute * _Nullable)previousRoute origin:(GNCLatLng * _Nullable)origin destination:(id<GNCRoutable> _Nullable)destination error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("convert(routeRequest:routeDto:previousRoute:origin:destination:)")));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (GNCRouteData * _Nullable)convertRouteDataDto:(GNCRouteDataDto *)routeDataDto error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("convert(routeDataDto:)")));
- (NSArray<GNCRouteDestinationInfo *> *)convertDestinationInfoDestinationInfoDtos:(NSArray<GNCRouteDtoDestinationInfo *> *)destinationInfoDtos __attribute__((swift_name("convertDestinationInfo(destinationInfoDtos:)")));
- (GNCDuration *)convertNextUpdateCallNextRefreshInterval:(NSString *)nextRefreshInterval __attribute__((swift_name("convertNextUpdateCall(nextRefreshInterval:)")));
- (GNCDuration *)convertRemainingTravelTimeRemainingTravelTime:(NSString *)remainingTravelTime __attribute__((swift_name("convertRemainingTravelTime(remainingTravelTime:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FullRouteDtoConverter.Companion")))
@interface GNCFullRouteDtoConverterCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCFullRouteDtoConverterCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSString *TAG __attribute__((swift_name("TAG")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MergingRouteDtoConverter")))
@interface GNCMergingRouteDtoConverter : GNCFullRouteDtoConverter
- (instancetype)initWithTimeProvider:(id<GNCTimeProvider>)timeProvider __attribute__((swift_name("init(timeProvider:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of Exception to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (GNCRoute * _Nullable)convertRouteRequest:(GNCRouteProviderRouteRequest *)routeRequest routeDto:(GNCRouteDto *)routeDto previousRoute:(GNCRoute * _Nullable)previousRoute origin:(GNCLatLng * _Nullable)origin destination:(id<GNCRoutable> _Nullable)destination error:(NSError * _Nullable * _Nullable)error __attribute__((swift_name("convert(routeRequest:routeDto:previousRoute:origin:destination:)")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDataDto")))
@interface GNCRouteDataDto : GNCBase
- (instancetype)initWithDuration:(NSString *)duration length:(double)length __attribute__((swift_name("init(duration:length:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCRouteDataDtoCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) NSString *duration __attribute__((swift_name("duration")));
@property (readonly) double length __attribute__((swift_name("length")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDataDto.Companion")))
@interface GNCRouteDataDtoCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCRouteDataDtoCompanion *shared __attribute__((swift_name("shared")));
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto")))
@interface GNCRouteDto : GNCFreezable
- (instancetype)initWithHash:(NSString *)hash vehicleType:(NSString * _Nullable)vehicleType destinationInfo:(NSArray<GNCRouteDtoDestinationInfo *> * _Nullable)destinationInfo duration:(NSString * _Nullable)duration length:(double)length nextRefreshInterval:(NSString *)nextRefreshInterval routeLegs:(NSArray<GNCRouteDtoRouteLeg *> * _Nullable)routeLegs trafficVolume:(NSString * _Nullable)trafficVolume localizedInfo:(NSString * _Nullable)localizedInfo offRoute:(GNCBoolean * _Nullable)offRoute offRouteLikelyDisplacementMetres:(GNCDouble * _Nullable)offRouteLikelyDisplacementMetres __attribute__((swift_name("init(hash:vehicleType:destinationInfo:duration:length:nextRefreshInterval:routeLegs:trafficVolume:localizedInfo:offRoute:offRouteLikelyDisplacementMetres:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCRouteDtoCompanion *companion __attribute__((swift_name("companion")));
- (GNCRouteDto *)doCopyHash:(NSString *)hash vehicleType:(NSString * _Nullable)vehicleType destinationInfo:(NSArray<GNCRouteDtoDestinationInfo *> * _Nullable)destinationInfo duration:(NSString * _Nullable)duration length:(double)length nextRefreshInterval:(NSString *)nextRefreshInterval routeLegs:(NSArray<GNCRouteDtoRouteLeg *> * _Nullable)routeLegs trafficVolume:(NSString * _Nullable)trafficVolume localizedInfo:(NSString * _Nullable)localizedInfo offRoute:(GNCBoolean * _Nullable)offRoute offRouteLikelyDisplacementMetres:(GNCDouble * _Nullable)offRouteLikelyDisplacementMetres __attribute__((swift_name("doCopy(hash:vehicleType:destinationInfo:duration:length:nextRefreshInterval:routeLegs:trafficVolume:localizedInfo:offRoute:offRouteLikelyDisplacementMetres:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSArray<GNCRouteDtoDestinationInfo *> * _Nullable destinationInfo __attribute__((swift_name("destinationInfo")));
@property (readonly) NSString * _Nullable duration __attribute__((swift_name("duration")));
@property (readonly, getter=hash_) NSString *hash __attribute__((swift_name("hash")));
@property (readonly) double length __attribute__((swift_name("length")));
@property (readonly) NSString * _Nullable localizedInfo __attribute__((swift_name("localizedInfo")));
@property (readonly) NSString *nextRefreshInterval __attribute__((swift_name("nextRefreshInterval")));
@property (readonly) GNCBoolean * _Nullable offRoute __attribute__((swift_name("offRoute")));
@property (readonly) GNCDouble * _Nullable offRouteLikelyDisplacementMetres __attribute__((swift_name("offRouteLikelyDisplacementMetres")));
@property (readonly) NSArray<GNCRouteDtoRouteLeg *> * _Nullable routeLegs __attribute__((swift_name("routeLegs")));
@property (readonly) NSString * _Nullable trafficVolume __attribute__((swift_name("trafficVolume")));
@property (readonly) NSString * _Nullable vehicleType __attribute__((swift_name("vehicleType")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.Companion")))
@interface GNCRouteDtoCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCRouteDtoCompanion *shared __attribute__((swift_name("shared")));
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.DestinationInfo")))
@interface GNCRouteDtoDestinationInfo : GNCFreezable
- (instancetype)initWithLocation:(GNCRouteDtoGeoPoint *)location type:(NSString *)type tags:(NSDictionary<NSString *, id> *)tags destinationReachedDistanceMeters:(GNCDouble * _Nullable)destinationReachedDistanceMeters __attribute__((swift_name("init(location:type:tags:destinationReachedDistanceMeters:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCRouteDtoDestinationInfoCompanion *companion __attribute__((swift_name("companion")));
- (GNCRouteDtoDestinationInfo *)doCopyLocation:(GNCRouteDtoGeoPoint *)location type:(NSString *)type tags:(NSDictionary<NSString *, id> *)tags destinationReachedDistanceMeters:(GNCDouble * _Nullable)destinationReachedDistanceMeters __attribute__((swift_name("doCopy(location:type:tags:destinationReachedDistanceMeters:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCDouble * _Nullable destinationReachedDistanceMeters __attribute__((swift_name("destinationReachedDistanceMeters")));
@property (readonly) GNCRouteDtoGeoPoint *location __attribute__((swift_name("location")));
@property (readonly) NSDictionary<NSString *, id> *tags __attribute__((swift_name("tags")));
@property (readonly) NSString *type __attribute__((swift_name("type")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.DestinationInfoCompanion")))
@interface GNCRouteDtoDestinationInfoCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCRouteDtoDestinationInfoCompanion *shared __attribute__((swift_name("shared")));
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.Enforcement")))
@interface GNCRouteDtoEnforcement : GNCFreezable
- (instancetype)initWithLocation:(GNCRouteDtoGeoPoint *)location type:(NSString *)type __attribute__((swift_name("init(location:type:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCRouteDtoEnforcementCompanion *companion __attribute__((swift_name("companion")));
- (GNCRouteDtoEnforcement *)doCopyLocation:(GNCRouteDtoGeoPoint *)location type:(NSString *)type __attribute__((swift_name("doCopy(location:type:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCRouteDtoGeoPoint *location __attribute__((swift_name("location")));
@property (readonly) NSString *type __attribute__((swift_name("type")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.EnforcementCompanion")))
@interface GNCRouteDtoEnforcementCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCRouteDtoEnforcementCompanion *shared __attribute__((swift_name("shared")));
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.GeoPoint")))
@interface GNCRouteDtoGeoPoint : GNCFreezable
- (instancetype)initWithLatitude:(double)latitude longitude:(double)longitude __attribute__((swift_name("init(latitude:longitude:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCRouteDtoGeoPointCompanion *companion __attribute__((swift_name("companion")));
- (GNCRouteDtoGeoPoint *)doCopyLatitude:(double)latitude longitude:(double)longitude __attribute__((swift_name("doCopy(latitude:longitude:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) double latitude __attribute__((swift_name("latitude")));
@property (readonly) double longitude __attribute__((swift_name("longitude")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.GeoPointCompanion")))
@interface GNCRouteDtoGeoPointCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCRouteDtoGeoPointCompanion *shared __attribute__((swift_name("shared")));
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLeg")))
@interface GNCRouteDtoRouteLeg : GNCFreezable
- (instancetype)initWithDestinationRoadOffset:(double)destinationRoadOffset steps:(NSArray<GNCRouteDtoRouteLegStep *> *)steps fuelStations:(NSArray<GNCRouteDtoRouteLegFuelStation *> * _Nullable)fuelStations parkingAreas:(NSArray<GNCRouteDtoRouteLegParkingArea *> * _Nullable)parkingAreas __attribute__((swift_name("init(destinationRoadOffset:steps:fuelStations:parkingAreas:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCRouteDtoRouteLegCompanion *companion __attribute__((swift_name("companion")));
- (GNCRouteDtoRouteLeg *)doCopyDestinationRoadOffset:(double)destinationRoadOffset steps:(NSArray<GNCRouteDtoRouteLegStep *> *)steps fuelStations:(NSArray<GNCRouteDtoRouteLegFuelStation *> * _Nullable)fuelStations parkingAreas:(NSArray<GNCRouteDtoRouteLegParkingArea *> * _Nullable)parkingAreas __attribute__((swift_name("doCopy(destinationRoadOffset:steps:fuelStations:parkingAreas:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) double destinationRoadOffset __attribute__((swift_name("destinationRoadOffset")));
@property (readonly) NSArray<GNCRouteDtoRouteLegFuelStation *> * _Nullable fuelStations __attribute__((swift_name("fuelStations")));
@property (readonly) NSArray<GNCRouteDtoRouteLegParkingArea *> * _Nullable parkingAreas __attribute__((swift_name("parkingAreas")));
@property (readonly) NSArray<GNCRouteDtoRouteLegStep *> *steps __attribute__((swift_name("steps")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLegCompanion")))
@interface GNCRouteDtoRouteLegCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCRouteDtoRouteLegCompanion *shared __attribute__((swift_name("shared")));
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLegFuelStation")))
@interface GNCRouteDtoRouteLegFuelStation : GNCFreezable
- (instancetype)initWithLocation:(GNCRouteDtoGeoPoint *)location distance:(double)distance name:(NSString * _Nullable)name types:(NSArray<NSString *> * _Nullable)types __attribute__((swift_name("init(location:distance:name:types:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCRouteDtoRouteLegFuelStationCompanion *companion __attribute__((swift_name("companion")));
- (GNCRouteDtoRouteLegFuelStation *)doCopyLocation:(GNCRouteDtoGeoPoint *)location distance:(double)distance name:(NSString * _Nullable)name types:(NSArray<NSString *> * _Nullable)types __attribute__((swift_name("doCopy(location:distance:name:types:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) double distance __attribute__((swift_name("distance")));
@property (readonly) GNCRouteDtoGeoPoint *location __attribute__((swift_name("location")));
@property (readonly) NSString * _Nullable name __attribute__((swift_name("name")));
@property (readonly) NSArray<NSString *> * _Nullable types __attribute__((swift_name("types")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLegFuelStationCompanion")))
@interface GNCRouteDtoRouteLegFuelStationCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCRouteDtoRouteLegFuelStationCompanion *shared __attribute__((swift_name("shared")));
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLegParkingArea")))
@interface GNCRouteDtoRouteLegParkingArea : GNCFreezable
- (instancetype)initWithName:(NSString * _Nullable)name position:(GNCRouteDtoRouteLegPosition *)position liableToFee:(GNCBoolean * _Nullable)liableToFee parkingType:(int32_t)parkingType distanceToDestinationMetres:(double)distanceToDestinationMetres __attribute__((swift_name("init(name:position:liableToFee:parkingType:distanceToDestinationMetres:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCRouteDtoRouteLegParkingAreaCompanion *companion __attribute__((swift_name("companion")));
- (GNCRouteDtoRouteLegParkingArea *)doCopyName:(NSString * _Nullable)name position:(GNCRouteDtoRouteLegPosition *)position liableToFee:(GNCBoolean * _Nullable)liableToFee parkingType:(int32_t)parkingType distanceToDestinationMetres:(double)distanceToDestinationMetres __attribute__((swift_name("doCopy(name:position:liableToFee:parkingType:distanceToDestinationMetres:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) double distanceToDestinationMetres __attribute__((swift_name("distanceToDestinationMetres")));
@property (readonly) GNCBoolean * _Nullable liableToFee __attribute__((swift_name("liableToFee")));
@property (readonly) NSString * _Nullable name __attribute__((swift_name("name")));
@property (readonly) int32_t parkingType __attribute__((swift_name("parkingType")));
@property (readonly) GNCRouteDtoRouteLegPosition *position __attribute__((swift_name("position")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLegParkingAreaCompanion")))
@interface GNCRouteDtoRouteLegParkingAreaCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCRouteDtoRouteLegParkingAreaCompanion *shared __attribute__((swift_name("shared")));
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLegPosition")))
@interface GNCRouteDtoRouteLegPosition : GNCFreezable
- (instancetype)initWithLat:(double)lat lng:(double)lng __attribute__((swift_name("init(lat:lng:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCRouteDtoRouteLegPositionCompanion *companion __attribute__((swift_name("companion")));
- (GNCRouteDtoRouteLegPosition *)doCopyLat:(double)lat lng:(double)lng __attribute__((swift_name("doCopy(lat:lng:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) double lat __attribute__((swift_name("lat")));
@property (readonly) double lng __attribute__((swift_name("lng")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLegPositionCompanion")))
@interface GNCRouteDtoRouteLegPositionCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCRouteDtoRouteLegPositionCompanion *shared __attribute__((swift_name("shared")));
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLegStep")))
@interface GNCRouteDtoRouteLegStep : GNCFreezable
- (instancetype)initWithAnticipatedSpeed:(double)anticipatedSpeed geoPoints:(NSArray<GNCRouteDtoGeoPoint *> *)geoPoints enforcements:(NSArray<GNCRouteDtoEnforcement *> * _Nullable)enforcements expectedGpsQuality:(NSString * _Nullable)expectedGpsQuality lanes:(NSArray<GNCRouteDtoRouteLegStepLane *> * _Nullable)lanes laneAssistDisplayDistance:(GNCDouble * _Nullable)laneAssistDisplayDistance roadClass:(NSString * _Nullable)roadClass speedLimit:(GNCInt * _Nullable)speedLimit turnInfo:(GNCRouteDtoRouteLegStepTurnInfo *)turnInfo level:(GNCInt * _Nullable)level __attribute__((swift_name("init(anticipatedSpeed:geoPoints:enforcements:expectedGpsQuality:lanes:laneAssistDisplayDistance:roadClass:speedLimit:turnInfo:level:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCRouteDtoRouteLegStepCompanion *companion __attribute__((swift_name("companion")));
- (GNCRouteDtoRouteLegStep *)doCopyAnticipatedSpeed:(double)anticipatedSpeed geoPoints:(NSArray<GNCRouteDtoGeoPoint *> *)geoPoints enforcements:(NSArray<GNCRouteDtoEnforcement *> * _Nullable)enforcements expectedGpsQuality:(NSString * _Nullable)expectedGpsQuality lanes:(NSArray<GNCRouteDtoRouteLegStepLane *> * _Nullable)lanes laneAssistDisplayDistance:(GNCDouble * _Nullable)laneAssistDisplayDistance roadClass:(NSString * _Nullable)roadClass speedLimit:(GNCInt * _Nullable)speedLimit turnInfo:(GNCRouteDtoRouteLegStepTurnInfo *)turnInfo level:(GNCInt * _Nullable)level __attribute__((swift_name("doCopy(anticipatedSpeed:geoPoints:enforcements:expectedGpsQuality:lanes:laneAssistDisplayDistance:roadClass:speedLimit:turnInfo:level:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) double anticipatedSpeed __attribute__((swift_name("anticipatedSpeed")));
@property (readonly) NSArray<GNCRouteDtoEnforcement *> * _Nullable enforcements __attribute__((swift_name("enforcements")));
@property NSString * _Nullable expectedGpsQuality __attribute__((swift_name("expectedGpsQuality")));
@property (readonly) NSArray<GNCRouteDtoGeoPoint *> *geoPoints __attribute__((swift_name("geoPoints")));
@property (readonly) GNCDouble * _Nullable laneAssistDisplayDistance __attribute__((swift_name("laneAssistDisplayDistance")));
@property (readonly) NSArray<GNCRouteDtoRouteLegStepLane *> * _Nullable lanes __attribute__((swift_name("lanes")));
@property (readonly) GNCInt * _Nullable level __attribute__((swift_name("level")));
@property (readonly) NSString * _Nullable roadClass __attribute__((swift_name("roadClass")));
@property (readonly) GNCInt * _Nullable speedLimit __attribute__((swift_name("speedLimit")));
@property (readonly) GNCRouteDtoRouteLegStepTurnInfo *turnInfo __attribute__((swift_name("turnInfo")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLegStepCompanion")))
@interface GNCRouteDtoRouteLegStepCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCRouteDtoRouteLegStepCompanion *shared __attribute__((swift_name("shared")));
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLegStepLane")))
@interface GNCRouteDtoRouteLegStepLane : GNCFreezable
- (instancetype)initWithLaneTurns:(NSArray<NSString *> *)laneTurns shouldUse:(BOOL)shouldUse __attribute__((swift_name("init(laneTurns:shouldUse:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCRouteDtoRouteLegStepLaneCompanion *companion __attribute__((swift_name("companion")));
- (GNCRouteDtoRouteLegStepLane *)doCopyLaneTurns:(NSArray<NSString *> *)laneTurns shouldUse:(BOOL)shouldUse __attribute__((swift_name("doCopy(laneTurns:shouldUse:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property NSArray<NSString *> *laneTurns __attribute__((swift_name("laneTurns")));
@property BOOL shouldUse __attribute__((swift_name("shouldUse")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLegStepLaneCompanion")))
@interface GNCRouteDtoRouteLegStepLaneCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCRouteDtoRouteLegStepLaneCompanion *shared __attribute__((swift_name("shared")));
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLegStepTurnInfo")))
@interface GNCRouteDtoRouteLegStepTurnInfo : GNCFreezable
- (instancetype)initWithIsEndOfStreet:(BOOL)isEndOfStreet shouldSuppressTurnCommand:(BOOL)shouldSuppressTurnCommand directionNames:(NSArray<NSString *> *)directionNames directionReferenceNames:(NSArray<NSString *> *)directionReferenceNames turnCommand:(NSString *)turnCommand turnCost:(GNCFloat * _Nullable)turnCost angle:(GNCFloat * _Nullable)angle leadsToRoadClass:(NSString * _Nullable)leadsToRoadClass leadsToStreetName:(NSString * _Nullable)leadsToStreetName leadsToLevel:(GNCInt * _Nullable)leadsToLevel __attribute__((swift_name("init(isEndOfStreet:shouldSuppressTurnCommand:directionNames:directionReferenceNames:turnCommand:turnCost:angle:leadsToRoadClass:leadsToStreetName:leadsToLevel:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCRouteDtoRouteLegStepTurnInfoCompanion *companion __attribute__((swift_name("companion")));
- (GNCRouteDtoRouteLegStepTurnInfo *)doCopyIsEndOfStreet:(BOOL)isEndOfStreet shouldSuppressTurnCommand:(BOOL)shouldSuppressTurnCommand directionNames:(NSArray<NSString *> *)directionNames directionReferenceNames:(NSArray<NSString *> *)directionReferenceNames turnCommand:(NSString *)turnCommand turnCost:(GNCFloat * _Nullable)turnCost angle:(GNCFloat * _Nullable)angle leadsToRoadClass:(NSString * _Nullable)leadsToRoadClass leadsToStreetName:(NSString * _Nullable)leadsToStreetName leadsToLevel:(GNCInt * _Nullable)leadsToLevel __attribute__((swift_name("doCopy(isEndOfStreet:shouldSuppressTurnCommand:directionNames:directionReferenceNames:turnCommand:turnCost:angle:leadsToRoadClass:leadsToStreetName:leadsToLevel:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCFloat * _Nullable angle __attribute__((swift_name("angle")));
@property (readonly) NSArray<NSString *> *directionNames __attribute__((swift_name("directionNames")));
@property (readonly) NSArray<NSString *> *directionReferenceNames __attribute__((swift_name("directionReferenceNames")));
@property (readonly) BOOL isEndOfStreet __attribute__((swift_name("isEndOfStreet")));
@property (readonly) GNCInt * _Nullable leadsToLevel __attribute__((swift_name("leadsToLevel")));
@property (readonly) NSString * _Nullable leadsToRoadClass __attribute__((swift_name("leadsToRoadClass")));
@property (readonly) NSString * _Nullable leadsToStreetName __attribute__((swift_name("leadsToStreetName")));
@property (readonly) BOOL shouldSuppressTurnCommand __attribute__((swift_name("shouldSuppressTurnCommand")));
@property (readonly) NSString *turnCommand __attribute__((swift_name("turnCommand")));
@property (readonly) GNCFloat * _Nullable turnCost __attribute__((swift_name("turnCost")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDto.RouteLegStepTurnInfoCompanion")))
@interface GNCRouteDtoRouteLegStepTurnInfoCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCRouteDtoRouteLegStepTurnInfoCompanion *shared __attribute__((swift_name("shared")));
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteDtoConverterRouteConversionExceptions")))
@interface GNCRouteDtoConverterRouteConversionExceptions : GNCKotlinException
- (instancetype)initWithMessage:(NSString *)message throwable:(GNCKotlinThrowable * _Nullable)throwable __attribute__((swift_name("init(message:throwable:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((swift_name("RouteMerger")))
@protocol GNCRouteMerger
@required
- (GNCRoute *)mergePrevious:(GNCRoute * _Nullable)previous new:(GNCRoute *)new_ __attribute__((swift_name("merge(previous:new:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CompleteRouteMerger")))
@interface GNCCompleteRouteMerger : GNCBase <GNCRouteMerger>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (GNCRoute *)mergePrevious:(GNCRoute * _Nullable)previous new:(GNCRoute *)new_ __attribute__((swift_name("merge(previous:new:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteUtils_")))
@interface GNCRouteUtils_ : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)routeUtils __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCRouteUtils_ *shared __attribute__((swift_name("shared")));
- (BOOL)isFullRouteRoute:(GNCRoute *)route __attribute__((swift_name("isFullRoute(route:)")));
- (BOOL)isTurnCommandWaypoint:(GNCRouteWaypoint * _Nullable)waypoint __attribute__((swift_name("isTurnCommand(waypoint:)")));
@end

__attribute__((swift_name("OnRouteTracker")))
@protocol GNCOnRouteTracker
@required
- (void)addOnRouteStateListenerOnRouteStateListener:(id<GNCOnRouteTrackerOnRouteStateListener>)onRouteStateListener __attribute__((swift_name("addOnRouteStateListener(onRouteStateListener:)")));
@property (readonly) BOOL onRoute __attribute__((swift_name("onRoute")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChanceBasedOnRouteTracker")))
@interface GNCChanceBasedOnRouteTracker : GNCBase <GNCOnRouteTracker, GNCOnRouteProjectorOnRouteProjectorListener>
- (instancetype)initWithWeightedChanceCalculators:(NSArray<GNCWeightedChanceCalculator *> *)weightedChanceCalculators __attribute__((swift_name("init(weightedChanceCalculators:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCChanceBasedOnRouteTrackerCompanion *companion __attribute__((swift_name("companion")));
- (void)addOnRouteStateListenerOnRouteStateListener:(id<GNCOnRouteTrackerOnRouteStateListener>)onRouteStateListener __attribute__((swift_name("addOnRouteStateListener(onRouteStateListener:)")));
- (void)onProjectionChangedProjectedLocation:(GNCOnRouteProjectorProjectedLocation *)projectedLocation __attribute__((swift_name("onProjectionChanged(projectedLocation:)")));
- (void)onRouteChangedRoute:(GNCRoute * _Nullable)route __attribute__((swift_name("onRouteChanged(route:)")));
@property (readonly) BOOL onRoute __attribute__((swift_name("onRoute")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChanceBasedOnRouteTracker.Companion")))
@interface GNCChanceBasedOnRouteTrackerCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCChanceBasedOnRouteTrackerCompanion *shared __attribute__((swift_name("shared")));
@end

__attribute__((swift_name("ChanceCalculator")))
@protocol GNCChanceCalculator
@required
- (float)calculateChanceLocation:(GNCLocation *)location projectedProbe:(GNCOnRouteProjectorProjectedLocation *)projectedProbe __attribute__((swift_name("calculateChance(location:projectedProbe:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChanceCalculatorCompanion")))
@interface GNCChanceCalculatorCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCChanceCalculatorCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) float NOT_PROCESSABLE __attribute__((swift_name("NOT_PROCESSABLE"))) __attribute__((deprecated("Very ambiguous. Make result nullable.")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OnRouteTrackerState")))
@interface GNCOnRouteTrackerState : GNCKotlinEnum<GNCOnRouteTrackerState *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCOnRouteTrackerState *onRoute __attribute__((swift_name("onRoute")));
@property (class, readonly) GNCOnRouteTrackerState *offRoute __attribute__((swift_name("offRoute")));
+ (GNCKotlinArray<GNCOnRouteTrackerState *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((swift_name("WeightedChanceCalculator")))
@interface GNCWeightedChanceCalculator : GNCBase <GNCChanceCalculator>
- (instancetype)initWithWeight:(float)weight __attribute__((swift_name("init(weight:)"))) __attribute__((objc_designated_initializer));
@property (readonly) float weight __attribute__((swift_name("weight")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DistanceBasedChanceCalculator")))
@interface GNCDistanceBasedChanceCalculator : GNCWeightedChanceCalculator
- (instancetype)initWithWeight:(float)weight __attribute__((swift_name("init(weight:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCDistanceBasedChanceCalculatorCompanion *companion __attribute__((swift_name("companion")));
- (float)calculateChanceLocation:(GNCLocation *)location projectedProbe:(GNCOnRouteProjectorProjectedLocation *)projectedProbe __attribute__((swift_name("calculateChance(location:projectedProbe:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DistanceBasedChanceCalculator.Companion")))
@interface GNCDistanceBasedChanceCalculatorCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCDistanceBasedChanceCalculatorCompanion *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeadingBasedChanceCalculator")))
@interface GNCHeadingBasedChanceCalculator : GNCWeightedChanceCalculator
- (instancetype)initWithWeight:(float)weight minProcessableSpeed:(GNCSpeed *)minProcessableSpeed __attribute__((swift_name("init(weight:minProcessableSpeed:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithWeight:(float)weight __attribute__((swift_name("init(weight:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCHeadingBasedChanceCalculatorCompanion *companion __attribute__((swift_name("companion")));
- (float)calculateChanceLocation:(GNCLocation *)location projectedProbe:(GNCOnRouteProjectorProjectedLocation *)projectedProbe __attribute__((swift_name("calculateChance(location:projectedProbe:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeadingBasedChanceCalculator.Companion")))
@interface GNCHeadingBasedChanceCalculatorCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHeadingBasedChanceCalculatorCompanion *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LevelBasedChanceCalculator")))
@interface GNCLevelBasedChanceCalculator : GNCWeightedChanceCalculator
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithWeight:(float)weight __attribute__((swift_name("init(weight:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (float)calculateChanceLocation:(GNCLocation *)location projectedProbe:(GNCOnRouteProjectorProjectedLocation *)projectedProbe __attribute__((swift_name("calculateChance(location:projectedProbe:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TurnCommandAlignmentChanceCalculator")))
@interface GNCTurnCommandAlignmentChanceCalculator : GNCWeightedChanceCalculator
- (instancetype)initWithWeight:(float)weight minProcessableSpeed:(GNCSpeed *)minProcessableSpeed __attribute__((swift_name("init(weight:minProcessableSpeed:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithWeight:(float)weight __attribute__((swift_name("init(weight:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCTurnCommandAlignmentChanceCalculatorCompanion *companion __attribute__((swift_name("companion")));
- (float)calculateChanceLocation:(GNCLocation *)location projectedProbe:(GNCOnRouteProjectorProjectedLocation *)projectedProbe __attribute__((swift_name("calculateChance(location:projectedProbe:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TurnCommandAlignmentChanceCalculator.Companion")))
@interface GNCTurnCommandAlignmentChanceCalculatorCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCTurnCommandAlignmentChanceCalculatorCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) float ACCURACY_FACTOR __attribute__((swift_name("ACCURACY_FACTOR")));
@end

__attribute__((swift_name("Routable")))
@protocol GNCRoutable
@required
@property (readonly) NSString * _Nullable destinationStreetName __attribute__((swift_name("destinationStreetName")));
@property (readonly) NSString *id __attribute__((swift_name("id")));
@property (readonly) NSString *label __attribute__((swift_name("label")));
@property (readonly) GNCLatLng *latLng __attribute__((swift_name("latLng")));
@end

__attribute__((swift_name("HeadingDependentRoutable")))
@protocol GNCHeadingDependentRoutable <GNCRoutable>
@required
@property (readonly) GNCDouble * _Nullable destinationHeading __attribute__((swift_name("destinationHeading")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LaneInfo")))
@interface GNCLaneInfo : GNCFreezable
- (instancetype)initWithLaneDisplayDistance:(GNCLength *)laneDisplayDistance lanes:(NSArray<GNCLaneInfoLane *> *)lanes __attribute__((swift_name("init(laneDisplayDistance:lanes:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCLaneInfo *)doCopyLaneDisplayDistance:(GNCLength *)laneDisplayDistance lanes:(NSArray<GNCLaneInfoLane *> *)lanes __attribute__((swift_name("doCopy(laneDisplayDistance:lanes:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCLength *laneDisplayDistance __attribute__((swift_name("laneDisplayDistance")));
@property (readonly) NSArray<GNCLaneInfoLane *> *lanes __attribute__((swift_name("lanes")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LaneInfo.Lane")))
@interface GNCLaneInfoLane : GNCFreezable
- (instancetype)initWithTurns:(NSArray<GNCLaneInfoLaneLaneTurn *> *)turns usable:(BOOL)usable __attribute__((swift_name("init(turns:usable:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCLaneInfoLane *)doCopyTurns:(NSArray<GNCLaneInfoLaneLaneTurn *> *)turns usable:(BOOL)usable __attribute__((swift_name("doCopy(turns:usable:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSArray<GNCLaneInfoLaneLaneTurn *> *turns __attribute__((swift_name("turns")));
@property (readonly) BOOL usable __attribute__((swift_name("usable")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LaneInfo.LaneLaneTurn")))
@interface GNCLaneInfoLaneLaneTurn : GNCKotlinEnum<GNCLaneInfoLaneLaneTurn *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCLaneInfoLaneLaneTurn *invalid __attribute__((swift_name("invalid")));
@property (class, readonly) GNCLaneInfoLaneLaneTurn *laneLeft __attribute__((swift_name("laneLeft")));
@property (class, readonly) GNCLaneInfoLaneLaneTurn *laneRight __attribute__((swift_name("laneRight")));
@property (class, readonly) GNCLaneInfoLaneLaneTurn *laneSlightLeft __attribute__((swift_name("laneSlightLeft")));
@property (class, readonly) GNCLaneInfoLaneLaneTurn *laneSlightRight __attribute__((swift_name("laneSlightRight")));
@property (class, readonly) GNCLaneInfoLaneLaneTurn *laneUturn __attribute__((swift_name("laneUturn")));
@property (class, readonly) GNCLaneInfoLaneLaneTurn *mergeToLeft __attribute__((swift_name("mergeToLeft")));
@property (class, readonly) GNCLaneInfoLaneLaneTurn *mergeToRight __attribute__((swift_name("mergeToRight")));
@property (class, readonly) GNCLaneInfoLaneLaneTurn *through __attribute__((swift_name("through")));
@property (class, readonly) GNCLaneInfoLaneLaneTurn *unknown __attribute__((swift_name("unknown")));
+ (GNCKotlinArray<GNCLaneInfoLaneLaneTurn *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((swift_name("ManagedRoutable")))
@protocol GNCManagedRoutable <GNCRoutable>
@required
@property (readonly) NSString * _Nullable destinationId __attribute__((swift_name("destinationId")));
@property GNCLatLng *managedPosition __attribute__((swift_name("managedPosition")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Maneuver")))
@interface GNCManeuver : GNCBase
- (instancetype)initWithWaypoint:(GNCRouteWaypoint *)waypoint waypointIndex:(int32_t)waypointIndex turnInfo:(GNCTurnInfo *)turnInfo laneInfo:(GNCLaneInfo * _Nullable)laneInfo remainingTravelTime:(GNCDuration *)remainingTravelTime remainingDistance:(GNCLength *)remainingDistance distanceFromPreviousManeuver:(GNCLength *)distanceFromPreviousManeuver __attribute__((swift_name("init(waypoint:waypointIndex:turnInfo:laneInfo:remainingTravelTime:remainingDistance:distanceFromPreviousManeuver:)"))) __attribute__((objc_designated_initializer));
- (GNCManeuver *)doCopyWaypoint:(GNCRouteWaypoint *)waypoint waypointIndex:(int32_t)waypointIndex turnInfo:(GNCTurnInfo *)turnInfo laneInfo:(GNCLaneInfo * _Nullable)laneInfo remainingTravelTime:(GNCDuration *)remainingTravelTime remainingDistance:(GNCLength *)remainingDistance distanceFromPreviousManeuver:(GNCLength *)distanceFromPreviousManeuver __attribute__((swift_name("doCopy(waypoint:waypointIndex:turnInfo:laneInfo:remainingTravelTime:remainingDistance:distanceFromPreviousManeuver:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCLength *distanceFromPreviousManeuver __attribute__((swift_name("distanceFromPreviousManeuver")));
@property (readonly) GNCLaneInfo * _Nullable laneInfo __attribute__((swift_name("laneInfo")));
@property (readonly) GNCLatLng *latLng __attribute__((swift_name("latLng")));
@property (readonly) GNCLength *remainingDistance __attribute__((swift_name("remainingDistance")));
@property (readonly) GNCDuration *remainingTravelTime __attribute__((swift_name("remainingTravelTime")));
@property (readonly) GNCTurnInfo *turnInfo __attribute__((swift_name("turnInfo")));
@property (readonly) GNCRouteWaypoint *waypoint __attribute__((swift_name("waypoint"))) __attribute__((deprecated("Will be removed in the future. Only here for backwards compatibility")));
@property (readonly) int32_t waypointIndex __attribute__((swift_name("waypointIndex")));
@end

__attribute__((swift_name("ParkingLocationRoutable")))
@protocol GNCParkingLocationRoutable <GNCRoutable>
@required
@property (readonly) GNCLatLng * _Nullable parkinglocation __attribute__((swift_name("parkinglocation")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RoadClass")))
@interface GNCRoadClass : GNCKotlinEnum<GNCRoadClass *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCRoadClassCompanion *companion __attribute__((swift_name("companion")));
@property (class, readonly) GNCRoadClass *unknown __attribute__((swift_name("unknown")));
@property (class, readonly) GNCRoadClass *motorway __attribute__((swift_name("motorway")));
@property (class, readonly) GNCRoadClass *motorwayLink __attribute__((swift_name("motorwayLink")));
@property (class, readonly) GNCRoadClass *trunk __attribute__((swift_name("trunk")));
@property (class, readonly) GNCRoadClass *trunkLink __attribute__((swift_name("trunkLink")));
@property (class, readonly) GNCRoadClass *primary __attribute__((swift_name("primary")));
@property (class, readonly) GNCRoadClass *primaryLink __attribute__((swift_name("primaryLink")));
@property (class, readonly) GNCRoadClass *secondary __attribute__((swift_name("secondary")));
@property (class, readonly) GNCRoadClass *secondaryLink __attribute__((swift_name("secondaryLink")));
@property (class, readonly) GNCRoadClass *tertiary __attribute__((swift_name("tertiary")));
@property (class, readonly) GNCRoadClass *tertiaryLink __attribute__((swift_name("tertiaryLink")));
@property (class, readonly) GNCRoadClass *livingStreet __attribute__((swift_name("livingStreet")));
@property (class, readonly) GNCRoadClass *residential __attribute__((swift_name("residential")));
@property (class, readonly) GNCRoadClass *unclassified __attribute__((swift_name("unclassified")));
@property (class, readonly) GNCRoadClass *service __attribute__((swift_name("service")));
@property (class, readonly) GNCRoadClass *road __attribute__((swift_name("road")));
@property (class, readonly) GNCRoadClass *construction __attribute__((swift_name("construction")));
@property (class, readonly) GNCRoadClass *escape __attribute__((swift_name("escape")));
@property (class, readonly) GNCRoadClass *track __attribute__((swift_name("track")));
+ (GNCKotlinArray<GNCRoadClass *> *)values __attribute__((swift_name("values()")));
@property (readonly) int32_t value __attribute__((swift_name("value")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RoadClass.Companion")))
@interface GNCRoadClassCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCRoadClassCompanion *shared __attribute__((swift_name("shared")));
- (GNCRoadClass *)fromString:(NSString * _Nullable)string __attribute__((swift_name("from(string:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RoutableFactory")))
@interface GNCRoutableFactory : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)routableFactory __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCRoutableFactory *shared __attribute__((swift_name("shared")));
- (id<GNCRoutable>)createLatLng:(GNCLatLng *)latLng __attribute__((swift_name("create(latLng:)")));
- (id<GNCRoutable>)createLatLng:(GNCLatLng *)latLng label:(NSString *)label __attribute__((swift_name("create(latLng:label:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Route")))
@interface GNCRoute : GNCFreezable
- (instancetype)initWithHash:(NSString * _Nullable)hash vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig waypoints:(NSArray<GNCRouteWaypoint *> *)waypoints turnCommands:(NSArray<GNCRouteWaypoint *> *)turnCommands nextUpdateCall:(GNCDuration *)nextUpdateCall remainingTravelTime:(GNCDuration *)remainingTravelTime updateTimestamp:(int64_t)updateTimestamp distance:(GNCLength *)distance destination:(id<GNCRoutable>)destination destinationInfo:(NSArray<GNCRouteDestinationInfo *> *)destinationInfo origin:(GNCLatLng *)origin enforcements:(NSArray<GNCRouteEnforcement *> *)enforcements hasAnticipatedSpeed:(BOOL)hasAnticipatedSpeed fuelStation:(NSArray<GNCRouteFuelStation *> *)fuelStation localizedInfo:(NSString * _Nullable)localizedInfo originWasOffRoute:(GNCBoolean * _Nullable)originWasOffRoute minOffRouteDisplacement:(GNCLength * _Nullable)minOffRouteDisplacement parkingAreas:(NSArray<GNCRouteParkingArea *> *)parkingAreas __attribute__((swift_name("init(hash:vehicleConfig:waypoints:turnCommands:nextUpdateCall:remainingTravelTime:updateTimestamp:distance:destination:destinationInfo:origin:enforcements:hasAnticipatedSpeed:fuelStation:localizedInfo:originWasOffRoute:minOffRouteDisplacement:parkingAreas:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCRoute *)doCopyHash:(NSString * _Nullable)hash vehicleConfig:(id<GNCVehicleConfig>)vehicleConfig waypoints:(NSArray<GNCRouteWaypoint *> *)waypoints turnCommands:(NSArray<GNCRouteWaypoint *> *)turnCommands nextUpdateCall:(GNCDuration *)nextUpdateCall remainingTravelTime:(GNCDuration *)remainingTravelTime updateTimestamp:(int64_t)updateTimestamp distance:(GNCLength *)distance destination:(id<GNCRoutable>)destination destinationInfo:(NSArray<GNCRouteDestinationInfo *> *)destinationInfo origin:(GNCLatLng *)origin enforcements:(NSArray<GNCRouteEnforcement *> *)enforcements hasAnticipatedSpeed:(BOOL)hasAnticipatedSpeed fuelStation:(NSArray<GNCRouteFuelStation *> *)fuelStation localizedInfo:(NSString * _Nullable)localizedInfo originWasOffRoute:(GNCBoolean * _Nullable)originWasOffRoute minOffRouteDisplacement:(GNCLength * _Nullable)minOffRouteDisplacement parkingAreas:(NSArray<GNCRouteParkingArea *> *)parkingAreas __attribute__((swift_name("doCopy(hash:vehicleConfig:waypoints:turnCommands:nextUpdateCall:remainingTravelTime:updateTimestamp:distance:destination:destinationInfo:origin:enforcements:hasAnticipatedSpeed:fuelStation:localizedInfo:originWasOffRoute:minOffRouteDisplacement:parkingAreas:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<GNCRoutable> destination __attribute__((swift_name("destination")));
@property (readonly) NSArray<GNCRouteDestinationInfo *> *destinationInfo __attribute__((swift_name("destinationInfo")));
@property (readonly) GNCLength *distance __attribute__((swift_name("distance")));
@property (readonly) NSArray<GNCRouteEnforcement *> *enforcements __attribute__((swift_name("enforcements")));
@property (readonly) NSArray<GNCRouteFuelStation *> *fuelStation __attribute__((swift_name("fuelStation")));
@property (readonly) BOOL hasAnticipatedSpeed __attribute__((swift_name("hasAnticipatedSpeed")));
@property (readonly, getter=hash_) NSString * _Nullable hash __attribute__((swift_name("hash")));
@property (readonly) NSString * _Nullable localizedInfo __attribute__((swift_name("localizedInfo")));
@property (readonly) GNCLength * _Nullable minOffRouteDisplacement __attribute__((swift_name("minOffRouteDisplacement")));
@property (readonly) GNCDuration *nextUpdateCall __attribute__((swift_name("nextUpdateCall")));
@property (readonly) GNCLatLng *origin __attribute__((swift_name("origin")));
@property (readonly) GNCBoolean * _Nullable originWasOffRoute __attribute__((swift_name("originWasOffRoute")));
@property (readonly) NSArray<GNCRouteParkingArea *> *parkingAreas __attribute__((swift_name("parkingAreas")));
@property (readonly) GNCDuration *remainingTravelTime __attribute__((swift_name("remainingTravelTime")));
@property (readonly) NSArray<GNCRouteWaypoint *> *turnCommands __attribute__((swift_name("turnCommands")));
@property (readonly) int64_t updateTimestamp __attribute__((swift_name("updateTimestamp")));
@property (readonly) id<GNCVehicleConfig> vehicleConfig __attribute__((swift_name("vehicleConfig")));
@property (readonly) NSArray<GNCRouteWaypoint *> *waypoints __attribute__((swift_name("waypoints")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Route.DestinationInfo")))
@interface GNCRouteDestinationInfo : GNCFreezable
- (instancetype)initWithType:(NSString *)type location:(GNCLatLng *)location tags:(NSDictionary<NSString *, id> *)tags destinationReachedDistanceMeters:(GNCDouble * _Nullable)destinationReachedDistanceMeters __attribute__((swift_name("init(type:location:tags:destinationReachedDistanceMeters:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCRouteDestinationInfo *)doCopyType:(NSString *)type location:(GNCLatLng *)location tags:(NSDictionary<NSString *, id> *)tags destinationReachedDistanceMeters:(GNCDouble * _Nullable)destinationReachedDistanceMeters __attribute__((swift_name("doCopy(type:location:tags:destinationReachedDistanceMeters:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCDouble * _Nullable destinationReachedDistanceMeters __attribute__((swift_name("destinationReachedDistanceMeters")));
@property (readonly) GNCLatLng *location __attribute__((swift_name("location")));
@property (readonly) NSDictionary<NSString *, id> *tags __attribute__((swift_name("tags")));
@property (readonly) NSString *type __attribute__((swift_name("type")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Route.Enforcement")))
@interface GNCRouteEnforcement : GNCFreezable
- (instancetype)initWithType:(GNCRouteEnforcementType *)type speedLimit:(GNCSpeed * _Nullable)speedLimit position:(GNCLatLng *)position warningLine:(NSArray<GNCLatLng *> *)warningLine associatedWaypointIndex:(int32_t)associatedWaypointIndex __attribute__((swift_name("init(type:speedLimit:position:warningLine:associatedWaypointIndex:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCRouteEnforcement *)doCopyType:(GNCRouteEnforcementType *)type speedLimit:(GNCSpeed * _Nullable)speedLimit position:(GNCLatLng *)position warningLine:(NSArray<GNCLatLng *> *)warningLine associatedWaypointIndex:(int32_t)associatedWaypointIndex __attribute__((swift_name("doCopy(type:speedLimit:position:warningLine:associatedWaypointIndex:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t associatedWaypointIndex __attribute__((swift_name("associatedWaypointIndex")));
@property (readonly) GNCLatLng *position __attribute__((swift_name("position")));
@property (readonly) GNCSpeed * _Nullable speedLimit __attribute__((swift_name("speedLimit")));
@property (readonly) GNCRouteEnforcementType *type __attribute__((swift_name("type")));
@property (readonly) NSArray<GNCLatLng *> *warningLine __attribute__((swift_name("warningLine")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Route.EnforcementType")))
@interface GNCRouteEnforcementType : GNCKotlinEnum<GNCRouteEnforcementType *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCRouteEnforcementType *maxSpeed __attribute__((swift_name("maxSpeed")));
@property (class, readonly) GNCRouteEnforcementType *trafficSignals __attribute__((swift_name("trafficSignals")));
+ (GNCKotlinArray<GNCRouteEnforcementType *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Route.FuelStation")))
@interface GNCRouteFuelStation : GNCFreezable <GNCRoutable>
- (instancetype)initWithPosition:(GNCLatLng *)position name:(NSString *)name distance:(GNCLength *)distance types:(NSArray<GNCRouteFuelStationType *> *)types __attribute__((swift_name("init(position:name:distance:types:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCRouteFuelStation *)doCopyPosition:(GNCLatLng *)position name:(NSString *)name distance:(GNCLength *)distance types:(NSArray<GNCRouteFuelStationType *> *)types __attribute__((swift_name("doCopy(position:name:distance:types:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString * _Nullable destinationStreetName __attribute__((swift_name("destinationStreetName")));
@property (readonly) GNCLength *distance __attribute__((swift_name("distance")));
@property (readonly) NSString *id __attribute__((swift_name("id")));
@property (readonly) NSString *label __attribute__((swift_name("label")));
@property (readonly) GNCLatLng *latLng __attribute__((swift_name("latLng")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) GNCLatLng *position __attribute__((swift_name("position")));
@property (readonly) NSArray<GNCRouteFuelStationType *> *types __attribute__((swift_name("types")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Route.FuelStationType")))
@interface GNCRouteFuelStationType : GNCKotlinEnum<GNCRouteFuelStationType *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCRouteFuelStationType *fuel __attribute__((swift_name("fuel")));
@property (class, readonly) GNCRouteFuelStationType *electric __attribute__((swift_name("electric")));
+ (GNCKotlinArray<GNCRouteFuelStationType *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Route.ParkingArea")))
@interface GNCRouteParkingArea : GNCFreezable <GNCRoutable>
- (instancetype)initWithName:(NSString * _Nullable)name position:(GNCLatLng *)position liableToFee:(GNCBoolean * _Nullable)liableToFee parkingType:(GNCRouteParkingAreaType *)parkingType distanceToDestination:(GNCLength *)distanceToDestination __attribute__((swift_name("init(name:position:liableToFee:parkingType:distanceToDestination:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCRouteParkingArea *)doCopyName:(NSString * _Nullable)name position:(GNCLatLng *)position liableToFee:(GNCBoolean * _Nullable)liableToFee parkingType:(GNCRouteParkingAreaType *)parkingType distanceToDestination:(GNCLength *)distanceToDestination __attribute__((swift_name("doCopy(name:position:liableToFee:parkingType:distanceToDestination:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString * _Nullable destinationStreetName __attribute__((swift_name("destinationStreetName")));
@property (readonly) GNCLength *distanceToDestination __attribute__((swift_name("distanceToDestination")));
@property (readonly) NSString *id __attribute__((swift_name("id")));
@property (readonly) NSString *label __attribute__((swift_name("label")));
@property (readonly) GNCLatLng *latLng __attribute__((swift_name("latLng")));
@property (readonly) GNCBoolean * _Nullable liableToFee __attribute__((swift_name("liableToFee")));
@property (readonly) NSString * _Nullable name __attribute__((swift_name("name")));
@property (readonly) GNCRouteParkingAreaType *parkingType __attribute__((swift_name("parkingType")));
@property (readonly) GNCLatLng *position __attribute__((swift_name("position")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Route.ParkingAreaType")))
@interface GNCRouteParkingAreaType : GNCKotlinEnum<GNCRouteParkingAreaType *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCRouteParkingAreaType *unknown __attribute__((swift_name("unknown")));
@property (class, readonly) GNCRouteParkingAreaType *surface __attribute__((swift_name("surface")));
@property (class, readonly) GNCRouteParkingAreaType *underground __attribute__((swift_name("underground")));
@property (class, readonly) GNCRouteParkingAreaType *multiStorey __attribute__((swift_name("multiStorey")));
@property (class, readonly) GNCRouteParkingAreaType *rooftop __attribute__((swift_name("rooftop")));
+ (GNCKotlinArray<GNCRouteParkingAreaType *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Route.Segment")))
@interface GNCRouteSegment : GNCFreezable
- (instancetype)initWithSegment:(GNCRouteSegment *)segment __attribute__((swift_name("init(segment:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithIndex:(int32_t)index start:(GNCRouteWaypoint *)start end:(GNCRouteWaypoint *)end __attribute__((swift_name("init(index:start:end:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCRouteSegment *)doCopyIndex:(int32_t)index start:(GNCRouteWaypoint *)start end:(GNCRouteWaypoint *)end __attribute__((swift_name("doCopy(index:start:end:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCRouteWaypoint *end __attribute__((swift_name("end")));
@property (readonly) int32_t index __attribute__((swift_name("index")));
@property (readonly) GNCRouteWaypoint *start __attribute__((swift_name("start")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Route.Waypoint")))
@interface GNCRouteWaypoint : GNCFreezable
- (instancetype)initWithLatLng:(GNCLatLng *)latLng __attribute__((swift_name("init(latLng:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithAnticipatedSpeed:(GNCSpeed *)anticipatedSpeed __attribute__((swift_name("init(anticipatedSpeed:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithWaypoint:(GNCRouteWaypoint *)waypoint __attribute__((swift_name("init(waypoint:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithLatLng:(GNCLatLng *)latLng turnInfo:(GNCTurnInfo * _Nullable)turnInfo laneInfo:(GNCLaneInfo * _Nullable)laneInfo tags:(NSDictionary<NSString *, id> *)tags reached:(BOOL)reached anticipatedSpeed:(GNCSpeed * _Nullable)anticipatedSpeed speedLimit:(GNCSpeed * _Nullable)speedLimit roadClass:(GNCRoadClass *)roadClass gpsQuality:(GNCRouteWaypointGpsQuality *)gpsQuality level:(GNCInt * _Nullable)level __attribute__((swift_name("init(latLng:turnInfo:laneInfo:tags:reached:anticipatedSpeed:speedLimit:roadClass:gpsQuality:level:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCRouteWaypoint *)doCopyLatLng:(GNCLatLng *)latLng turnInfo:(GNCTurnInfo * _Nullable)turnInfo laneInfo:(GNCLaneInfo * _Nullable)laneInfo tags:(NSDictionary<NSString *, id> *)tags reached:(BOOL)reached anticipatedSpeed:(GNCSpeed * _Nullable)anticipatedSpeed speedLimit:(GNCSpeed * _Nullable)speedLimit roadClass:(GNCRoadClass *)roadClass gpsQuality:(GNCRouteWaypointGpsQuality *)gpsQuality level:(GNCInt * _Nullable)level __attribute__((swift_name("doCopy(latLng:turnInfo:laneInfo:tags:reached:anticipatedSpeed:speedLimit:roadClass:gpsQuality:level:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCSpeed * _Nullable anticipatedSpeed __attribute__((swift_name("anticipatedSpeed")));
@property (readonly) GNCRouteWaypointGpsQuality *gpsQuality __attribute__((swift_name("gpsQuality")));
@property (readonly) GNCLaneInfo * _Nullable laneInfo __attribute__((swift_name("laneInfo"))) __attribute__((deprecated("Will be removed in future versions. Use [LaneInfo] found in [Maneuver] instead.")));
@property (readonly) GNCLatLng *latLng __attribute__((swift_name("latLng")));
@property (readonly) GNCInt * _Nullable level __attribute__((swift_name("level")));
@property (readonly) BOOL reached __attribute__((swift_name("reached"))) __attribute__((deprecated("Will be removed in future versions")));
@property (readonly) GNCRoadClass *roadClass __attribute__((swift_name("roadClass")));
@property (readonly) GNCSpeed * _Nullable speedLimit __attribute__((swift_name("speedLimit")));
@property (readonly) NSDictionary<NSString *, id> *tags __attribute__((swift_name("tags")));
@property (readonly) GNCTurnInfo * _Nullable turnInfo __attribute__((swift_name("turnInfo"))) __attribute__((deprecated("Will be removed in future versions. Use [TurnInfo] found in [Maneuver] instead.")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Route.WaypointGpsQuality")))
@interface GNCRouteWaypointGpsQuality : GNCKotlinEnum<GNCRouteWaypointGpsQuality *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCRouteWaypointGpsQuality *good __attribute__((swift_name("good")));
@property (class, readonly) GNCRouteWaypointGpsQuality *poor __attribute__((swift_name("poor")));
@property (class, readonly) GNCRouteWaypointGpsQuality *useless __attribute__((swift_name("useless")));
@property (class, readonly) GNCRouteWaypointGpsQuality *beaconOnly __attribute__((swift_name("beaconOnly")));
@property (class, readonly) GNCRouteWaypointGpsQuality *unknown __attribute__((swift_name("unknown")));
+ (GNCKotlinArray<GNCRouteWaypointGpsQuality *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RouteData")))
@interface GNCRouteData : GNCFreezable
- (instancetype)initWithDuration:(GNCDuration *)duration distance:(GNCLength *)distance __attribute__((swift_name("init(duration:distance:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCRouteData *)doCopyDuration:(GNCDuration *)duration distance:(GNCLength *)distance __attribute__((swift_name("doCopy(duration:distance:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCLength *distance __attribute__((swift_name("distance")));
@property (readonly) GNCDuration *duration __attribute__((swift_name("duration")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TurnCommand")))
@interface GNCTurnCommand : GNCKotlinEnum<GNCTurnCommand *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCTurnCommandCompanion *companion __attribute__((swift_name("companion")));
@property (class, readonly) GNCTurnCommand *unknown __attribute__((swift_name("unknown")));
@property (class, readonly) GNCTurnCommand *straight __attribute__((swift_name("straight")));
@property (class, readonly) GNCTurnCommand *left __attribute__((swift_name("left")));
@property (class, readonly) GNCTurnCommand *slightleft __attribute__((swift_name("slightleft")));
@property (class, readonly) GNCTurnCommand *sharpleft __attribute__((swift_name("sharpleft")));
@property (class, readonly) GNCTurnCommand *right __attribute__((swift_name("right")));
@property (class, readonly) GNCTurnCommand *slightright __attribute__((swift_name("slightright")));
@property (class, readonly) GNCTurnCommand *sharpright __attribute__((swift_name("sharpright")));
@property (class, readonly) GNCTurnCommand *uturn __attribute__((swift_name("uturn")));
@property (class, readonly) GNCTurnCommand *roundaboutstraight __attribute__((swift_name("roundaboutstraight")));
@property (class, readonly) GNCTurnCommand *roundaboutexit __attribute__((swift_name("roundaboutexit")));
@property (class, readonly) GNCTurnCommand *roundaboutentry __attribute__((swift_name("roundaboutentry")));
@property (class, readonly) GNCTurnCommand *rampexit __attribute__((swift_name("rampexit")));
@property (class, readonly) GNCTurnCommand *rampright __attribute__((swift_name("rampright")));
@property (class, readonly) GNCTurnCommand *rampleft __attribute__((swift_name("rampleft")));
@property (class, readonly) GNCTurnCommand *rampstraight __attribute__((swift_name("rampstraight")));
@property (class, readonly) GNCTurnCommand *roundaboutexit1 __attribute__((swift_name("roundaboutexit1")));
@property (class, readonly) GNCTurnCommand *roundaboutexit2 __attribute__((swift_name("roundaboutexit2")));
@property (class, readonly) GNCTurnCommand *roundaboutexit3 __attribute__((swift_name("roundaboutexit3")));
@property (class, readonly) GNCTurnCommand *roundaboutexit4 __attribute__((swift_name("roundaboutexit4")));
@property (class, readonly) GNCTurnCommand *roundaboutexit5 __attribute__((swift_name("roundaboutexit5")));
@property (class, readonly) GNCTurnCommand *roundaboutexit6 __attribute__((swift_name("roundaboutexit6")));
@property (class, readonly) GNCTurnCommand *roundaboutexit7 __attribute__((swift_name("roundaboutexit7")));
@property (class, readonly) GNCTurnCommand *roundaboutexit8 __attribute__((swift_name("roundaboutexit8")));
@property (class, readonly) GNCTurnCommand *roundaboutexit9 __attribute__((swift_name("roundaboutexit9")));
@property (class, readonly) GNCTurnCommand *roundaboutexit10 __attribute__((swift_name("roundaboutexit10")));
@property (class, readonly) GNCTurnCommand *destination __attribute__((swift_name("destination")));
@property (class, readonly) GNCTurnCommand *gateThrough __attribute__((swift_name("gateThrough")));
@property (class, readonly) GNCTurnCommand *parkingExit __attribute__((swift_name("parkingExit")));
@property (class, readonly) GNCTurnCommand *rampUp __attribute__((swift_name("rampUp")));
@property (class, readonly) GNCTurnCommand *rampDown __attribute__((swift_name("rampDown")));
@property (class, readonly) GNCTurnCommand *none __attribute__((swift_name("none")));
+ (GNCKotlinArray<GNCTurnCommand *> *)values __attribute__((swift_name("values()")));
@property (readonly) int32_t id_ __attribute__((swift_name("id_")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TurnCommand.Companion")))
@interface GNCTurnCommandCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCTurnCommandCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) NSArray<GNCTurnCommand *> *allCases __attribute__((swift_name("allCases")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TurnInfo")))
@interface GNCTurnInfo : GNCFreezable
- (instancetype)initWithTurnCommand:(GNCTurnCommand *)turnCommand leadsToRoadClass:(GNCRoadClass *)leadsToRoadClass leadsToStreetName:(NSString * _Nullable)leadsToStreetName leadsToLevel:(GNCInt * _Nullable)leadsToLevel endOfStreet:(BOOL)endOfStreet turnCostMs:(GNCLong * _Nullable)turnCostMs turnAngle:(GNCFloat * _Nullable)turnAngle directionReferenceNames:(NSArray<NSString *> *)directionReferenceNames directionNames:(NSArray<NSString *> *)directionNames streetSide:(GNCTurnInfoStreetSide *)streetSide suppressed:(BOOL)suppressed __attribute__((swift_name("init(turnCommand:leadsToRoadClass:leadsToStreetName:leadsToLevel:endOfStreet:turnCostMs:turnAngle:directionReferenceNames:directionNames:streetSide:suppressed:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCTurnInfo *)doCopyTurnCommand:(GNCTurnCommand *)turnCommand leadsToRoadClass:(GNCRoadClass *)leadsToRoadClass leadsToStreetName:(NSString * _Nullable)leadsToStreetName leadsToLevel:(GNCInt * _Nullable)leadsToLevel endOfStreet:(BOOL)endOfStreet turnCostMs:(GNCLong * _Nullable)turnCostMs turnAngle:(GNCFloat * _Nullable)turnAngle directionReferenceNames:(NSArray<NSString *> *)directionReferenceNames directionNames:(NSArray<NSString *> *)directionNames streetSide:(GNCTurnInfoStreetSide *)streetSide suppressed:(BOOL)suppressed __attribute__((swift_name("doCopy(turnCommand:leadsToRoadClass:leadsToStreetName:leadsToLevel:endOfStreet:turnCostMs:turnAngle:directionReferenceNames:directionNames:streetSide:suppressed:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSArray<NSString *> *directionNames __attribute__((swift_name("directionNames")));
@property (readonly) NSArray<NSString *> *directionReferenceNames __attribute__((swift_name("directionReferenceNames")));
@property (readonly) BOOL endOfStreet __attribute__((swift_name("endOfStreet")));
@property (readonly) GNCInt * _Nullable leadsToLevel __attribute__((swift_name("leadsToLevel")));
@property (readonly) GNCRoadClass *leadsToRoadClass __attribute__((swift_name("leadsToRoadClass")));
@property (readonly) NSString * _Nullable leadsToStreetName __attribute__((swift_name("leadsToStreetName")));
@property (readonly) GNCTurnInfoStreetSide *streetSide __attribute__((swift_name("streetSide"))) __attribute__((deprecated("This should not be here, since it's only used to determine the side of the street for the destination")));
@property (readonly) BOOL suppressed __attribute__((swift_name("suppressed")));
@property (readonly) GNCFloat * _Nullable turnAngle __attribute__((swift_name("turnAngle")));
@property (readonly) GNCTurnCommand *turnCommand __attribute__((swift_name("turnCommand")));
@property (readonly) GNCLong * _Nullable turnCostMs __attribute__((swift_name("turnCostMs")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TurnInfo.StreetSide")))
@interface GNCTurnInfoStreetSide : GNCKotlinEnum<GNCTurnInfoStreetSide *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCTurnInfoStreetSide *none __attribute__((swift_name("none")));
@property (class, readonly) GNCTurnInfoStreetSide *left __attribute__((swift_name("left")));
@property (class, readonly) GNCTurnInfoStreetSide *right __attribute__((swift_name("right")));
+ (GNCKotlinArray<GNCTurnInfoStreetSide *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NavigationLifeCycleAnalyticsLogger")))
@interface GNCNavigationLifeCycleAnalyticsLogger : GNCBase <GNCNavigationEventHandlerOnNavigationStartedListener, GNCNavigationEventHandlerOnNavigationStoppedListener, GNCNavigationEventHandlerOnDestinationReachedListener>
- (instancetype)initWithNavigationSdk:(id<GNCNavigationSdk>)navigationSdk __attribute__((swift_name("init(navigationSdk:)"))) __attribute__((objc_designated_initializer));
- (void)addStatisticsProviderStatisticsProvider:(id<GNCStatisticsProvider>)statisticsProvider __attribute__((swift_name("addStatisticsProvider(statisticsProvider:)")));
- (void)onDestinationReachedNavigationResult:(GNCNavigationResult *)navigationResult __attribute__((swift_name("onDestinationReached(navigationResult:)")));
- (void)onNavigationStartedRoutable:(id<GNCRoutable>)routable __attribute__((swift_name("onNavigationStarted(routable:)")));
- (void)onNavigationStopped __attribute__((swift_name("onNavigationStopped()")));
@end

__attribute__((swift_name("VehicleConfig")))
@protocol GNCVehicleConfig
@required
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) GNCVehicleConfigProperties * _Nullable properties __attribute__((swift_name("properties")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GenericVehicleConfig")))
@interface GNCGenericVehicleConfig : GNCBase <GNCVehicleConfig>
- (instancetype)initWithName:(NSString *)name properties:(GNCVehicleConfigProperties * _Nullable)properties __attribute__((swift_name("init(name:properties:)"))) __attribute__((objc_designated_initializer));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) GNCVehicleConfigProperties * _Nullable properties __attribute__((swift_name("properties")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Templates")))
@interface GNCTemplates : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)templates __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCTemplates *shared __attribute__((swift_name("shared")));
@property (readonly) GNCGenericVehicleConfig *BICYCLE __attribute__((swift_name("BICYCLE")));
@property (readonly) GNCGenericVehicleConfig *BUS __attribute__((swift_name("BUS")));
@property (readonly) GNCGenericVehicleConfig *CAR __attribute__((swift_name("CAR")));
@property (readonly) GNCGenericVehicleConfig *MOTORBIKE __attribute__((swift_name("MOTORBIKE")));
@property (readonly) GNCTruckConfig *TRUCK __attribute__((swift_name("TRUCK")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TruckConfig")))
@interface GNCTruckConfig : GNCBase <GNCVehicleConfig>
- (instancetype)initWithProperties:(GNCVehicleConfigProperties * _Nullable)properties numberOfTrailers:(GNCInt * _Nullable)numberOfTrailers __attribute__((swift_name("init(properties:numberOfTrailers:)"))) __attribute__((objc_designated_initializer));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) GNCInt * _Nullable numberOfTrailers __attribute__((swift_name("numberOfTrailers")));
@property (readonly) GNCVehicleConfigProperties * _Nullable properties __attribute__((swift_name("properties")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("VehicleConfigDimensions")))
@interface GNCVehicleConfigDimensions : GNCBase
- (instancetype)initWithWidth:(GNCLength *)width height:(GNCLength *)height length:(GNCLength *)length __attribute__((swift_name("init(width:height:length:)"))) __attribute__((objc_designated_initializer));
- (GNCVehicleConfigDimensions *)doCopyWidth:(GNCLength *)width height:(GNCLength *)height length:(GNCLength *)length __attribute__((swift_name("doCopy(width:height:length:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCLength *height __attribute__((swift_name("height")));
@property (readonly) GNCLength *length __attribute__((swift_name("length")));
@property (readonly) GNCLength *width __attribute__((swift_name("width")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("VehicleConfigProperties")))
@interface GNCVehicleConfigProperties : GNCBase
- (instancetype)initWithDimensions:(GNCVehicleConfigDimensions * _Nullable)dimensions weightKg:(GNCDouble * _Nullable)weightKg additionalData:(NSDictionary<NSString *, NSString *> *)additionalData __attribute__((swift_name("init(dimensions:weightKg:additionalData:)"))) __attribute__((objc_designated_initializer));
- (GNCVehicleConfigProperties *)doCopyDimensions:(GNCVehicleConfigDimensions * _Nullable)dimensions weightKg:(GNCDouble * _Nullable)weightKg additionalData:(NSDictionary<NSString *, NSString *> *)additionalData __attribute__((swift_name("doCopy(dimensions:weightKg:additionalData:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSDictionary<NSString *, NSString *> *additionalData __attribute__((swift_name("additionalData")));
@property (readonly) GNCVehicleConfigDimensions * _Nullable dimensions __attribute__((swift_name("dimensions")));
@property (readonly) GNCDouble * _Nullable weightKg __attribute__((swift_name("weightKg")));
@end

__attribute__((swift_name("Executor")))
@protocol GNCExecutor
@required
- (void)executeBlock:(void (^)(void))block __attribute__((swift_name("execute(block:)")));
- (id<GNCExecutorFuture>)executeDelayedDelay:(GNCDuration *)delay block:(void (^)(void))block __attribute__((swift_name("executeDelayed(delay:block:)")));
- (void)runOnUiThreadBlock:(void (^)(void))block __attribute__((swift_name("runOnUiThread(block:)"))) __attribute__((deprecated("Will be removed soon")));
- (id<GNCExecutorFuture>)scheduleUpdateRate:(GNCDuration *)updateRate block:(void (^)(void))block __attribute__((swift_name("schedule(updateRate:block:)")));
@end

__attribute__((swift_name("ExecutorFuture")))
@protocol GNCExecutorFuture
@required
- (void)cancel __attribute__((swift_name("cancel()")));
@end

__attribute__((swift_name("TimeProvider")))
@protocol GNCTimeProvider
@required
@property (readonly) int64_t currentTimeMillis __attribute__((swift_name("currentTimeMillis")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FoundationTimeProvider")))
@interface GNCFoundationTimeProvider : GNCBase <GNCTimeProvider>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property (readonly) int64_t currentTimeMillis __attribute__((swift_name("currentTimeMillis")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OperationQueueExecutor")))
@interface GNCOperationQueueExecutor : GNCBase <GNCExecutor>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)executeBlock:(void (^)(void))block __attribute__((swift_name("execute(block:)")));
- (id<GNCExecutorFuture>)executeDelayedDelay:(GNCDuration *)delay block:(void (^)(void))block __attribute__((swift_name("executeDelayed(delay:block:)")));
- (void)runOnUiThreadBlock:(void (^)(void))block __attribute__((swift_name("runOnUiThread(block:)"))) __attribute__((deprecated("Overrides deprecated member in 'net.graphmasters.multiplatform.core.Executor'. Will be removed soon")));
- (id<GNCExecutorFuture>)scheduleUpdateRate:(GNCDuration *)updateRate block:(void (^)(void))block __attribute__((swift_name("schedule(updateRate:block:)")));
@end

__attribute__((swift_name("Serializable")))
@protocol GNCSerializable
@required
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CLLocationConverter")))
@interface GNCCLLocationConverter : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)cLLocationConverter __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCCLLocationConverter *shared __attribute__((swift_name("shared")));
- (CLLocation *)convertLocation:(GNCLocation *)location __attribute__((swift_name("convert(location:)")));
- (GNCLocation *)convertClLocation:(CLLocation *)clLocation __attribute__((swift_name("convert(clLocation:)")));
- (GNCLocation *)convertClLocation:(CLLocation *)clLocation oldLocation:(GNCLocation * _Nullable)oldLocation __attribute__((swift_name("convert(clLocation:oldLocation:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CLLocationProvider")))
@interface GNCCLLocationProvider : GNCBase <GNCLocationProvider>
- (instancetype)initWithLocationManager:(CLLocationManager * _Nullable)locationManager __attribute__((swift_name("init(locationManager:)"))) __attribute__((objc_designated_initializer));
- (void)addLocationUpdateListenerLocationUpdateListener:(id<GNCLocationProviderLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("addLocationUpdateListener(locationUpdateListener:)")));
- (void)removeLocationUpdateListenerLocationUpdateListener:(id<GNCLocationProviderLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("removeLocationUpdateListener(locationUpdateListener:)")));
- (void)startLocationUpdates __attribute__((swift_name("startLocationUpdates()")));
- (void)stopLocationUpdates __attribute__((swift_name("stopLocationUpdates()")));
@property (readonly) BOOL active __attribute__((swift_name("active")));
@property (readonly) id<CLLocationManagerDelegate> delegate __attribute__((swift_name("delegate")));
@property (readonly) GNCLocation * _Nullable lastKnownLocation __attribute__((swift_name("lastKnownLocation")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IteratingLocationProvider")))
@interface GNCIteratingLocationProvider : GNCBase <GNCLocationProvider>
- (instancetype)initWithLocations:(NSArray<GNCLocation *> *)locations executor:(id<GNCExecutor>)executor __attribute__((swift_name("init(locations:executor:)"))) __attribute__((objc_designated_initializer));
- (void)addLocationUpdateListenerLocationUpdateListener:(id<GNCLocationProviderLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("addLocationUpdateListener(locationUpdateListener:)")));
- (void)removeLocationUpdateListenerLocationUpdateListener:(id<GNCLocationProviderLocationUpdateListener>)locationUpdateListener __attribute__((swift_name("removeLocationUpdateListener(locationUpdateListener:)")));
- (void)startLocationUpdates __attribute__((swift_name("startLocationUpdates()")));
- (void)stopLocationUpdates __attribute__((swift_name("stopLocationUpdates()")));
@property (readonly) BOOL active __attribute__((swift_name("active")));
@property GNCLocation * _Nullable lastKnownLocation __attribute__((swift_name("lastKnownLocation")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Location.Companion")))
@interface GNCLocationCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCLocationCompanion *shared __attribute__((swift_name("shared")));
@end

__attribute__((swift_name("LocationProviderLocationUpdateListener")))
@protocol GNCLocationProviderLocationUpdateListener
@required
- (void)onLocationUpdatedLocation:(GNCLocation *)location __attribute__((swift_name("onLocationUpdated(location:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GMLog")))
@interface GNCGMLog : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)gMLog __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCGMLog *shared __attribute__((swift_name("shared")));
- (void)appendLogger:(id<GNCLogger>)logger __attribute__((swift_name("append(logger:)")));
- (void)dMessage:(NSString *)message __attribute__((swift_name("d(message:)")));
- (void)dTag:(NSString * _Nullable)tag message:(NSString *)message __attribute__((swift_name("d(tag:message:)")));
- (void)eMessage:(NSString *)message __attribute__((swift_name("e(message:)")));
- (void)eTag:(NSString * _Nullable)tag message:(NSString *)message __attribute__((swift_name("e(tag:message:)")));
- (void)eTag:(NSString * _Nullable)tag throwable:(GNCKotlinThrowable *)throwable __attribute__((swift_name("e(tag:throwable:)")));
- (void)eThrowable:(GNCKotlinThrowable *)throwable __attribute__((swift_name("e(throwable:)")));
- (void)iMessage:(NSString *)message __attribute__((swift_name("i(message:)")));
- (void)iTag:(NSString * _Nullable)tag message:(NSString *)message __attribute__((swift_name("i(tag:message:)")));
- (void)vMessage:(NSString *)message __attribute__((swift_name("v(message:)")));
- (void)vTag:(NSString * _Nullable)tag message:(NSString *)message __attribute__((swift_name("v(tag:message:)")));
- (void)wMessage:(NSString *)message __attribute__((swift_name("w(message:)")));
- (void)wTag:(NSString * _Nullable)tag message:(NSString *)message __attribute__((swift_name("w(tag:message:)")));
@end

__attribute__((swift_name("Logger")))
@protocol GNCLogger
@required
- (void)dTag:(NSString * _Nullable)tag msg:(NSString *)msg __attribute__((swift_name("d(tag:msg:)")));
- (void)eTag:(NSString * _Nullable)tag msg:(NSString *)msg __attribute__((swift_name("e(tag:msg:)")));
- (void)eTag:(NSString * _Nullable)tag throwable:(GNCKotlinThrowable *)throwable __attribute__((swift_name("e(tag:throwable:)")));
- (void)iTag:(NSString * _Nullable)tag msg:(NSString *)msg __attribute__((swift_name("i(tag:msg:)")));
- (void)vTag:(NSString * _Nullable)tag msg:(NSString *)msg __attribute__((swift_name("v(tag:msg:)")));
- (void)wTag:(NSString * _Nullable)tag msg:(NSString *)msg __attribute__((swift_name("w(tag:msg:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PrintLogger")))
@interface GNCPrintLogger : GNCBase <GNCLogger>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)dTag:(NSString * _Nullable)tag msg:(NSString *)msg __attribute__((swift_name("d(tag:msg:)")));
- (void)eTag:(NSString * _Nullable)tag msg:(NSString *)msg __attribute__((swift_name("e(tag:msg:)")));
- (void)eTag:(NSString * _Nullable)tag throwable:(GNCKotlinThrowable *)throwable __attribute__((swift_name("e(tag:throwable:)")));
- (void)iTag:(NSString * _Nullable)tag msg:(NSString *)msg __attribute__((swift_name("i(tag:msg:)")));
- (void)vTag:(NSString * _Nullable)tag msg:(NSString *)msg __attribute__((swift_name("v(tag:msg:)")));
- (void)wTag:(NSString * _Nullable)tag msg:(NSString *)msg __attribute__((swift_name("w(tag:msg:)")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Duration")))
@interface GNCDuration : GNCBase <GNCSerializable, GNCKotlinComparable>
@property (class, readonly, getter=companion) GNCDurationCompanion *companion __attribute__((swift_name("companion")));
- (int32_t)compareToOther:(GNCDuration *)other __attribute__((swift_name("compareTo(other:)")));
- (GNCDuration *)doCopyMilliseconds:(int64_t)milliseconds __attribute__((swift_name("doCopy(milliseconds:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (int64_t)hours __attribute__((swift_name("hours()"))) __attribute__((deprecated("Use wholeHours() instead.")));
- (int64_t)milliseconds __attribute__((swift_name("milliseconds()"))) __attribute__((deprecated("Will be removed in the future")));
- (GNCDuration *)minusOther:(GNCDuration *)other __attribute__((swift_name("minus(other:)")));
- (int64_t)minutes __attribute__((swift_name("minutes()"))) __attribute__((deprecated("Use wholeMinutes() instead.")));
- (GNCDuration *)plusOther:(GNCDuration *)other __attribute__((swift_name("plus(other:)")));
- (int64_t)seconds __attribute__((swift_name("seconds()"))) __attribute__((deprecated("Will be removed in the future")));
- (NSString *)description __attribute__((swift_name("description()")));
- (int64_t)wholeHours __attribute__((swift_name("wholeHours()"))) __attribute__((deprecated("Will be removed in the future")));
- (int64_t)wholeMilliseconds __attribute__((swift_name("wholeMilliseconds()"))) __attribute__((deprecated("Will be removed in the future")));
- (int64_t)wholeMinutes __attribute__((swift_name("wholeMinutes()"))) __attribute__((deprecated("Will be removed in the future")));
- (int64_t)wholeSeconds __attribute__((swift_name("wholeSeconds()"))) __attribute__((deprecated("Will be removed in the future")));
@property (readonly, getter=milliseconds_) int64_t milliseconds __attribute__((swift_name("milliseconds")));
@property (readonly, getter=wholeHours_) int64_t wholeHours __attribute__((swift_name("wholeHours")));
@property (readonly, getter=wholeMinutes_) int64_t wholeMinutes __attribute__((swift_name("wholeMinutes")));
@property (readonly, getter=wholeSeconds_) int64_t wholeSeconds __attribute__((swift_name("wholeSeconds")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Duration.Companion")))
@interface GNCDurationCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCDurationCompanion *shared __attribute__((swift_name("shared")));
- (GNCDuration *)addFirst:(GNCDuration *)first second:(GNCDuration *)second __attribute__((swift_name("add(first:second:)"))) __attribute__((deprecated("Use default addition.")));
- (GNCDuration *)fromHoursHours:(int64_t)hours __attribute__((swift_name("fromHours(hours:)")));
- (GNCDuration *)fromMillisecondsMilliseconds:(int64_t)milliseconds __attribute__((swift_name("fromMilliseconds(milliseconds:)")));
- (GNCDuration *)fromMinutesMinutes:(int64_t)minutes __attribute__((swift_name("fromMinutes(minutes:)")));
- (GNCDuration *)fromSecondsSeconds:(int64_t)seconds __attribute__((swift_name("fromSeconds(seconds:)")));
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
- (GNCDuration *)subtractFirst:(GNCDuration *)first second:(GNCDuration *)second __attribute__((swift_name("subtract(first:second:)"))) __attribute__((deprecated("Use default subtraction.")));
@property (readonly) GNCDuration *ZERO __attribute__((swift_name("ZERO")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Length")))
@interface GNCLength : GNCBase <GNCKotlinComparable, GNCSerializable>
@property (class, readonly, getter=companion) GNCLengthCompanion *companion __attribute__((swift_name("companion")));
- (int32_t)compareToOther:(GNCLength *)other __attribute__((swift_name("compareTo(other:)")));
- (GNCLength *)doCopyMeters:(double)meters __attribute__((swift_name("doCopy(meters:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (double)feet __attribute__((swift_name("feet()"))) __attribute__((deprecated("Will be removed in the future")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (double)kilometers __attribute__((swift_name("kilometers()"))) __attribute__((deprecated("Will be removed in the future")));
- (double)meters __attribute__((swift_name("meters()"))) __attribute__((deprecated("Will be removed in the future")));
- (double)miles __attribute__((swift_name("miles()"))) __attribute__((deprecated("Will be removed in the future")));
- (GNCLength *)minusOther:(GNCLength *)other __attribute__((swift_name("minus(other:)")));
- (GNCLength *)plusOther:(GNCLength *)other __attribute__((swift_name("plus(other:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly, getter=feet_) double feet __attribute__((swift_name("feet")));
@property (readonly, getter=kilometers_) double kilometers __attribute__((swift_name("kilometers")));
@property (readonly, getter=meters_) double meters __attribute__((swift_name("meters")));
@property (readonly, getter=miles_) double miles __attribute__((swift_name("miles")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Length.Companion")))
@interface GNCLengthCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCLengthCompanion *shared __attribute__((swift_name("shared")));
- (GNCLength *)addFirst:(GNCLength *)first second:(GNCLength *)second __attribute__((swift_name("add(first:second:)")));
- (GNCLength *)fromKilometersKilometers:(double)kilometers __attribute__((swift_name("fromKilometers(kilometers:)")));
- (GNCLength *)fromMetersMeters:(double)meters __attribute__((swift_name("fromMeters(meters:)")));
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
- (GNCLength *)subtractFirst:(GNCLength *)first second:(GNCLength *)second __attribute__((swift_name("subtract(first:second:)")));
@property (readonly) double SECONDS_TO_MILLISECONDS __attribute__((swift_name("SECONDS_TO_MILLISECONDS")));
@property (readonly) GNCLength *ZERO __attribute__((swift_name("ZERO")));
@end

__attribute__((swift_name("MeasurementSystemProvider")))
@protocol GNCMeasurementSystemProvider
@required
- (GNCMeasurementSystem *)getMeasurementSystem __attribute__((swift_name("getMeasurementSystem()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocaleMeasurementSystemProvider")))
@interface GNCLocaleMeasurementSystemProvider : GNCBase <GNCMeasurementSystemProvider>
- (instancetype)initWithLocale:(NSLocale *)locale __attribute__((swift_name("init(locale:)"))) __attribute__((objc_designated_initializer));
- (GNCMeasurementSystem *)getMeasurementSystem __attribute__((swift_name("getMeasurementSystem()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeasurementSystem")))
@interface GNCMeasurementSystem : GNCKotlinEnum<GNCMeasurementSystem *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCMeasurementSystem *metric __attribute__((swift_name("metric")));
@property (class, readonly) GNCMeasurementSystem *imperial __attribute__((swift_name("imperial")));
+ (GNCKotlinArray<GNCMeasurementSystem *> *)values __attribute__((swift_name("values()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Speed")))
@interface GNCSpeed : GNCBase <GNCSerializable>
@property (class, readonly, getter=companion) GNCSpeedCompanion *companion __attribute__((swift_name("companion")));
- (int32_t)compareToOther:(GNCSpeed *)other __attribute__((swift_name("compareTo(other:)")));
- (GNCSpeed *)doCopyMs:(double)ms __attribute__((swift_name("doCopy(ms:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (double)kmh __attribute__((swift_name("kmh()"))) __attribute__((deprecated("Will be removed in the future")));
- (double)mph __attribute__((swift_name("mph()"))) __attribute__((deprecated("Will be removed in the future")));
- (double)ms __attribute__((swift_name("ms()"))) __attribute__((deprecated("Will be removed in the future")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly, getter=kmh_) double kmh __attribute__((swift_name("kmh")));
@property (readonly, getter=mph_) double mph __attribute__((swift_name("mph")));
@property (readonly, getter=ms_) double ms __attribute__((swift_name("ms")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Speed.Companion")))
@interface GNCSpeedCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCSpeedCompanion *shared __attribute__((swift_name("shared")));
- (GNCSpeed *)fromKmhKmh:(double)kmh __attribute__((swift_name("fromKmh(kmh:)")));
- (GNCSpeed *)fromMsMs:(double)ms __attribute__((swift_name("fromMs(ms:)")));
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@property (readonly) double KMH_TO_MS __attribute__((swift_name("KMH_TO_MS")));
@property (readonly) double MS_TO_MPH __attribute__((swift_name("MS_TO_MPH")));
@property (readonly) double SECONDS_TO_MILLISECONDS __attribute__((swift_name("SECONDS_TO_MILLISECONDS")));
@property (readonly) GNCSpeed *ZERO __attribute__((swift_name("ZERO")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Timestamp")))
@interface GNCTimestamp : GNCFreezable <GNCSerializable>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCTimestampCompanion *companion __attribute__((swift_name("companion")));
- (int32_t)compareToOther:(GNCTimestamp *)other __attribute__((swift_name("compareTo(other:)")));
- (GNCTimestamp *)doCopyMillisecondsSince1970:(int64_t)millisecondsSince1970 __attribute__((swift_name("doCopy(millisecondsSince1970:)")));
- (GNCDuration *)deltaOther:(GNCTimestamp *)other __attribute__((swift_name("delta(other:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (GNCTimestamp *)minusOther:(GNCDuration *)other __attribute__((swift_name("minus(other:)")));
- (GNCTimestamp *)plusOther:(GNCDuration *)other __attribute__((swift_name("plus(other:)")));
- (NSString *)description __attribute__((swift_name("description()")));
- (int64_t)wholeMilliseconds __attribute__((swift_name("wholeMilliseconds()")));
- (int64_t)wholeSeconds __attribute__((swift_name("wholeSeconds()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Timestamp.Companion")))
@interface GNCTimestampCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCTimestampCompanion *shared __attribute__((swift_name("shared")));
- (GNCTimestamp *)fromMillisecondsMilliseconds:(int64_t)milliseconds __attribute__((swift_name("fromMilliseconds(milliseconds:)")));
- (GNCTimestamp *)fromSecondsSeconds:(int64_t)seconds __attribute__((swift_name("fromSeconds(seconds:)")));
- (GNCTimestamp *)now __attribute__((swift_name("now()")));
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@property (readonly) int32_t SECONDS_TO_MILLISECONDS __attribute__((swift_name("SECONDS_TO_MILLISECONDS")));
@end

__attribute__((swift_name("AnalyticsHandler")))
@protocol GNCAnalyticsHandler
@required
- (void)postErrorThrowable:(GNCKotlinThrowable *)throwable properties:(NSDictionary<NSString *, id> *)properties __attribute__((swift_name("postError(throwable:properties:)")));
- (void)postEventMessage:(NSString *)message properties:(NSDictionary<NSString *, id> *)properties __attribute__((swift_name("postEvent(message:properties:)")));
- (void)postStatisticsMessage:(NSString *)message statistics:(NSDictionary<NSString *, id> *)statistics __attribute__((swift_name("postStatistics(message:statistics:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GMAnalytics")))
@interface GNCGMAnalytics : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)gMAnalytics __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCGMAnalytics *shared __attribute__((swift_name("shared")));
- (void)appendAnalyticsHandler:(id<GNCAnalyticsHandler>)analyticsHandler __attribute__((swift_name("append(analyticsHandler:)")));

/**
 * @note annotations
 *   kotlin.jvm.JvmOverloads
*/
- (void)postErrorThrowable:(GNCKotlinThrowable *)throwable properties:(NSDictionary<NSString *, id> *)properties __attribute__((swift_name("postError(throwable:properties:)")));
- (void)postEventMessage:(NSString *)message __attribute__((swift_name("postEvent(message:)")));
- (void)postEventTag:(NSString *)tag message:(NSString *)message __attribute__((swift_name("postEvent(tag:message:)")));
- (void)postEventTag:(NSString * _Nullable)tag message:(NSString *)message properties:(NSDictionary<NSString *, id> *)properties __attribute__((swift_name("postEvent(tag:message:properties:)")));
- (void)postStatisticsTag:(NSString * _Nullable)tag message:(NSString *)message statistics:(NSDictionary<NSString *, id> *)statistics __attribute__((swift_name("postStatistics(tag:message:statistics:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineDispatchers")))
@interface GNCCoroutineDispatchers : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)coroutineDispatchers __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCCoroutineDispatchers *shared __attribute__((swift_name("shared")));
@property (readonly) GNCCoroutineDispatcher *Default __attribute__((swift_name("Default")));
@property (readonly) GNCCoroutineDispatcher *IO __attribute__((swift_name("IO")));
@property (readonly) GNCCoroutineDispatcher *Main __attribute__((swift_name("Main")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MainThread")))
@interface GNCMainThread : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)mainThread __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCMainThread *shared __attribute__((swift_name("shared")));
- (void)executeBlock:(void (^)(void))block __attribute__((swift_name("execute(block:)")));
- (BOOL)isCurrentThread __attribute__((swift_name("isCurrentThread()")));
@end

__attribute__((swift_name("OptimizationProblem")))
@protocol GNCOptimizationProblem
@required
@property (readonly) GNCIncrementor *evaluationCounter __attribute__((swift_name("evaluationCounter")));
@property (readonly) GNCIncrementor *iterationCounter __attribute__((swift_name("iterationCounter")));
@end

__attribute__((swift_name("AbstractOptimizationProblem")))
@interface GNCAbstractOptimizationProblem<PAIR> : GNCBase <GNCOptimizationProblem>

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (instancetype)initWithMaxEvaluations:(int32_t)maxEvaluations maxIterations:(int32_t)maxIterations __attribute__((swift_name("init(maxEvaluations:maxIterations:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCAbstractOptimizationProblemCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) GNCIncrementor *evaluationCounter __attribute__((swift_name("evaluationCounter")));
@property (readonly) GNCIncrementor *iterationCounter __attribute__((swift_name("iterationCounter")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AbstractOptimizationProblemCompanion")))
@interface GNCAbstractOptimizationProblemCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCAbstractOptimizationProblemCompanion *shared __attribute__((swift_name("shared")));
@end

__attribute__((swift_name("LeastSquaresProblemEvaluation")))
@protocol GNCLeastSquaresProblemEvaluation
@required
- (double)getCost __attribute__((swift_name("getCost()")));
- (id<GNCRealMatrix>)getCovariancesThreshold:(double)threshold __attribute__((swift_name("getCovariances(threshold:)")));
- (id<GNCRealMatrix>)getJacobian __attribute__((swift_name("getJacobian()")));
- (GNCRealVector *)getPoint __attribute__((swift_name("getPoint()")));
- (double)getRMS __attribute__((swift_name("getRMS()")));
- (GNCRealVector *)getResiduals __attribute__((swift_name("getResiduals()")));
- (GNCRealVector *)getSigmaCovarianceSingularityThreshold:(double)covarianceSingularityThreshold __attribute__((swift_name("getSigma(covarianceSingularityThreshold:)")));
@end

__attribute__((swift_name("AbstractEvaluation")))
@interface GNCAbstractEvaluation : GNCBase <GNCLeastSquaresProblemEvaluation>
- (double)getCost __attribute__((swift_name("getCost()")));
- (id<GNCRealMatrix>)getCovariancesThreshold:(double)threshold __attribute__((swift_name("getCovariances(threshold:)")));
- (double)getRMS __attribute__((swift_name("getRMS()")));
- (GNCRealVector *)getSigmaCovarianceSingularityThreshold:(double)covarianceSingularityThreshold __attribute__((swift_name("getSigma(covarianceSingularityThreshold:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DenseWeightedEvaluation")))
@interface GNCDenseWeightedEvaluation : GNCAbstractEvaluation
- (instancetype)initWithUnweighted:(id<GNCLeastSquaresProblemEvaluation>)unweighted weightSqrt:(id<GNCRealMatrix>)weightSqrt __attribute__((swift_name("init(unweighted:weightSqrt:)"))) __attribute__((objc_designated_initializer));
- (id<GNCRealMatrix>)getJacobian __attribute__((swift_name("getJacobian()")));
- (GNCRealVector *)getPoint __attribute__((swift_name("getPoint()")));
- (GNCRealVector *)getResiduals __attribute__((swift_name("getResiduals()")));
@end

__attribute__((swift_name("LeastSquaresProblem")))
@protocol GNCLeastSquaresProblem <GNCOptimizationProblem>
@required
- (id<GNCLeastSquaresProblemEvaluation>)evaluatePoint:(GNCRealVector *)point __attribute__((swift_name("evaluate(point:)")));
- (int32_t)getObservationSize __attribute__((swift_name("getObservationSize()")));
- (int32_t)getParameterSize __attribute__((swift_name("getParameterSize()")));
- (GNCRealVector *)getStart __attribute__((swift_name("getStart()")));
@end

__attribute__((swift_name("LeastSquaresAdapter")))
@interface GNCLeastSquaresAdapter : GNCBase <GNCLeastSquaresProblem>
- (instancetype)initWithProblem:(id<GNCLeastSquaresProblem>)problem __attribute__((swift_name("init(problem:)"))) __attribute__((objc_designated_initializer));
- (id<GNCLeastSquaresProblemEvaluation>)evaluatePoint:(GNCRealVector *)point __attribute__((swift_name("evaluate(point:)")));
- (int32_t)getObservationSize __attribute__((swift_name("getObservationSize()")));
- (int32_t)getParameterSize __attribute__((swift_name("getParameterSize()")));
- (GNCRealVector *)getStart __attribute__((swift_name("getStart()")));
@property (readonly) GNCIncrementor *evaluationCounter __attribute__((swift_name("evaluationCounter")));
@property (readonly) GNCIncrementor *iterationCounter __attribute__((swift_name("iterationCounter")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LeastSquaresFactory")))
@interface GNCLeastSquaresFactory : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property (class, readonly, getter=companion) GNCLeastSquaresFactoryCompanion *companion __attribute__((swift_name("companion")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LeastSquaresFactory.Companion")))
@interface GNCLeastSquaresFactoryCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCLeastSquaresFactoryCompanion *shared __attribute__((swift_name("shared")));
- (id<GNCLeastSquaresProblem>)createFunction:(id<GNCMultivariateJacobianFunction>)function observed:(GNCRealVector *)observed start:(GNCRealVector *)start weight:(id<GNCRealMatrix>)weight maxEvaluations:(int32_t)maxEvaluations maxIterations:(int32_t)maxIterations __attribute__((swift_name("create(function:observed:start:weight:maxEvaluations:maxIterations:)")));
@end

__attribute__((swift_name("LeastSquaresOptimizer")))
@protocol GNCLeastSquaresOptimizer
@required
- (id<GNCLeastSquaresOptimizerOptimum>)optimizeLeastSquaresProblem:(id<GNCLeastSquaresProblem>)leastSquaresProblem __attribute__((swift_name("optimize(leastSquaresProblem:)")));
@end

__attribute__((swift_name("LeastSquaresOptimizerOptimum")))
@protocol GNCLeastSquaresOptimizerOptimum <GNCLeastSquaresProblemEvaluation>
@required
- (int32_t)getEvaluations __attribute__((swift_name("getEvaluations()")));
- (int32_t)getIterations __attribute__((swift_name("getIterations()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LevenbergMarquardtOptimizer")))
@interface GNCLevenbergMarquardtOptimizer : GNCBase <GNCLeastSquaresOptimizer>

/**
 * @note annotations
 *   kotlin.jvm.JvmOverloads
*/
- (instancetype)initWithInitialStepBoundFactor:(double)initialStepBoundFactor costRelativeTolerance:(double)costRelativeTolerance parameterRelativeTolerance:(double)parameterRelativeTolerance orthoTolerance:(double)orthoTolerance rankingThreshold:(double)rankingThreshold __attribute__((swift_name("init(initialStepBoundFactor:costRelativeTolerance:parameterRelativeTolerance:orthoTolerance:rankingThreshold:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCLevenbergMarquardtOptimizerCompanion *companion __attribute__((swift_name("companion")));
- (id<GNCLeastSquaresOptimizerOptimum>)optimizeLeastSquaresProblem:(id<GNCLeastSquaresProblem>)leastSquaresProblem __attribute__((swift_name("optimize(leastSquaresProblem:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LevenbergMarquardtOptimizer.Companion")))
@interface GNCLevenbergMarquardtOptimizerCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCLevenbergMarquardtOptimizerCompanion *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocalLeastSquaresProblem")))
@interface GNCLocalLeastSquaresProblem : GNCAbstractOptimizationProblem<id<GNCLeastSquaresProblemEvaluation>> <GNCLeastSquaresProblem>
- (instancetype)initWithModel:(id<GNCMultivariateJacobianFunction>)model target:(GNCRealVector *)target start:(GNCRealVector *)start maxEvaluations:(int32_t)maxEvaluations maxIterations:(int32_t)maxIterations __attribute__((swift_name("init(model:target:start:maxEvaluations:maxIterations:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (instancetype)initWithMaxEvaluations:(int32_t)maxEvaluations maxIterations:(int32_t)maxIterations __attribute__((swift_name("init(maxEvaluations:maxIterations:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (id<GNCLeastSquaresProblemEvaluation>)evaluatePoint:(GNCRealVector *)point __attribute__((swift_name("evaluate(point:)")));
- (int32_t)getObservationSize __attribute__((swift_name("getObservationSize()")));
- (int32_t)getParameterSize __attribute__((swift_name("getParameterSize()")));
- (GNCRealVector *)getStart __attribute__((swift_name("getStart()")));
@end

__attribute__((swift_name("MultivariateJacobianFunction")))
@protocol GNCMultivariateJacobianFunction
@required
- (GNCPair<GNCRealVector *, id<GNCRealMatrix>> *)valuePoint:(GNCRealVector *)point __attribute__((swift_name("value(point:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OptimumImpl")))
@interface GNCOptimumImpl : GNCBase <GNCLeastSquaresOptimizerOptimum>
- (instancetype)initWithValue:(id<GNCLeastSquaresProblemEvaluation>)value evaluations:(int32_t)evaluations iterations:(int32_t)iterations __attribute__((swift_name("init(value:evaluations:iterations:)"))) __attribute__((objc_designated_initializer));
- (double)getCost __attribute__((swift_name("getCost()")));
- (id<GNCRealMatrix>)getCovariancesThreshold:(double)threshold __attribute__((swift_name("getCovariances(threshold:)")));
- (int32_t)getEvaluations __attribute__((swift_name("getEvaluations()")));
- (int32_t)getIterations __attribute__((swift_name("getIterations()")));
- (id<GNCRealMatrix>)getJacobian __attribute__((swift_name("getJacobian()")));
- (GNCRealVector *)getPoint __attribute__((swift_name("getPoint()")));
- (double)getRMS __attribute__((swift_name("getRMS()")));
- (GNCRealVector *)getResiduals __attribute__((swift_name("getResiduals()")));
- (GNCRealVector *)getSigmaCovarianceSingularityThreshold:(double)covarianceSingularityThreshold __attribute__((swift_name("getSigma(covarianceSingularityThreshold:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Precision")))
@interface GNCPrecision : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property (class, readonly, getter=companion) GNCPrecisionCompanion *companion __attribute__((swift_name("companion")));

/**
 * @note annotations
 *   kotlin.jvm.JvmOverloads
*/
- (BOOL)equalsX:(double)x y:(double)y maxUlps:(int32_t)maxUlps __attribute__((swift_name("equals(x:y:maxUlps:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Precision.Companion")))
@interface GNCPrecisionCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCPrecisionCompanion *shared __attribute__((swift_name("shared")));
@property double EPSILON __attribute__((swift_name("EPSILON")));
@property double SAFE_MIN __attribute__((swift_name("SAFE_MIN")));
@end

__attribute__((swift_name("KotlinIterator")))
@protocol GNCKotlinIterator
@required
- (BOOL)hasNext __attribute__((swift_name("hasNext()")));
- (id _Nullable)next __attribute__((swift_name("next()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Incrementor")))
@interface GNCIncrementor : GNCBase <GNCKotlinIterator>
- (instancetype)initWithStart:(int32_t)start max:(int32_t)max step:(int32_t)step cb:(id<GNCIncrementorMaxCountExceededCallback>)cb __attribute__((swift_name("init(start:max:step:cb:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCIncrementorCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)hasNext __attribute__((swift_name("hasNext()")));

/**
 * @note annotations
 *   kotlin.jvm.JvmOverloads
*/
- (void)incrementNTimes:(int32_t)nTimes __attribute__((swift_name("increment(nTimes:)")));
- (GNCInt *)next __attribute__((swift_name("next()")));
- (GNCIncrementor *)withCallbackCb:(id<GNCIncrementorMaxCountExceededCallback>)cb __attribute__((swift_name("withCallback(cb:)")));
- (GNCIncrementor *)withMaximalCountMax:(int32_t)max __attribute__((swift_name("withMaximalCount(max:)")));
@property (readonly) int32_t count __attribute__((swift_name("count")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Incrementor.Companion")))
@interface GNCIncrementorCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCIncrementorCompanion *shared __attribute__((swift_name("shared")));
- (GNCIncrementor *)create __attribute__((swift_name("create()")));
@end

__attribute__((swift_name("IncrementorMaxCountExceededCallback")))
@protocol GNCIncrementorMaxCountExceededCallback
@required
- (void)triggerMaximalCount:(int32_t)maximalCount __attribute__((swift_name("trigger(maximalCount:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MatrixUtils")))
@interface GNCMatrixUtils : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property (class, readonly, getter=companion) GNCMatrixUtilsCompanion *companion __attribute__((swift_name("companion")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MatrixUtils.Companion")))
@interface GNCMatrixUtilsCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCMatrixUtilsCompanion *shared __attribute__((swift_name("shared")));
- (void)checkAdditionCompatibleLeft:(id<GNCAnyMatrix>)left right:(id<GNCAnyMatrix>)right __attribute__((swift_name("checkAdditionCompatible(left:right:)")));
- (void)checkColumnIndexM:(id<GNCAnyMatrix>)m column:(int32_t)column __attribute__((swift_name("checkColumnIndex(m:column:)")));
- (void)checkMatrixIndexM:(id<GNCAnyMatrix>)m row:(int32_t)row column:(int32_t)column __attribute__((swift_name("checkMatrixIndex(m:row:column:)")));
- (void)checkMultiplicationCompatibleLeft:(id<GNCAnyMatrix>)left right:(id<GNCAnyMatrix>)right __attribute__((swift_name("checkMultiplicationCompatible(left:right:)")));
- (void)checkRowIndexM:(id<GNCAnyMatrix>)m row:(int32_t)row __attribute__((swift_name("checkRowIndex(m:row:)")));
- (void)checkSubMatrixIndexM:(id<GNCAnyMatrix>)m startRow:(int32_t)startRow endRow:(int32_t)endRow startColumn:(int32_t)startColumn endColumn:(int32_t)endColumn __attribute__((swift_name("checkSubMatrixIndex(m:startRow:endRow:startColumn:endColumn:)")));
- (void)checkSubtractionCompatibleLeft:(id<GNCAnyMatrix>)left right:(id<GNCAnyMatrix>)right __attribute__((swift_name("checkSubtractionCompatible(left:right:)")));
- (id<GNCRealMatrix>)createRealIdentityMatrixDimension:(int32_t)dimension __attribute__((swift_name("createRealIdentityMatrix(dimension:)")));
@end

__attribute__((swift_name("Pair")))
@interface GNCPair<K, V> : GNCBase
- (instancetype)initWithFirst:(K _Nullable)first second:(V _Nullable)second __attribute__((swift_name("init(first:second:)"))) __attribute__((objc_designated_initializer));
@property (readonly) K _Nullable first __attribute__((swift_name("first")));
@property (readonly) V _Nullable second __attribute__((swift_name("second")));
@end

__attribute__((swift_name("AnyMatrix")))
@protocol GNCAnyMatrix
@required
- (int32_t)getColumnDimension __attribute__((swift_name("getColumnDimension()")));
- (int32_t)getRowDimension __attribute__((swift_name("getRowDimension()")));
- (BOOL)isSquare __attribute__((swift_name("isSquare()")));
@end

__attribute__((swift_name("RealMatrix")))
@protocol GNCRealMatrix <GNCAnyMatrix>
@required
- (id<GNCRealMatrix>)addM:(id<GNCRealMatrix>)m __attribute__((swift_name("add(m:)")));
- (void)doCopySubMatrixStartRow:(int32_t)startRow endRow:(int32_t)endRow startColumn:(int32_t)startColumn endColumn:(int32_t)endColumn destination:(GNCKotlinArray<GNCKotlinDoubleArray *> *)destination __attribute__((swift_name("doCopySubMatrix(startRow:endRow:startColumn:endColumn:destination:)")));
- (id<GNCRealMatrix>)createMatrixRowDimension:(int32_t)rowDimension columnDimension:(int32_t)columnDimension __attribute__((swift_name("createMatrix(rowDimension:columnDimension:)")));
- (GNCKotlinArray<GNCKotlinDoubleArray *> *)getData __attribute__((swift_name("getData()")));
- (double)getEntryRow:(int32_t)row column:(int32_t)column __attribute__((swift_name("getEntry(row:column:)")));
- (id<GNCRealMatrix>)multiplyM:(id<GNCRealMatrix>)m __attribute__((swift_name("multiply(m:)")));
- (GNCRealVector *)operateV:(GNCRealVector *)v __attribute__((swift_name("operate(v:)")));
- (id<GNCRealMatrix>)scalarMultiplyD:(double)d __attribute__((swift_name("scalarMultiply(d:)")));
- (void)setEntryRow:(int32_t)row column:(int32_t)column value:(double)value __attribute__((swift_name("setEntry(row:column:value:)")));
- (id<GNCRealMatrix>)subtractM:(id<GNCRealMatrix>)m __attribute__((swift_name("subtract(m:)")));
- (id<GNCRealMatrix>)transpose __attribute__((swift_name("transpose()")));
- (double)walkInOptimizedOrderVisitor:(id<GNCRealMatrixPreservingVisitor>)visitor __attribute__((swift_name("walkInOptimizedOrder(visitor:)")));
@end

__attribute__((swift_name("AbstractRealMatrix")))
@interface GNCAbstractRealMatrix : GNCBase <GNCRealMatrix>
- (instancetype)initWithRows:(int32_t)rows columns:(int32_t)columns __attribute__((swift_name("init(rows:columns:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCAbstractRealMatrixCompanion *companion __attribute__((swift_name("companion")));
- (id<GNCRealMatrix>)addM:(id<GNCRealMatrix>)m __attribute__((swift_name("add(m:)")));
- (void)doCopySubMatrixStartRow:(int32_t)startRow endRow:(int32_t)endRow startColumn:(int32_t)startColumn endColumn:(int32_t)endColumn destination:(GNCKotlinArray<GNCKotlinDoubleArray *> *)destination __attribute__((swift_name("doCopySubMatrix(startRow:endRow:startColumn:endColumn:destination:)")));
- (id<GNCRealMatrix>)createMatrixRowDimension:(int32_t)rowDimension columnDimension:(int32_t)columnDimension __attribute__((swift_name("createMatrix(rowDimension:columnDimension:)")));
- (int32_t)getColumnDimension __attribute__((swift_name("getColumnDimension()")));
- (GNCKotlinArray<GNCKotlinDoubleArray *> *)getData __attribute__((swift_name("getData()")));
- (double)getEntryRow:(int32_t)row column:(int32_t)column __attribute__((swift_name("getEntry(row:column:)")));
- (int32_t)getRowDimension __attribute__((swift_name("getRowDimension()")));
- (BOOL)isSquare __attribute__((swift_name("isSquare()")));
- (id<GNCRealMatrix>)multiplyM:(id<GNCRealMatrix>)m __attribute__((swift_name("multiply(m:)")));
- (GNCRealVector *)operateV:(GNCRealVector *)v __attribute__((swift_name("operate(v:)")));
- (id<GNCRealMatrix>)scalarMultiplyD:(double)d __attribute__((swift_name("scalarMultiply(d:)")));
- (void)setEntryRow:(int32_t)row column:(int32_t)column value:(double)value __attribute__((swift_name("setEntry(row:column:value:)")));
- (void)setSubMatrixSubMatrix:(GNCKotlinArray<GNCKotlinDoubleArray *> *)subMatrix row:(int32_t)row column:(int32_t)column __attribute__((swift_name("setSubMatrix(subMatrix:row:column:)")));
- (id<GNCRealMatrix>)subtractM:(id<GNCRealMatrix>)m __attribute__((swift_name("subtract(m:)")));
- (id<GNCRealMatrix>)transpose __attribute__((swift_name("transpose()")));
- (double)walkInOptimizedOrderVisitor:(id<GNCRealMatrixPreservingVisitor>)visitor __attribute__((swift_name("walkInOptimizedOrder(visitor:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AbstractRealMatrix.Companion")))
@interface GNCAbstractRealMatrixCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCAbstractRealMatrixCompanion *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Array2DRowRealMatrix")))
@interface GNCArray2DRowRealMatrix : GNCAbstractRealMatrix
- (instancetype)initWithRowDimension:(int32_t)rowDimension columnDimension:(int32_t)columnDimension __attribute__((swift_name("init(rowDimension:columnDimension:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithData:(GNCKotlinArray<GNCKotlinDoubleArray *> *)data __attribute__((swift_name("init(data:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithRows:(int32_t)rows columns:(int32_t)columns __attribute__((swift_name("init(rows:columns:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (id<GNCRealMatrix>)createMatrixRowDimension:(int32_t)rowDimension columnDimension:(int32_t)columnDimension __attribute__((swift_name("createMatrix(rowDimension:columnDimension:)")));
- (int32_t)getColumnDimension __attribute__((swift_name("getColumnDimension()")));
- (GNCKotlinArray<GNCKotlinDoubleArray *> *)getData __attribute__((swift_name("getData()")));
- (double)getEntryRow:(int32_t)row column:(int32_t)column __attribute__((swift_name("getEntry(row:column:)")));
- (int32_t)getRowDimension __attribute__((swift_name("getRowDimension()")));
- (void)setEntryRow:(int32_t)row column:(int32_t)column value:(double)value __attribute__((swift_name("setEntry(row:column:value:)")));
@end

__attribute__((swift_name("RealVector")))
@interface GNCRealVector : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)checkIndexIndex:(int32_t)index __attribute__((swift_name("checkIndex(index:)")));
- (GNCRealVector *)doCopy __attribute__((swift_name("doCopy()")));
- (double)dotProductV:(GNCRealVector *)v __attribute__((swift_name("dotProduct(v:)")));
- (int32_t)getDimension __attribute__((swift_name("getDimension()")));
- (double)getEntryIndex:(int32_t)index __attribute__((swift_name("getEntry(index:)")));
- (void)setEntryIndex:(int32_t)index value:(double)value __attribute__((swift_name("setEntry(index:value:)")));
- (GNCRealVector *)subtractV:(GNCRealVector *)v __attribute__((swift_name("subtract(v:)")));
- (GNCKotlinDoubleArray *)toArray __attribute__((swift_name("toArray()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ArrayRealVector")))
@interface GNCArrayRealVector : GNCRealVector
- (instancetype)initWithDim:(int32_t)dim __attribute__((swift_name("init(dim:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithV:(GNCRealVector *)v __attribute__((swift_name("init(v:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithV_:(GNCArrayRealVector *)v __attribute__((swift_name("init(v_:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithData:(GNCKotlinDoubleArray *)data __attribute__((swift_name("init(data:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCArrayRealVector *)doCopy __attribute__((swift_name("doCopy()")));
- (GNCKotlinDoubleArray *)getDataRef __attribute__((swift_name("getDataRef()")));
- (int32_t)getDimension __attribute__((swift_name("getDimension()")));
- (double)getEntryIndex:(int32_t)index __attribute__((swift_name("getEntry(index:)")));
- (void)setEntryIndex:(int32_t)index value:(double)value __attribute__((swift_name("setEntry(index:value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BlockRealMatrix")))
@interface GNCBlockRealMatrix : GNCAbstractRealMatrix
- (instancetype)initWithRows:(int32_t)rows columns:(int32_t)columns __attribute__((swift_name("init(rows:columns:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithRows:(int32_t)rows columns:(int32_t)columns blocksData:(GNCKotlinArray<GNCKotlinDoubleArray *> *)blocksData __attribute__((swift_name("init(rows:columns:blocksData:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCBlockRealMatrixCompanion *companion __attribute__((swift_name("companion")));
- (GNCBlockRealMatrix *)createMatrixRowDimension:(int32_t)rowDimension columnDimension:(int32_t)columnDimension __attribute__((swift_name("createMatrix(rowDimension:columnDimension:)")));
- (int32_t)getColumnDimension __attribute__((swift_name("getColumnDimension()")));
- (double)getEntryRow:(int32_t)row column:(int32_t)column __attribute__((swift_name("getEntry(row:column:)")));
- (int32_t)getRowDimension __attribute__((swift_name("getRowDimension()")));
- (void)setEntryRow:(int32_t)row column:(int32_t)column value:(double)value __attribute__((swift_name("setEntry(row:column:value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BlockRealMatrix.Companion")))
@interface GNCBlockRealMatrixCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCBlockRealMatrixCompanion *shared __attribute__((swift_name("shared")));
- (GNCKotlinArray<GNCKotlinDoubleArray *> *)createBlocksLayoutRows:(int32_t)rows columns:(int32_t)columns __attribute__((swift_name("createBlocksLayout(rows:columns:)")));
@property (readonly) int32_t BLOCK_SIZE __attribute__((swift_name("BLOCK_SIZE")));
@end

__attribute__((swift_name("DecompositionSolver")))
@protocol GNCDecompositionSolver
@required
- (id<GNCRealMatrix>)solveB:(id<GNCRealMatrix>)b __attribute__((swift_name("solve(b:)")));
@property (readonly, getter=inverse_) id<GNCRealMatrix> inverse __attribute__((swift_name("inverse")));
@property (readonly) BOOL isNonSingular __attribute__((swift_name("isNonSingular")));
@end

__attribute__((swift_name("RealMatrixPreservingVisitor")))
@protocol GNCRealMatrixPreservingVisitor
@required
- (double)end __attribute__((swift_name("end()")));
- (void)startRows:(int32_t)rows columns:(int32_t)columns startRow:(int32_t)startRow endRow:(int32_t)endRow startColumn:(int32_t)startColumn endColumn:(int32_t)endColumn __attribute__((swift_name("start(rows:columns:startRow:endRow:startColumn:endColumn:)")));
- (void)visitRow:(int32_t)row column:(int32_t)column value:(double)value __attribute__((swift_name("visit(row:column:value:)")));
@end

__attribute__((swift_name("DefaultRealMatrixPreservingVisitor")))
@interface GNCDefaultRealMatrixPreservingVisitor : GNCBase <GNCRealMatrixPreservingVisitor>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (double)end __attribute__((swift_name("end()")));
- (void)startRows:(int32_t)rows columns:(int32_t)columns startRow:(int32_t)startRow endRow:(int32_t)endRow startColumn:(int32_t)startColumn endColumn:(int32_t)endColumn __attribute__((swift_name("start(rows:columns:startRow:endRow:startColumn:endColumn:)")));
- (void)visitRow:(int32_t)row column:(int32_t)column value:(double)value __attribute__((swift_name("visit(row:column:value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DiagonalMatrix")))
@interface GNCDiagonalMatrix : GNCAbstractRealMatrix
- (instancetype)initWithDim:(int32_t)dim __attribute__((swift_name("init(dim:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithData:(GNCKotlinDoubleArray *)data __attribute__((swift_name("init(data:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithRows:(int32_t)rows columns:(int32_t)columns __attribute__((swift_name("init(rows:columns:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (id<GNCRealMatrix>)createMatrixRowDimension:(int32_t)rowDimension columnDimension:(int32_t)columnDimension __attribute__((swift_name("createMatrix(rowDimension:columnDimension:)")));
- (int32_t)getColumnDimension __attribute__((swift_name("getColumnDimension()")));
- (double)getEntryRow:(int32_t)row column:(int32_t)column __attribute__((swift_name("getEntry(row:column:)")));
- (int32_t)getRowDimension __attribute__((swift_name("getRowDimension()")));
- (id<GNCRealMatrix>)multiplyM:(id<GNCRealMatrix>)m __attribute__((swift_name("multiply(m:)")));
- (void)setEntryRow:(int32_t)row column:(int32_t)column value:(double)value __attribute__((swift_name("setEntry(row:column:value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LUDecomposition")))
@interface GNCLUDecomposition : GNCBase

/**
 * @note annotations
 *   kotlin.jvm.JvmOverloads
*/
- (instancetype)initWithMatrix:(id<GNCRealMatrix>)matrix singularityThreshold:(double)singularityThreshold __attribute__((swift_name("init(matrix:singularityThreshold:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCLUDecompositionCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) id<GNCDecompositionSolver> solver __attribute__((swift_name("solver")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LUDecomposition.Companion")))
@interface GNCLUDecompositionCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCLUDecompositionCompanion *shared __attribute__((swift_name("shared")));
@end

__attribute__((swift_name("QRDecomposition")))
@interface GNCQRDecomposition : GNCBase
- (instancetype)initWithMatrix:(id<GNCRealMatrix>)matrix threshold:(double)threshold __attribute__((swift_name("init(matrix:threshold:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)performHouseholderReflectionMinor:(int32_t)minor matrix:(GNCKotlinArray<GNCKotlinDoubleArray *> *)matrix __attribute__((swift_name("performHouseholderReflection(minor:matrix:)")));
@property (readonly) id<GNCDecompositionSolver> solver __attribute__((swift_name("solver")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("QRDecomposition.Solver")))
@interface GNCQRDecompositionSolver : GNCBase <GNCDecompositionSolver>
- (instancetype)initWith:(GNCQRDecomposition *)receiver qrt:(GNCKotlinArray<GNCKotlinDoubleArray *> *)qrt rDiag:(GNCKotlinDoubleArray *)rDiag threshold:(double)threshold __attribute__((swift_name("init(_:qrt:rDiag:threshold:)"))) __attribute__((objc_designated_initializer));
- (id<GNCRealMatrix>)solveB:(id<GNCRealMatrix>)b __attribute__((swift_name("solve(b:)")));
@property (readonly, getter=inverse_) id<GNCRealMatrix> inverse __attribute__((swift_name("inverse")));
@property (readonly) BOOL isNonSingular __attribute__((swift_name("isNonSingular")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Cartesian")))
@interface GNCCartesian : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)cartesian __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCCartesian *shared __attribute__((swift_name("shared")));
- (GNCKotlinDoubleArray *)addVectorA:(GNCKotlinDoubleArray *)vectorA vectorB:(GNCKotlinDoubleArray *)vectorB __attribute__((swift_name("add(vectorA:vectorB:)")));
- (double)distanceFromPointToLinePoint:(GNCKotlinDoubleArray *)point linePointA:(GNCKotlinDoubleArray *)linePointA linePointB:(GNCKotlinDoubleArray *)linePointB __attribute__((swift_name("distanceFromPointToLine(point:linePointA:linePointB:)")));
- (double)distanceFromPointToSegmentPoint:(GNCKotlinDoubleArray *)point linePointA:(GNCKotlinDoubleArray *)linePointA linePointB:(GNCKotlinDoubleArray *)linePointB __attribute__((swift_name("distanceFromPointToSegment(point:linePointA:linePointB:)")));
- (double)distancePointToPointPointA:(GNCKotlinDoubleArray *)pointA pointB:(GNCKotlinDoubleArray *)pointB __attribute__((swift_name("distancePointToPoint(pointA:pointB:)")));
- (double)dotProductVectorA:(GNCKotlinDoubleArray *)vectorA vectorB:(GNCKotlinDoubleArray *)vectorB __attribute__((swift_name("dotProduct(vectorA:vectorB:)")));
- (GNCKotlinDoubleArray * _Nullable)intersection2dP0:(GNCKotlinDoubleArray *)p0 p1:(GNCKotlinDoubleArray *)p1 p2:(GNCKotlinDoubleArray *)p2 p3:(GNCKotlinDoubleArray *)p3 __attribute__((swift_name("intersection2d(p0:p1:p2:p3:)")));
- (double)normVector:(GNCKotlinDoubleArray *)vector __attribute__((swift_name("norm(vector:)")));
- (GNCKotlinDoubleArray *)projectPointOntoLinePoint:(GNCKotlinDoubleArray *)point linePointA:(GNCKotlinDoubleArray *)linePointA linePointB:(GNCKotlinDoubleArray *)linePointB __attribute__((swift_name("projectPointOntoLine(point:linePointA:linePointB:)")));
- (GNCKotlinDoubleArray *)projectPointOntoSegmentPoint:(GNCKotlinDoubleArray *)point linePointA:(GNCKotlinDoubleArray *)linePointA linePointB:(GNCKotlinDoubleArray *)linePointB __attribute__((swift_name("projectPointOntoSegment(point:linePointA:linePointB:)")));
- (GNCKotlinDoubleArray *)projectVectorOntoVectorVectorA:(GNCKotlinDoubleArray *)vectorA vectorB:(GNCKotlinDoubleArray *)vectorB __attribute__((swift_name("projectVectorOntoVector(vectorA:vectorB:)")));
- (GNCKotlinDoubleArray *)scaleScalar:(double)scalar vector:(GNCKotlinDoubleArray *)vector __attribute__((swift_name("scale(scalar:vector:)")));
- (GNCKotlinDoubleArray *)subtractVectorA:(GNCKotlinDoubleArray *)vectorA vectorB:(GNCKotlinDoubleArray *)vectorB __attribute__((swift_name("subtract(vectorA:vectorB:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Geodesy")))
@interface GNCGeodesy : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)geodesy __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCGeodesy *shared __attribute__((swift_name("shared")));
- (double)addHeadingHeading:(double)heading toAdd:(double)toAdd __attribute__((swift_name("addHeading(heading:toAdd:)")));
- (GNCKotlinDoubleArray *)calculateShiftDistanceSrc:(GNCLatLng *)src dst:(GNCLatLng *)dst __attribute__((swift_name("calculateShiftDistance(src:dst:)")));
- (GNCLength *)distanceFromPointOntoSegmentBase:(GNCLatLng *)base start:(GNCLatLng *)start end:(GNCLatLng *)end __attribute__((swift_name("distanceFromPointOntoSegment(base:start:end:)")));
- (double)distanceMetersEastSrc:(GNCLatLng *)src dst:(GNCLatLng *)dst __attribute__((swift_name("distanceMetersEast(src:dst:)")));
- (double)distanceMetersNorthSrc:(GNCLatLng *)src dst:(GNCLatLng *)dst __attribute__((swift_name("distanceMetersNorth(src:dst:)")));
- (double)getHeadingStart:(GNCLatLng *)start end:(GNCLatLng *)end __attribute__((swift_name("getHeading(start:end:)")));
- (double)getHeadingDeltaRouteHeading:(double)routeHeading probeHeading:(double)probeHeading __attribute__((swift_name("getHeadingDelta(routeHeading:probeHeading:)")));
- (double)getHeadingInDegreesStart:(GNCLatLng *)start end:(GNCLatLng *)end __attribute__((swift_name("getHeadingInDegrees(start:end:)")));
- (double)getHeadingInRadiansSrc:(GNCLatLng *)src dst:(GNCLatLng *)dst __attribute__((swift_name("getHeadingInRadians(src:dst:)")));
- (BOOL)isOrthogonallyProjectableOntoSegmentBase:(GNCLatLng *)base segment:(GNCGeodesySegment *)segment __attribute__((swift_name("isOrthogonallyProjectableOntoSegment(base:segment:)")));
- (GNCLength *)lineDistanceLine:(NSArray<GNCLatLng *> *)line __attribute__((swift_name("lineDistance(line:)")));
- (GNCLatLng *)moveLocationOnLineStart:(GNCLatLng *)start end:(GNCLatLng *)end distance:(GNCLength *)distance __attribute__((swift_name("moveLocationOnLine(start:end:distance:)")));
- (GNCLength *)pointToPointDistanceStart:(GNCLatLng *)start end:(GNCLatLng *)end __attribute__((swift_name("pointToPointDistance(start:end:)")));
- (double)pointToPointDistanceHaversineALat:(double)aLat aLon:(double)aLon bLat:(double)bLat bLon:(double)bLon __attribute__((swift_name("pointToPointDistanceHaversine(aLat:aLon:bLat:bLon:)")));
- (double)pointToPointDistanceHaversineStart:(GNCLatLng *)start end:(GNCLatLng *)end __attribute__((swift_name("pointToPointDistanceHaversine(start:end:)")));
- (GNCLatLng *)projectPointOntoLineBase:(GNCLatLng *)base start:(GNCLatLng *)start end:(GNCLatLng *)end __attribute__((swift_name("projectPointOntoLine(base:start:end:)")));
- (GNCLatLng *)projectPointOntoSegmentBase:(GNCLatLng *)base segment:(GNCGeodesySegment *)segment __attribute__((swift_name("projectPointOntoSegment(base:segment:)")));
- (GNCLatLng *)projectPointOntoSegmentBase:(GNCLatLng *)base start:(GNCLatLng *)start end:(GNCLatLng *)end __attribute__((swift_name("projectPointOntoSegment(base:start:end:)")));
- (GNCLatLng *)shiftByCartesianPosition:(GNCLatLng *)position metersNorth:(double)metersNorth metersEast:(double)metersEast __attribute__((swift_name("shiftByCartesian(position:metersNorth:metersEast:)")));
- (GNCLatLng *)shiftByCartesianPosition:(GNCLatLng *)position shift:(GNCKotlinDoubleArray *)shift __attribute__((swift_name("shiftByCartesian(position:shift:)")));
- (GNCLatLng *)shiftByPolarInDegreesPosition:(GNCLatLng *)position meters:(GNCLength *)meters heading:(double)heading __attribute__((swift_name("shiftByPolarInDegrees(position:meters:heading:)")));
- (GNCLatLng *)shiftByPolarInRadiansPosition:(GNCLatLng *)position meters:(GNCLength *)meters heading:(double)heading __attribute__((swift_name("shiftByPolarInRadians(position:meters:heading:)")));
- (double)toDegreesRadians:(double)radians __attribute__((swift_name("toDegrees(radians:)")));
- (double)toRadiansDegrees:(double)degrees __attribute__((swift_name("toRadians(degrees:)")));
@property (readonly) double EARTH_RADIUS_METER __attribute__((swift_name("EARTH_RADIUS_METER")));
@property (readonly) double METERS_NORTH_TO_LATITUDE __attribute__((swift_name("METERS_NORTH_TO_LATITUDE")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Geodesy.Segment")))
@interface GNCGeodesySegment : GNCBase
- (instancetype)initWithStart:(GNCLatLng *)start end:(GNCLatLng *)end __attribute__((swift_name("init(start:end:)"))) __attribute__((objc_designated_initializer));
- (GNCGeodesySegment *)doCopyStart:(GNCLatLng *)start end:(GNCLatLng *)end __attribute__((swift_name("doCopy(start:end:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCLatLng *end __attribute__((swift_name("end")));
@property (readonly) GNCLatLng *start __attribute__((swift_name("start")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GeodeticCalculator")))
@interface GNCGeodeticCalculator : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (double)toDegreesRadians:(double)radians __attribute__((swift_name("toDegrees(radians:)")));
- (double)toRadiansDegrees:(double)degrees __attribute__((swift_name("toRadians(degrees:)")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LatLng")))
@interface GNCLatLng : GNCFreezable <GNCSerializable>
- (instancetype)initWithLatitude:(double)latitude longitude:(double)longitude __attribute__((swift_name("init(latitude:longitude:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCLatLngCompanion *companion __attribute__((swift_name("companion")));
- (GNCLatLng *)doCopyLatitude:(double)latitude longitude:(double)longitude __attribute__((swift_name("doCopy(latitude:longitude:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) double latitude __attribute__((swift_name("latitude")));
@property (readonly) double longitude __attribute__((swift_name("longitude")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LatLng.Companion")))
@interface GNCLatLngCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCLatLngCompanion *shared __attribute__((swift_name("shared")));
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UUID")))
@interface GNCUUID : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)uUID __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCUUID *shared __attribute__((swift_name("shared")));
- (NSString *)doNewUUID __attribute__((swift_name("doNewUUID()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AdjustableBaselineTimeProvider")))
@interface GNCAdjustableBaselineTimeProvider : GNCBase <GNCTimeProvider>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property GNCLong * _Nullable baselineTime __attribute__((swift_name("baselineTime")));
@property (readonly) int64_t currentTimeMillis __attribute__((swift_name("currentTimeMillis")));
@end

__attribute__((swift_name("DateTimeFormatter")))
@protocol GNCDateTimeFormatter
@required
- (GNCDuration *)convertFormat:(NSString *)format time:(NSString *)time __attribute__((swift_name("convert(format:time:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Time")))
@interface GNCTime : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)time __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCTime *shared __attribute__((swift_name("shared")));
@property (readonly) int64_t currentTimeMs __attribute__((swift_name("currentTimeMs")));
@property (readonly) int64_t elapsedTimeMsSinceStart __attribute__((swift_name("elapsedTimeMsSinceStart")));
@end

__attribute__((swift_name("HttpClientEngineFactory")))
@protocol GNCHttpClientEngineFactory
@required
- (id<GNCHttpClientEngine>)createBlock:(void (^)(GNCHttpClientEngineConfig *))block __attribute__((swift_name("create(block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Darwin")))
@interface GNCDarwin : GNCBase <GNCHttpClientEngineFactory>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)darwin __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCDarwin *shared __attribute__((swift_name("shared")));
- (id<GNCHttpClientEngine>)createBlock:(void (^)(GNCDarwinClientEngineConfig *))block __attribute__((swift_name("create(block:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("HttpClientEngineConfig")))
@interface GNCHttpClientEngineConfig : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property BOOL pipelining __attribute__((swift_name("pipelining")));
@property GNCProxyConfig * _Nullable proxy __attribute__((swift_name("proxy")));
@property int32_t threadsCount __attribute__((swift_name("threadsCount")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DarwinClientEngineConfig")))
@interface GNCDarwinClientEngineConfig : GNCHttpClientEngineConfig
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)configureRequestBlock:(void (^)(NSMutableURLRequest *))block __attribute__((swift_name("configureRequest(block:)")));
- (void)configureSessionBlock:(void (^)(NSURLSessionConfiguration *))block __attribute__((swift_name("configureSession(block:)")));
- (void)handleChallengeBlock:(void (^)(NSURLSession *, NSURLSessionTask *, NSURLAuthenticationChallenge *, GNCKotlinUnit *(^)(GNCLong *, NSURLCredential * _Nullable)))block __attribute__((swift_name("handleChallenge(block:)")));
- (void)usePreconfiguredSessionSession:(NSURLSession * _Nullable)session __attribute__((swift_name("usePreconfiguredSession(session:)")));
@property (readonly) void (^ _Nullable challengeHandler)(NSURLSession *, NSURLSessionTask *, NSURLAuthenticationChallenge *, GNCKotlinUnit *(^)(GNCLong *, NSURLCredential * _Nullable)) __attribute__((swift_name("challengeHandler")));
@property (readonly) NSURLSession * _Nullable preconfiguredSession __attribute__((swift_name("preconfiguredSession")));
@property void (^requestConfig)(NSMutableURLRequest *) __attribute__((swift_name("requestConfig")));
@property void (^sessionConfig)(NSURLSessionConfiguration *) __attribute__((swift_name("sessionConfig")));
@end

__attribute__((swift_name("IOException")))
@interface GNCIOException : GNCKotlinException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString *)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DarwinHttpRequestException")))
@interface GNCDarwinHttpRequestException : GNCIOException
- (instancetype)initWithOrigin:(NSError *)origin __attribute__((swift_name("init(origin:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString *)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) NSError *origin __attribute__((swift_name("origin")));
@end

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("CertificatePinner")))
@interface GNCCertificatePinner : NSObject
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PinnedCertificate")))
@interface GNCPinnedCertificate : GNCBase
- (instancetype)initWithPattern:(NSString *)pattern hashAlgorithm:(NSString *)hashAlgorithm hash:(NSString *)hash __attribute__((swift_name("init(pattern:hashAlgorithm:hash:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCPinnedCertificateCompanion *companion __attribute__((swift_name("companion")));
- (GNCPinnedCertificate *)doCopyPattern:(NSString *)pattern hashAlgorithm:(NSString *)hashAlgorithm hash:(NSString *)hash __attribute__((swift_name("doCopy(pattern:hashAlgorithm:hash:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly, getter=hash_) NSString *hash __attribute__((swift_name("hash")));
@property (readonly) NSString *hashAlgorithm __attribute__((swift_name("hashAlgorithm")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PinnedCertificate.Companion")))
@interface GNCPinnedCertificateCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCPinnedCertificateCompanion *shared __attribute__((swift_name("shared")));
- (GNCPinnedCertificate *)doNewPattern:(NSString *)pattern pin:(NSString *)pin __attribute__((swift_name("doNew(pattern:pin:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LogLevel")))
@interface GNCLogLevel : GNCKotlinEnum<GNCLogLevel *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCLogLevel *all __attribute__((swift_name("all")));
@property (class, readonly) GNCLogLevel *headers __attribute__((swift_name("headers")));
@property (class, readonly) GNCLogLevel *body __attribute__((swift_name("body")));
@property (class, readonly) GNCLogLevel *info __attribute__((swift_name("info")));
@property (class, readonly) GNCLogLevel *none __attribute__((swift_name("none")));
+ (GNCKotlinArray<GNCLogLevel *> *)values __attribute__((swift_name("values()")));
@property (readonly) BOOL body __attribute__((swift_name("body")));
@property (readonly) BOOL headers __attribute__((swift_name("headers")));
@property (readonly) BOOL info __attribute__((swift_name("info")));
@end

__attribute__((swift_name("Logger_")))
@protocol GNCLogger_
@required
- (void)logMessage:(NSString *)message __attribute__((swift_name("log(message:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Logger_Companion")))
@interface GNCLogger_Companion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCLogger_Companion *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Logging")))
@interface GNCLogging : GNCBase
@property (class, readonly, getter=companion) GNCLoggingCompanion *companion __attribute__((swift_name("companion")));
@property NSArray<GNCBoolean *(^)(GNCHttpRequestBuilder *)> *filters __attribute__((swift_name("filters")));
@property GNCLogLevel *level __attribute__((swift_name("level")));
@property (readonly) id<GNCLogger_> logger __attribute__((swift_name("logger")));
@end

__attribute__((swift_name("HttpClientPlugin")))
@protocol GNCHttpClientPlugin
@required
- (void)installPlugin:(id)plugin scope:(GNCHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (id)prepareBlock:(void (^)(id))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) GNCAttributeKey<id> *key __attribute__((swift_name("key")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Logging.Companion")))
@interface GNCLoggingCompanion : GNCBase <GNCHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCLoggingCompanion *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(GNCLogging *)plugin scope:(GNCHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (GNCLogging *)prepareBlock:(void (^)(GNCLoggingConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) GNCAttributeKey<GNCLogging *> *key __attribute__((swift_name("key")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Logging.Config")))
@interface GNCLoggingConfig : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)filterPredicate:(GNCBoolean *(^)(GNCHttpRequestBuilder *))predicate __attribute__((swift_name("filter(predicate:)")));
@property GNCLogLevel *level __attribute__((swift_name("level")));
@property id<GNCLogger_> logger __attribute__((swift_name("logger")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Auth")))
@interface GNCAuth : GNCBase
@property (class, readonly, getter=companion) GNCAuthPlugin *companion __attribute__((swift_name("companion")));
@property (readonly) NSMutableArray<id<GNCAuthProvider>> *providers __attribute__((swift_name("providers")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Auth.Plugin")))
@interface GNCAuthPlugin : GNCBase <GNCHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)plugin __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCAuthPlugin *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(GNCAuth *)plugin scope:(GNCHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (GNCAuth *)prepareBlock:(void (^)(GNCAuth *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) GNCAttributeKey<GNCKotlinUnit *> *AuthCircuitBreaker __attribute__((swift_name("AuthCircuitBreaker")));
@property (readonly) GNCAttributeKey<GNCAuth *> *key __attribute__((swift_name("key")));
@end

__attribute__((swift_name("AuthProvider")))
@protocol GNCAuthProvider
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)addRequestHeadersRequest:(GNCHttpRequestBuilder *)request authHeader:(GNCHttpAuthHeader * _Nullable)authHeader completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("addRequestHeaders(request:authHeader:completionHandler:)")));
- (BOOL)isApplicableAuth:(GNCHttpAuthHeader *)auth __attribute__((swift_name("isApplicable(auth:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)refreshTokenResponse:(GNCHttpResponse *)response completionHandler:(void (^)(GNCBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("refreshToken(response:completionHandler:)")));
- (BOOL)sendWithoutRequestRequest:(GNCHttpRequestBuilder *)request __attribute__((swift_name("sendWithoutRequest(request:)")));
@property (readonly) BOOL sendWithoutRequest __attribute__((swift_name("sendWithoutRequest"))) __attribute__((deprecated("Please use sendWithoutRequest function instead")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BasicAuthConfig")))
@interface GNCBasicAuthConfig : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)credentialsBlock:(id<GNCKotlinSuspendFunction0>)block __attribute__((swift_name("credentials(block:)")));
- (void)sendWithoutRequestBlock:(GNCBoolean *(^)(GNCHttpRequestBuilder *))block __attribute__((swift_name("sendWithoutRequest(block:)")));
@property NSString *password __attribute__((swift_name("password"))) __attribute__((deprecated("Please use `credentials {}` function instead")));
@property NSString * _Nullable realm __attribute__((swift_name("realm")));
@property BOOL sendWithoutRequest __attribute__((swift_name("sendWithoutRequest"))) __attribute__((deprecated("Please use `sendWithoutRequest {}` function instead")));
@property NSString *username __attribute__((swift_name("username"))) __attribute__((deprecated("Please use `credentials {}` function instead")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BasicAuthCredentials")))
@interface GNCBasicAuthCredentials : GNCBase
- (instancetype)initWithUsername:(NSString *)username password:(NSString *)password __attribute__((swift_name("init(username:password:)"))) __attribute__((objc_designated_initializer));
@property (readonly) NSString *password __attribute__((swift_name("password")));
@property (readonly) NSString *username __attribute__((swift_name("username")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BasicAuthProvider")))
@interface GNCBasicAuthProvider : GNCBase <GNCAuthProvider>
- (instancetype)initWithUsername:(NSString *)username password:(NSString *)password realm:(NSString * _Nullable)realm sendWithoutRequest:(BOOL)sendWithoutRequest __attribute__((swift_name("init(username:password:realm:sendWithoutRequest:)"))) __attribute__((objc_designated_initializer)) __attribute__((deprecated("Consider using constructor with credentials provider instead")));
- (instancetype)initWithCredentials:(id<GNCKotlinSuspendFunction0>)credentials realm:(NSString * _Nullable)realm sendWithoutRequestCallback:(GNCBoolean *(^)(GNCHttpRequestBuilder *))sendWithoutRequestCallback __attribute__((swift_name("init(credentials:realm:sendWithoutRequestCallback:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)addRequestHeadersRequest:(GNCHttpRequestBuilder *)request authHeader:(GNCHttpAuthHeader * _Nullable)authHeader completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("addRequestHeaders(request:authHeader:completionHandler:)")));
- (BOOL)isApplicableAuth:(GNCHttpAuthHeader *)auth __attribute__((swift_name("isApplicable(auth:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)refreshTokenResponse:(GNCHttpResponse *)response completionHandler:(void (^)(GNCBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("refreshToken(response:completionHandler:)")));
- (BOOL)sendWithoutRequestRequest:(GNCHttpRequestBuilder *)request __attribute__((swift_name("sendWithoutRequest(request:)")));
@property (readonly) BOOL sendWithoutRequest __attribute__((swift_name("sendWithoutRequest"))) __attribute__((deprecated("Please use sendWithoutRequest function instead")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BearerAuthConfig")))
@interface GNCBearerAuthConfig : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)loadTokensBlock:(id<GNCKotlinSuspendFunction0>)block __attribute__((swift_name("loadTokens(block:)")));
- (void)refreshTokensBlock:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("refreshTokens(block:)")));
- (void)sendWithoutRequestBlock:(GNCBoolean *(^)(GNCHttpRequestBuilder *))block __attribute__((swift_name("sendWithoutRequest(block:)")));
@property NSString * _Nullable realm __attribute__((swift_name("realm")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BearerAuthProvider")))
@interface GNCBearerAuthProvider : GNCBase <GNCAuthProvider>
- (instancetype)initWithRefreshTokens:(id<GNCKotlinSuspendFunction1>)refreshTokens loadTokens:(id<GNCKotlinSuspendFunction0>)loadTokens sendWithoutRequestCallback:(GNCBoolean *(^)(GNCHttpRequestBuilder *))sendWithoutRequestCallback realm:(NSString * _Nullable)realm __attribute__((swift_name("init(refreshTokens:loadTokens:sendWithoutRequestCallback:realm:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)addRequestHeadersRequest:(GNCHttpRequestBuilder *)request authHeader:(GNCHttpAuthHeader * _Nullable)authHeader completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("addRequestHeaders(request:authHeader:completionHandler:)")));
- (void)clearToken __attribute__((swift_name("clearToken()")));
- (BOOL)isApplicableAuth:(GNCHttpAuthHeader *)auth __attribute__((swift_name("isApplicable(auth:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)refreshTokenResponse:(GNCHttpResponse *)response completionHandler:(void (^)(GNCBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("refreshToken(response:completionHandler:)")));
- (BOOL)sendWithoutRequestRequest:(GNCHttpRequestBuilder *)request __attribute__((swift_name("sendWithoutRequest(request:)")));
@property (readonly) BOOL sendWithoutRequest __attribute__((swift_name("sendWithoutRequest"))) __attribute__((deprecated("Please use sendWithoutRequest function instead")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BearerTokens")))
@interface GNCBearerTokens : GNCBase
- (instancetype)initWithAccessToken:(NSString *)accessToken refreshToken:(NSString *)refreshToken __attribute__((swift_name("init(accessToken:refreshToken:)"))) __attribute__((objc_designated_initializer));
@property (readonly) NSString *accessToken __attribute__((swift_name("accessToken")));
@property (readonly) NSString *refreshToken __attribute__((swift_name("refreshToken")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DigestAuthConfig")))
@interface GNCDigestAuthConfig : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)credentialsBlock:(id<GNCKotlinSuspendFunction0>)block __attribute__((swift_name("credentials(block:)")));
@property NSString *algorithmName __attribute__((swift_name("algorithmName")));
@property NSString *password __attribute__((swift_name("password"))) __attribute__((deprecated("Please use `credentials {}` function instead")));
@property NSString * _Nullable realm __attribute__((swift_name("realm")));
@property NSString *username __attribute__((swift_name("username"))) __attribute__((deprecated("Please use `credentials {}` function instead")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DigestAuthCredentials")))
@interface GNCDigestAuthCredentials : GNCBase
- (instancetype)initWithUsername:(NSString *)username password:(NSString *)password __attribute__((swift_name("init(username:password:)"))) __attribute__((objc_designated_initializer));
@property (readonly) NSString *password __attribute__((swift_name("password")));
@property (readonly) NSString *username __attribute__((swift_name("username")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DigestAuthProvider")))
@interface GNCDigestAuthProvider : GNCBase <GNCAuthProvider>
- (instancetype)initWithUsername:(NSString *)username password:(NSString *)password realm:(NSString * _Nullable)realm algorithmName:(NSString *)algorithmName __attribute__((swift_name("init(username:password:realm:algorithmName:)"))) __attribute__((objc_designated_initializer)) __attribute__((deprecated("Consider using constructor with credentials provider instead")));
- (instancetype)initWithCredentials:(id<GNCKotlinSuspendFunction0>)credentials realm:(NSString * _Nullable)realm algorithmName:(NSString *)algorithmName __attribute__((swift_name("init(credentials:realm:algorithmName:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)addRequestHeadersRequest:(GNCHttpRequestBuilder *)request authHeader:(GNCHttpAuthHeader * _Nullable)authHeader completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("addRequestHeaders(request:authHeader:completionHandler:)")));
- (BOOL)isApplicableAuth:(GNCHttpAuthHeader *)auth __attribute__((swift_name("isApplicable(auth:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)refreshTokenResponse:(GNCHttpResponse *)response completionHandler:(void (^)(GNCBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("refreshToken(response:completionHandler:)")));
- (BOOL)sendWithoutRequestRequest:(GNCHttpRequestBuilder *)request __attribute__((swift_name("sendWithoutRequest(request:)")));
@property (readonly) NSString *algorithmName __attribute__((swift_name("algorithmName"))) __attribute__((deprecated("This will become private")));
@property (readonly) NSString *password __attribute__((swift_name("password"))) __attribute__((deprecated("This will be removed")));
@property (readonly) NSString * _Nullable realm __attribute__((swift_name("realm"))) __attribute__((deprecated("This will become private")));
@property (readonly) BOOL sendWithoutRequest __attribute__((swift_name("sendWithoutRequest"))) __attribute__((deprecated("Please use sendWithoutRequest function instead")));
@property (readonly) NSString *username __attribute__((swift_name("username"))) __attribute__((deprecated("This will be removed")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RefreshTokensParams")))
@interface GNCRefreshTokensParams : GNCBase
- (instancetype)initWithClient:(GNCHttpClient *)client response:(GNCHttpResponse *)response oldTokens:(GNCBearerTokens * _Nullable)oldTokens __attribute__((swift_name("init(client:response:oldTokens:)"))) __attribute__((objc_designated_initializer));
- (void)markAsRefreshTokenRequest:(GNCHttpRequestBuilder *)receiver __attribute__((swift_name("markAsRefreshTokenRequest(_:)")));
@property (readonly) GNCHttpClient *client __attribute__((swift_name("client")));
@property (readonly) GNCBearerTokens * _Nullable oldTokens __attribute__((swift_name("oldTokens")));
@property (readonly) GNCHttpResponse *response __attribute__((swift_name("response")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentConverterException")))
@interface GNCContentConverterException : GNCKotlinException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentNegotiation")))
@interface GNCContentNegotiation : GNCBase
@property (class, readonly, getter=companion) GNCContentNegotiationPlugin *companion __attribute__((swift_name("companion")));
@end

__attribute__((swift_name("Configuration")))
@protocol GNCConfiguration
@required
- (void)registerContentType:(GNCContentType *)contentType converter:(id<GNCContentConverter>)converter configuration:(void (^)(id<GNCContentConverter>))configuration __attribute__((swift_name("register(contentType:converter:configuration:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentNegotiation.Config")))
@interface GNCContentNegotiationConfig : GNCBase <GNCConfiguration>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)clearIgnoredTypes __attribute__((swift_name("clearIgnoredTypes()")));
- (void)ignoreType __attribute__((swift_name("ignoreType()")));
- (void)ignoreTypeType:(id<GNCKotlinKClass>)type __attribute__((swift_name("ignoreType(type:)")));
- (void)registerContentType:(GNCContentType *)contentType converter:(id<GNCContentConverter>)converter configuration:(void (^)(id<GNCContentConverter>))configuration __attribute__((swift_name("register(contentType:converter:configuration:)")));
- (void)registerContentTypeToSend:(GNCContentType *)contentTypeToSend converter:(id<GNCContentConverter>)converter contentTypeMatcher:(id<GNCContentTypeMatcher>)contentTypeMatcher configuration:(void (^)(id<GNCContentConverter>))configuration __attribute__((swift_name("register(contentTypeToSend:converter:contentTypeMatcher:configuration:)")));
- (void)removeIgnoredType __attribute__((swift_name("removeIgnoredType()")));
- (void)removeIgnoredTypeType:(id<GNCKotlinKClass>)type __attribute__((swift_name("removeIgnoredType(type:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentNegotiation.Plugin")))
@interface GNCContentNegotiationPlugin : GNCBase <GNCHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)plugin __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCContentNegotiationPlugin *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(GNCContentNegotiation *)plugin scope:(GNCHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (GNCContentNegotiation *)prepareBlock:(void (^)(GNCContentNegotiationConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) GNCAttributeKey<GNCContentNegotiation *> *key __attribute__((swift_name("key")));
@end

__attribute__((swift_name("ContentTypeMatcher")))
@protocol GNCContentTypeMatcher
@required
- (BOOL)containsContentType:(GNCContentType *)contentType __attribute__((swift_name("contains(contentType:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonContentTypeMatcher")))
@interface GNCJsonContentTypeMatcher : GNCBase <GNCContentTypeMatcher>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)jsonContentTypeMatcher __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCJsonContentTypeMatcher *shared __attribute__((swift_name("shared")));
- (BOOL)containsContentType:(GNCContentType *)contentType __attribute__((swift_name("contains(contentType:)")));
@end

__attribute__((swift_name("CoroutineScope")))
@protocol GNCCoroutineScope
@required
@property (readonly) id<GNCKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@end

__attribute__((swift_name("Closeable")))
@protocol GNCCloseable
@required
- (void)close __attribute__((swift_name("close()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpClient")))
@interface GNCHttpClient : GNCBase <GNCCoroutineScope, GNCCloseable>
- (instancetype)initWithEngine:(id<GNCHttpClientEngine>)engine userConfig:(GNCHttpClientConfig<GNCHttpClientEngineConfig *> *)userConfig __attribute__((swift_name("init(engine:userConfig:)"))) __attribute__((objc_designated_initializer));
- (void)close __attribute__((swift_name("close()")));
- (GNCHttpClient *)configBlock:(void (^)(GNCHttpClientConfig<id> *))block __attribute__((swift_name("config(block:)")));
- (BOOL)isSupportedCapability:(id<GNCHttpClientEngineCapability>)capability __attribute__((swift_name("isSupported(capability:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<GNCAttributes> attributes __attribute__((swift_name("attributes")));
@property (readonly) id<GNCKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@property (readonly) id<GNCHttpClientEngine> engine __attribute__((swift_name("engine")));
@property (readonly) GNCHttpClientEngineConfig *engineConfig __attribute__((swift_name("engineConfig")));
@property (readonly) GNCEvents *monitor __attribute__((swift_name("monitor")));
@property (readonly) GNCHttpReceivePipeline *receivePipeline __attribute__((swift_name("receivePipeline")));
@property (readonly) GNCHttpRequestPipeline *requestPipeline __attribute__((swift_name("requestPipeline")));
@property (readonly) GNCHttpResponsePipeline *responsePipeline __attribute__((swift_name("responsePipeline")));
@property (readonly) GNCHttpSendPipeline *sendPipeline __attribute__((swift_name("sendPipeline")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpClientConfig")))
@interface GNCHttpClientConfig<T> : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (GNCHttpClientConfig<T> *)clone __attribute__((swift_name("clone()")));
- (void)engineBlock:(void (^)(T))block __attribute__((swift_name("engine(block:)")));
- (void)installClient:(GNCHttpClient *)client __attribute__((swift_name("install(client:)")));
- (void)installPlugin:(id<GNCHttpClientPlugin>)plugin configure:(void (^)(id))configure __attribute__((swift_name("install(plugin:configure:)")));
- (void)installKey:(NSString *)key block:(void (^)(GNCHttpClient *))block __attribute__((swift_name("install(key:block:)")));
- (void)plusAssignOther:(GNCHttpClientConfig<T> *)other __attribute__((swift_name("plusAssign(other:)")));
@property BOOL developmentMode __attribute__((swift_name("developmentMode")));
@property BOOL expectSuccess __attribute__((swift_name("expectSuccess")));
@property BOOL followRedirects __attribute__((swift_name("followRedirects")));
@property BOOL useDefaultTransformers __attribute__((swift_name("useDefaultTransformers")));
@end

__attribute__((swift_name("KotlinRuntimeException")))
@interface GNCKotlinRuntimeException : GNCKotlinException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((swift_name("KotlinIllegalStateException")))
@interface GNCKotlinIllegalStateException : GNCKotlinRuntimeException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DoubleReceiveException")))
@interface GNCDoubleReceiveException : GNCKotlinIllegalStateException
- (instancetype)initWithCall:(GNCHttpClientCall *)call __attribute__((swift_name("init(call:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) NSString *message __attribute__((swift_name("message")));
@end

__attribute__((swift_name("HttpClientCall")))
@interface GNCHttpClientCall : GNCBase <GNCCoroutineScope>
- (instancetype)initWithClient:(GNCHttpClient *)client requestData:(GNCHttpRequestData *)requestData responseData:(GNCHttpResponseData *)responseData __attribute__((swift_name("init(client:requestData:responseData:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithClient:(GNCHttpClient *)client __attribute__((swift_name("init(client:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCHttpClientCallCompanion *companion __attribute__((swift_name("companion")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)bodyInfo:(GNCTypeInfo *)info completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("body(info:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)bodyNullableInfo:(GNCTypeInfo *)info completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("bodyNullable(info:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)getResponseContentWithCompletionHandler:(void (^)(id<GNCByteReadChannel> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("getResponseContent(completionHandler:)")));
- (NSString *)description __attribute__((swift_name("description()")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@property (readonly) BOOL allowDoubleReceive __attribute__((swift_name("allowDoubleReceive")));
@property (readonly) id<GNCAttributes> attributes __attribute__((swift_name("attributes")));
@property (readonly) GNCHttpClient *client __attribute__((swift_name("client")));
@property (readonly) id<GNCKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@property id<GNCHttpRequest> request __attribute__((swift_name("request")));
@property GNCHttpResponse *response __attribute__((swift_name("response")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpClientCall.Companion")))
@interface GNCHttpClientCallCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHttpClientCallCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) GNCAttributeKey<id> *CustomResponse __attribute__((swift_name("CustomResponse"))) __attribute__((unavailable("This is going to be removed. Please file a ticket with clarification why and what for do you need it.")));
@end

__attribute__((swift_name("KotlinUnsupportedOperationException")))
@interface GNCKotlinUnsupportedOperationException : GNCKotlinRuntimeException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NoTransformationFoundException")))
@interface GNCNoTransformationFoundException : GNCKotlinUnsupportedOperationException
- (instancetype)initWithResponse:(GNCHttpResponse *)response from:(id<GNCKotlinKClass>)from to:(id<GNCKotlinKClass>)to __attribute__((swift_name("init(response:from:to:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) NSString * _Nullable message __attribute__((swift_name("message")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ReceivePipelineException")))
@interface GNCReceivePipelineException : GNCKotlinIllegalStateException
- (instancetype)initWithRequest:(GNCHttpClientCall *)request info:(GNCTypeInfo *)info cause:(GNCKotlinThrowable *)cause __attribute__((swift_name("init(request:info:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) GNCKotlinThrowable *cause __attribute__((swift_name("cause")));
@property (readonly) GNCTypeInfo *info __attribute__((swift_name("info")));
@property (readonly) GNCHttpClientCall *request __attribute__((swift_name("request")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UnsupportedContentTypeException")))
@interface GNCUnsupportedContentTypeException : GNCKotlinIllegalStateException
- (instancetype)initWithContent:(GNCOutgoingContent *)content __attribute__((swift_name("init(content:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((swift_name("KotlinIllegalArgumentException")))
@interface GNCKotlinIllegalArgumentException : GNCKotlinRuntimeException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UnsupportedUpgradeProtocolException")))
@interface GNCUnsupportedUpgradeProtocolException : GNCKotlinIllegalArgumentException
- (instancetype)initWithUrl:(GNCUrl *)url __attribute__((swift_name("init(url:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CacheControl")))
@interface GNCCacheControl : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)cacheControl __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCCacheControl *shared __attribute__((swift_name("shared")));
@property (readonly) NSString *MAX_AGE __attribute__((swift_name("MAX_AGE")));
@property (readonly) NSString *MAX_STALE __attribute__((swift_name("MAX_STALE")));
@property (readonly) NSString *MIN_FRESH __attribute__((swift_name("MIN_FRESH")));
@property (readonly) NSString *MUST_REVALIDATE __attribute__((swift_name("MUST_REVALIDATE")));
@property (readonly) NSString *NO_CACHE __attribute__((swift_name("NO_CACHE")));
@property (readonly) NSString *NO_STORE __attribute__((swift_name("NO_STORE")));
@property (readonly) NSString *NO_TRANSFORM __attribute__((swift_name("NO_TRANSFORM")));
@property (readonly) NSString *ONLY_IF_CACHED __attribute__((swift_name("ONLY_IF_CACHED")));
@property (readonly) NSString *PRIVATE __attribute__((swift_name("PRIVATE")));
@property (readonly) NSString *PROXY_REVALIDATE __attribute__((swift_name("PROXY_REVALIDATE")));
@property (readonly) NSString *PUBLIC __attribute__((swift_name("PUBLIC")));
@property (readonly) NSString *S_MAX_AGE __attribute__((swift_name("S_MAX_AGE")));
@end

__attribute__((swift_name("OutgoingContent")))
@interface GNCOutgoingContent : GNCBase
- (id _Nullable)getPropertyKey:(GNCAttributeKey<id> *)key __attribute__((swift_name("getProperty(key:)")));
- (void)setPropertyKey:(GNCAttributeKey<id> *)key value:(id _Nullable)value __attribute__((swift_name("setProperty(key:value:)")));
- (id<GNCHeaders> _Nullable)trailers __attribute__((swift_name("trailers()")));
@property (readonly) GNCLong * _Nullable contentLength __attribute__((swift_name("contentLength")));
@property (readonly) GNCContentType * _Nullable contentType __attribute__((swift_name("contentType")));
@property (readonly) id<GNCHeaders> headers __attribute__((swift_name("headers")));
@property (readonly) GNCHttpStatusCode * _Nullable status __attribute__((swift_name("status")));
@end

__attribute__((swift_name("OutgoingContent.NoContent")))
@interface GNCOutgoingContentNoContent : GNCOutgoingContent
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EmptyContent")))
@interface GNCEmptyContent : GNCOutgoingContentNoContent
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (instancetype)emptyContent __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCEmptyContent *shared __attribute__((swift_name("shared")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCLong *contentLength __attribute__((swift_name("contentLength")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpResponseReceiveFail")))
@interface GNCHttpResponseReceiveFail : GNCBase
- (instancetype)initWithResponse:(GNCHttpResponse *)response cause:(GNCKotlinThrowable *)cause __attribute__((swift_name("init(response:cause:)"))) __attribute__((objc_designated_initializer));
@property (readonly) GNCKotlinThrowable *cause __attribute__((swift_name("cause")));
@property (readonly) GNCHttpResponse *response __attribute__((swift_name("response")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ConnectTimeoutException")))
@interface GNCConnectTimeoutException : GNCIOException
- (instancetype)initWithMessage:(NSString *)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SocketTimeoutException")))
@interface GNCSocketTimeoutException : GNCIOException
- (instancetype)initWithMessage:(NSString *)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((swift_name("ClientUpgradeContent")))
@interface GNCClientUpgradeContent : GNCOutgoingContentNoContent
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)pipeToOutput:(id<GNCByteWriteChannel>)output completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("pipeTo(output:completionHandler:)")));
- (void)verifyHeaders:(id<GNCHeaders>)headers __attribute__((swift_name("verify(headers:)")));
@property (readonly) id<GNCByteWriteChannel> output __attribute__((swift_name("output")));
@end

__attribute__((swift_name("HttpMessage")))
@protocol GNCHttpMessage
@required
@property (readonly) id<GNCHeaders> headers_ __attribute__((swift_name("headers_")));
@end

__attribute__((swift_name("HttpRequest")))
@protocol GNCHttpRequest <GNCHttpMessage, GNCCoroutineScope>
@required
@property (readonly) id<GNCAttributes> attributes __attribute__((swift_name("attributes")));
@property (readonly) GNCHttpClientCall *call __attribute__((swift_name("call")));
@property (readonly) GNCOutgoingContent *content __attribute__((swift_name("content")));
@property (readonly) GNCHttpMethod *method __attribute__((swift_name("method")));
@property (readonly) GNCUrl *url __attribute__((swift_name("url")));
@end

__attribute__((swift_name("DefaultHttpRequest")))
@interface GNCDefaultHttpRequest : GNCBase <GNCHttpRequest>
- (instancetype)initWithCall:(GNCHttpClientCall *)call data:(GNCHttpRequestData *)data __attribute__((swift_name("init(call:data:)"))) __attribute__((objc_designated_initializer));
@property (readonly) id<GNCAttributes> attributes __attribute__((swift_name("attributes")));
@property (readonly) GNCHttpClientCall *call __attribute__((swift_name("call")));
@property (readonly) GNCOutgoingContent *content __attribute__((swift_name("content")));
@property (readonly) id<GNCKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@property (readonly) id<GNCHeaders> headers_ __attribute__((swift_name("headers_")));
@property (readonly) GNCHttpMethod *method __attribute__((swift_name("method")));
@property (readonly) GNCUrl *url __attribute__((swift_name("url")));
@end

__attribute__((swift_name("HttpMessageBuilder")))
@protocol GNCHttpMessageBuilder
@required
@property (readonly) GNCHeadersBuilder *headers_ __attribute__((swift_name("headers_")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestBuilder")))
@interface GNCHttpRequestBuilder : GNCBase <GNCHttpMessageBuilder>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property (class, readonly, getter=companion) GNCHttpRequestBuilderCompanion *companion __attribute__((swift_name("companion")));
- (GNCHttpRequestData *)build __attribute__((swift_name("build()")));
- (id _Nullable)getCapabilityOrNullKey:(id<GNCHttpClientEngineCapability>)key __attribute__((swift_name("getCapabilityOrNull(key:)")));
- (void)setAttributesBlock:(void (^)(id<GNCAttributes>))block __attribute__((swift_name("setAttributes(block:)")));
- (void)setCapabilityKey:(id<GNCHttpClientEngineCapability>)key capability:(id)capability __attribute__((swift_name("setCapability(key:capability:)")));
- (GNCHttpRequestBuilder *)takeFromBuilder:(GNCHttpRequestBuilder *)builder __attribute__((swift_name("takeFrom(builder:)")));
- (GNCHttpRequestBuilder *)takeFromWithExecutionContextBuilder:(GNCHttpRequestBuilder *)builder __attribute__((swift_name("takeFromWithExecutionContext(builder:)")));
- (void)urlBlock:(void (^)(GNCURLBuilder *, GNCURLBuilder *))block __attribute__((swift_name("url(block:)")));
@property (readonly) id<GNCAttributes> attributes __attribute__((swift_name("attributes")));
@property id body __attribute__((swift_name("body")));
@property GNCTypeInfo * _Nullable bodyType __attribute__((swift_name("bodyType")));
@property (readonly) id<GNCJob> executionContext __attribute__((swift_name("executionContext")));
@property (readonly) GNCHeadersBuilder *headers_ __attribute__((swift_name("headers_")));
@property GNCHttpMethod *method __attribute__((swift_name("method")));
@property (readonly) GNCURLBuilder *url __attribute__((swift_name("url")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestBuilder.Companion")))
@interface GNCHttpRequestBuilderCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHttpRequestBuilderCompanion *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestData")))
@interface GNCHttpRequestData : GNCBase
- (instancetype)initWithUrl:(GNCUrl *)url method:(GNCHttpMethod *)method headers:(id<GNCHeaders>)headers body:(GNCOutgoingContent *)body executionContext:(id<GNCJob>)executionContext attributes:(id<GNCAttributes>)attributes __attribute__((swift_name("init(url:method:headers:body:executionContext:attributes:)"))) __attribute__((objc_designated_initializer));
- (id _Nullable)getCapabilityOrNullKey:(id<GNCHttpClientEngineCapability>)key __attribute__((swift_name("getCapabilityOrNull(key:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<GNCAttributes> attributes __attribute__((swift_name("attributes")));
@property (readonly) GNCOutgoingContent *body __attribute__((swift_name("body")));
@property (readonly) id<GNCJob> executionContext __attribute__((swift_name("executionContext")));
@property (readonly) id<GNCHeaders> headers __attribute__((swift_name("headers")));
@property (readonly) GNCHttpMethod *method __attribute__((swift_name("method")));
@property (readonly) GNCUrl *url __attribute__((swift_name("url")));
@end

__attribute__((swift_name("Pipeline")))
@interface GNCPipeline<TSubject, TContext> : GNCBase
- (instancetype)initWithPhase:(GNCPipelinePhase *)phase interceptors:(NSArray<id<GNCKotlinSuspendFunction2>> *)interceptors __attribute__((swift_name("init(phase:interceptors:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithPhases:(GNCKotlinArray<GNCPipelinePhase *> *)phases __attribute__((swift_name("init(phases:)"))) __attribute__((objc_designated_initializer));
- (void)addPhasePhase:(GNCPipelinePhase *)phase __attribute__((swift_name("addPhase(phase:)")));
- (void)afterIntercepted __attribute__((swift_name("afterIntercepted()")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeContext:(TContext)context subject:(TSubject)subject completionHandler:(void (^)(TSubject _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("execute(context:subject:completionHandler:)")));
- (void)insertPhaseAfterReference:(GNCPipelinePhase *)reference phase:(GNCPipelinePhase *)phase __attribute__((swift_name("insertPhaseAfter(reference:phase:)")));
- (void)insertPhaseBeforeReference:(GNCPipelinePhase *)reference phase:(GNCPipelinePhase *)phase __attribute__((swift_name("insertPhaseBefore(reference:phase:)")));
- (void)interceptPhase:(GNCPipelinePhase *)phase block:(id<GNCKotlinSuspendFunction2>)block __attribute__((swift_name("intercept(phase:block:)")));
- (NSArray<id<GNCKotlinSuspendFunction2>> *)interceptorsForPhasePhase:(GNCPipelinePhase *)phase __attribute__((swift_name("interceptorsForPhase(phase:)")));
- (void)mergeFrom:(GNCPipeline<TSubject, TContext> *)from __attribute__((swift_name("merge(from:)")));
- (void)mergePhasesFrom:(GNCPipeline<TSubject, TContext> *)from __attribute__((swift_name("mergePhases(from:)")));
- (void)resetFromFrom:(GNCPipeline<TSubject, TContext> *)from __attribute__((swift_name("resetFrom(from:)")));
@property (readonly) id<GNCAttributes> attributes __attribute__((swift_name("attributes")));
@property (readonly) BOOL developmentMode __attribute__((swift_name("developmentMode")));
@property (readonly) BOOL isEmpty __attribute__((swift_name("isEmpty")));
@property (readonly) NSArray<GNCPipelinePhase *> *items __attribute__((swift_name("items")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestPipeline")))
@interface GNCHttpRequestPipeline : GNCPipeline<id, GNCHttpRequestBuilder *>
- (instancetype)initWithDevelopmentMode:(BOOL)developmentMode __attribute__((swift_name("init(developmentMode:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithPhase:(GNCPipelinePhase *)phase interceptors:(NSArray<id<GNCKotlinSuspendFunction2>> *)interceptors __attribute__((swift_name("init(phase:interceptors:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithPhases:(GNCKotlinArray<GNCPipelinePhase *> *)phases __attribute__((swift_name("init(phases:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCHttpRequestPipelinePhases *companion __attribute__((swift_name("companion")));
@property (readonly) BOOL developmentMode __attribute__((swift_name("developmentMode")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestPipeline.Phases")))
@interface GNCHttpRequestPipelinePhases : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)phases __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHttpRequestPipelinePhases *shared __attribute__((swift_name("shared")));
@property (readonly) GNCPipelinePhase *Before __attribute__((swift_name("Before")));
@property (readonly) GNCPipelinePhase *Render __attribute__((swift_name("Render")));
@property (readonly) GNCPipelinePhase *Send __attribute__((swift_name("Send")));
@property (readonly) GNCPipelinePhase *State __attribute__((swift_name("State")));
@property (readonly) GNCPipelinePhase *Transform __attribute__((swift_name("Transform")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpResponseData")))
@interface GNCHttpResponseData : GNCBase
- (instancetype)initWithStatusCode:(GNCHttpStatusCode *)statusCode requestTime:(GNCGMTDate *)requestTime headers:(id<GNCHeaders>)headers version:(GNCHttpProtocolVersion *)version body:(id)body callContext:(id<GNCKotlinCoroutineContext>)callContext __attribute__((swift_name("init(statusCode:requestTime:headers:version:body:callContext:)"))) __attribute__((objc_designated_initializer));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id body __attribute__((swift_name("body")));
@property (readonly) id<GNCKotlinCoroutineContext> callContext __attribute__((swift_name("callContext")));
@property (readonly) id<GNCHeaders> headers __attribute__((swift_name("headers")));
@property (readonly) GNCGMTDate *requestTime __attribute__((swift_name("requestTime")));
@property (readonly) GNCGMTDate *responseTime __attribute__((swift_name("responseTime")));
@property (readonly) GNCHttpStatusCode *statusCode __attribute__((swift_name("statusCode")));
@property (readonly) GNCHttpProtocolVersion *version __attribute__((swift_name("version")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpSendPipeline")))
@interface GNCHttpSendPipeline : GNCPipeline<id, GNCHttpRequestBuilder *>
- (instancetype)initWithDevelopmentMode:(BOOL)developmentMode __attribute__((swift_name("init(developmentMode:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithPhase:(GNCPipelinePhase *)phase interceptors:(NSArray<id<GNCKotlinSuspendFunction2>> *)interceptors __attribute__((swift_name("init(phase:interceptors:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithPhases:(GNCKotlinArray<GNCPipelinePhase *> *)phases __attribute__((swift_name("init(phases:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCHttpSendPipelinePhases *companion __attribute__((swift_name("companion")));
@property (readonly) BOOL developmentMode __attribute__((swift_name("developmentMode")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpSendPipeline.Phases")))
@interface GNCHttpSendPipelinePhases : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)phases __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHttpSendPipelinePhases *shared __attribute__((swift_name("shared")));
@property (readonly) GNCPipelinePhase *Before __attribute__((swift_name("Before")));
@property (readonly) GNCPipelinePhase *Engine __attribute__((swift_name("Engine")));
@property (readonly) GNCPipelinePhase *Monitoring __attribute__((swift_name("Monitoring")));
@property (readonly) GNCPipelinePhase *Receive __attribute__((swift_name("Receive")));
@property (readonly) GNCPipelinePhase *State __attribute__((swift_name("State")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChannelProvider")))
@interface GNCChannelProvider : GNCBase
- (instancetype)initWithSize:(GNCLong * _Nullable)size block:(id<GNCByteReadChannel> (^)(void))block __attribute__((swift_name("init(size:block:)"))) __attribute__((objc_designated_initializer));
@property (readonly) id<GNCByteReadChannel> (^block)(void) __attribute__((swift_name("block")));
@property (readonly) GNCLong * _Nullable size __attribute__((swift_name("size")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FormBuilder")))
@interface GNCFormBuilder : GNCBase
- (void)appendPart:(GNCFormPart<id> *)part __attribute__((swift_name("append(part:)")));
- (void)appendKey:(NSString *)key value:(id)value headers:(id<GNCHeaders>)headers __attribute__((swift_name("append(key:value:headers:)")));
- (void)appendKey:(NSString *)key value:(GNCChannelProvider *)value headers_:(id<GNCHeaders>)headers __attribute__((swift_name("append(key:value:headers_:)")));
- (void)appendKey:(NSString *)key value:(GNCInputProvider *)value headers__:(id<GNCHeaders>)headers __attribute__((swift_name("append(key:value:headers__:)")));
- (void)appendKey:(NSString *)key value:(GNCByteReadPacket *)value headers___:(id<GNCHeaders>)headers __attribute__((swift_name("append(key:value:headers___:)")));
- (void)appendKey:(NSString *)key value:(GNCKotlinByteArray *)value headers____:(id<GNCHeaders>)headers __attribute__((swift_name("append(key:value:headers____:)")));
- (void)appendKey:(NSString *)key value:(id)value headers_____:(id<GNCHeaders>)headers __attribute__((swift_name("append(key:value:headers_____:)")));
- (void)appendKey:(NSString *)key value:(NSString *)value headers______:(id<GNCHeaders>)headers __attribute__((swift_name("append(key:value:headers______:)")));
- (void)appendInputKey:(NSString *)key headers:(id<GNCHeaders>)headers size:(GNCLong * _Nullable)size block:(GNCInput *(^)(void))block __attribute__((swift_name("appendInput(key:headers:size:block:)")));
@end

__attribute__((swift_name("OutgoingContent.ByteArrayContent")))
@interface GNCOutgoingContentByteArrayContent : GNCOutgoingContent
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (GNCKotlinByteArray *)bytes __attribute__((swift_name("bytes()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FormDataContent")))
@interface GNCFormDataContent : GNCOutgoingContentByteArrayContent
- (instancetype)initWithFormData:(id<GNCParameters>)formData __attribute__((swift_name("init(formData:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCKotlinByteArray *)bytes __attribute__((swift_name("bytes()")));
@property (readonly) GNCLong *contentLength __attribute__((swift_name("contentLength")));
@property (readonly) GNCContentType *contentType __attribute__((swift_name("contentType")));
@property (readonly) id<GNCParameters> formData __attribute__((swift_name("formData")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FormPart")))
@interface GNCFormPart<T> : GNCBase
- (instancetype)initWithKey:(NSString *)key value:(T)value headers:(id<GNCHeaders>)headers __attribute__((swift_name("init(key:value:headers:)"))) __attribute__((objc_designated_initializer));
- (GNCFormPart<T> *)doCopyKey:(NSString *)key value:(T)value headers:(id<GNCHeaders>)headers __attribute__((swift_name("doCopy(key:value:headers:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<GNCHeaders> headers __attribute__((swift_name("headers")));
@property (readonly) NSString *key __attribute__((swift_name("key")));
@property (readonly) T value __attribute__((swift_name("value")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InputProvider")))
@interface GNCInputProvider : GNCBase
- (instancetype)initWithSize:(GNCLong * _Nullable)size block:(GNCInput *(^)(void))block __attribute__((swift_name("init(size:block:)"))) __attribute__((objc_designated_initializer));
@property (readonly) GNCInput *(^block)(void) __attribute__((swift_name("block")));
@property (readonly) GNCLong * _Nullable size __attribute__((swift_name("size")));
@end

__attribute__((swift_name("OutgoingContent.WriteChannelContent")))
@interface GNCOutgoingContentWriteChannelContent : GNCOutgoingContent
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeToChannel:(id<GNCByteWriteChannel>)channel completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeTo(channel:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MultiPartFormDataContent")))
@interface GNCMultiPartFormDataContent : GNCOutgoingContentWriteChannelContent
- (instancetype)initWithParts:(NSArray<GNCPartData *> *)parts boundary:(NSString *)boundary contentType:(GNCContentType *)contentType __attribute__((swift_name("init(parts:boundary:contentType:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeToChannel:(id<GNCByteWriteChannel>)channel completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeTo(channel:completionHandler:)")));
@property (readonly) NSString *boundary __attribute__((swift_name("boundary")));
@property (readonly) GNCLong * _Nullable contentLength __attribute__((swift_name("contentLength")));
@property (readonly) GNCContentType *contentType __attribute__((swift_name("contentType")));
@end

__attribute__((swift_name("HttpResponse")))
@interface GNCHttpResponse : GNCBase <GNCHttpMessage, GNCCoroutineScope>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCHttpClientCall *call __attribute__((swift_name("call")));
@property (readonly) id<GNCByteReadChannel> content __attribute__((swift_name("content")));
@property (readonly) GNCGMTDate *requestTime __attribute__((swift_name("requestTime")));
@property (readonly) GNCGMTDate *responseTime __attribute__((swift_name("responseTime")));
@property (readonly) GNCHttpStatusCode *status __attribute__((swift_name("status")));
@property (readonly) GNCHttpProtocolVersion *version __attribute__((swift_name("version")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultHttpResponse")))
@interface GNCDefaultHttpResponse : GNCHttpResponse
- (instancetype)initWithCall:(GNCHttpClientCall *)call responseData:(GNCHttpResponseData *)responseData __attribute__((swift_name("init(call:responseData:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
@property (readonly) GNCHttpClientCall *call __attribute__((swift_name("call")));
@property (readonly) id<GNCByteReadChannel> content __attribute__((swift_name("content")));
@property (readonly) id<GNCKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@property (readonly) id<GNCHeaders> headers_ __attribute__((swift_name("headers_")));
@property (readonly) GNCGMTDate *requestTime __attribute__((swift_name("requestTime")));
@property (readonly) GNCGMTDate *responseTime __attribute__((swift_name("responseTime")));
@property (readonly) GNCHttpStatusCode *status __attribute__((swift_name("status")));
@property (readonly) GNCHttpProtocolVersion *version __attribute__((swift_name("version")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpReceivePipeline")))
@interface GNCHttpReceivePipeline : GNCPipeline<GNCHttpResponse *, GNCKotlinUnit *>
- (instancetype)initWithDevelopmentMode:(BOOL)developmentMode __attribute__((swift_name("init(developmentMode:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithPhase:(GNCPipelinePhase *)phase interceptors:(NSArray<id<GNCKotlinSuspendFunction2>> *)interceptors __attribute__((swift_name("init(phase:interceptors:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithPhases:(GNCKotlinArray<GNCPipelinePhase *> *)phases __attribute__((swift_name("init(phases:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCHttpReceivePipelinePhases *companion __attribute__((swift_name("companion")));
@property (readonly) BOOL developmentMode __attribute__((swift_name("developmentMode")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpReceivePipeline.Phases")))
@interface GNCHttpReceivePipelinePhases : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)phases __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHttpReceivePipelinePhases *shared __attribute__((swift_name("shared")));
@property (readonly) GNCPipelinePhase *After __attribute__((swift_name("After")));
@property (readonly) GNCPipelinePhase *Before __attribute__((swift_name("Before")));
@property (readonly) GNCPipelinePhase *State __attribute__((swift_name("State")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpResponseContainer")))
@interface GNCHttpResponseContainer : GNCBase
- (instancetype)initWithExpectedType:(GNCTypeInfo *)expectedType response:(id)response __attribute__((swift_name("init(expectedType:response:)"))) __attribute__((objc_designated_initializer));
- (GNCHttpResponseContainer *)doCopyExpectedType:(GNCTypeInfo *)expectedType response:(id)response __attribute__((swift_name("doCopy(expectedType:response:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCTypeInfo *expectedType __attribute__((swift_name("expectedType")));
@property (readonly) id response __attribute__((swift_name("response")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpResponsePipeline")))
@interface GNCHttpResponsePipeline : GNCPipeline<GNCHttpResponseContainer *, GNCHttpClientCall *>
- (instancetype)initWithDevelopmentMode:(BOOL)developmentMode __attribute__((swift_name("init(developmentMode:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithPhase:(GNCPipelinePhase *)phase interceptors:(NSArray<id<GNCKotlinSuspendFunction2>> *)interceptors __attribute__((swift_name("init(phase:interceptors:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithPhases:(GNCKotlinArray<GNCPipelinePhase *> *)phases __attribute__((swift_name("init(phases:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCHttpResponsePipelinePhases *companion __attribute__((swift_name("companion")));
@property (readonly) BOOL developmentMode __attribute__((swift_name("developmentMode")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpResponsePipeline.Phases")))
@interface GNCHttpResponsePipelinePhases : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)phases __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHttpResponsePipelinePhases *shared __attribute__((swift_name("shared")));
@property (readonly) GNCPipelinePhase *After __attribute__((swift_name("After")));
@property (readonly) GNCPipelinePhase *Parse __attribute__((swift_name("Parse")));
@property (readonly) GNCPipelinePhase *Receive __attribute__((swift_name("Receive")));
@property (readonly) GNCPipelinePhase *State __attribute__((swift_name("State")));
@property (readonly) GNCPipelinePhase *Transform __attribute__((swift_name("Transform")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpStatement")))
@interface GNCHttpStatement : GNCBase
- (instancetype)initWithBuilder:(GNCHttpRequestBuilder *)builder client:(GNCHttpClient *)client __attribute__((swift_name("init(builder:client:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)bodyWithCompletionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("body(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)bodyBlock:(id<GNCKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("body(block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeWithCompletionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("execute(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeBlock:(id<GNCKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("execute(block:completionHandler:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClientEngineClosedException")))
@interface GNCClientEngineClosedException : GNCKotlinIllegalStateException
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) GNCKotlinThrowable * _Nullable cause __attribute__((swift_name("cause")));
@end

__attribute__((swift_name("HttpClientEngine")))
@protocol GNCHttpClientEngine <GNCCoroutineScope, GNCCloseable>
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeData:(GNCHttpRequestData *)data completionHandler:(void (^)(GNCHttpResponseData * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("execute(data:completionHandler:)")));
- (void)installClient:(GNCHttpClient *)client __attribute__((swift_name("install(client:)")));
@property (readonly) GNCHttpClientEngineConfig *config __attribute__((swift_name("config")));
@property (readonly) GNCCoroutineDispatcher *dispatcher __attribute__((swift_name("dispatcher")));
@property (readonly) NSSet<id<GNCHttpClientEngineCapability>> *supportedCapabilities __attribute__((swift_name("supportedCapabilities")));
@end

__attribute__((swift_name("HttpClientEngineBase")))
@interface GNCHttpClientEngineBase : GNCBase <GNCHttpClientEngine>
- (instancetype)initWithEngineName:(NSString *)engineName __attribute__((swift_name("init(engineName:)"))) __attribute__((objc_designated_initializer));
- (void)close __attribute__((swift_name("close()")));
@property (readonly) id<GNCKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@end

__attribute__((swift_name("HttpClientEngineCapability")))
@protocol GNCHttpClientEngineCapability
@required
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProxyBuilder")))
@interface GNCProxyBuilder : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)proxyBuilder __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCProxyBuilder *shared __attribute__((swift_name("shared")));
- (GNCProxyConfig *)httpUrl:(GNCUrl *)url __attribute__((swift_name("http(url:)")));
- (GNCProxyConfig *)socksHost:(NSString *)host port:(int32_t)port __attribute__((swift_name("socks(host:port:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProxyConfig")))
@interface GNCProxyConfig : GNCBase
- (instancetype)initWithUrl:(GNCUrl *)url __attribute__((swift_name("init(url:)"))) __attribute__((objc_designated_initializer));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCUrl *url __attribute__((swift_name("url")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProxyType")))
@interface GNCProxyType : GNCKotlinEnum<GNCProxyType *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCProxyType *socks __attribute__((swift_name("socks")));
@property (class, readonly) GNCProxyType *http __attribute__((swift_name("http")));
@property (class, readonly) GNCProxyType *unknown __attribute__((swift_name("unknown")));
+ (GNCKotlinArray<GNCProxyType *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((swift_name("KotlinIterable")))
@protocol GNCKotlinIterable
@required
- (id<GNCKotlinIterator>)iterator __attribute__((swift_name("iterator()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("engines")))
@interface GNCengines : GNCBase <GNCKotlinIterable>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)engines __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCengines *shared __attribute__((swift_name("shared")));
- (void)appendItem:(id<GNCHttpClientEngineFactory>)item __attribute__((swift_name("append(item:)")));
- (id<GNCKotlinIterator>)iterator __attribute__((swift_name("iterator()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BodyProgress")))
@interface GNCBodyProgress : GNCBase
@property (class, readonly, getter=companion) GNCBodyProgressPlugin *companion __attribute__((swift_name("companion")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BodyProgress.Plugin")))
@interface GNCBodyProgressPlugin : GNCBase <GNCHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)plugin __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCBodyProgressPlugin *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(GNCBodyProgress *)plugin scope:(GNCHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (GNCBodyProgress *)prepareBlock:(void (^)(GNCKotlinUnit *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) GNCAttributeKey<GNCBodyProgress *> *key __attribute__((swift_name("key")));
@end

__attribute__((swift_name("ResponseException")))
@interface GNCResponseException : GNCKotlinIllegalStateException
- (instancetype)initWithResponse:(GNCHttpResponse *)response __attribute__((swift_name("init(response:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable("Please, provide response text in constructor")));
- (instancetype)initWithResponse:(GNCHttpResponse *)response cachedResponseText:(NSString *)cachedResponseText __attribute__((swift_name("init(response:cachedResponseText:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) GNCHttpResponse *response __attribute__((swift_name("response")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClientRequestException")))
@interface GNCClientRequestException : GNCResponseException
- (instancetype)initWithResponse:(GNCHttpResponse *)response __attribute__((swift_name("init(response:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable("Please, provide response text in constructor")));
- (instancetype)initWithResponse:(GNCHttpResponse *)response cachedResponseText:(NSString *)cachedResponseText __attribute__((swift_name("init(response:cachedResponseText:)"))) __attribute__((objc_designated_initializer));
@property (readonly) NSString *message __attribute__((swift_name("message")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DataConversion")))
@interface GNCDataConversion : GNCBase <GNCHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)dataConversion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCDataConversion *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(GNCDataConversion_ *)plugin scope:(GNCHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (GNCDataConversion_ *)prepareBlock:(void (^)(GNCDataConversion_Configuration *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) GNCAttributeKey<GNCDataConversion_ *> *key __attribute__((swift_name("key")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultRequest")))
@interface GNCDefaultRequest : GNCBase
@property (class, readonly, getter=companion) GNCDefaultRequestPlugin *companion __attribute__((swift_name("companion")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultRequest.DefaultRequestBuilder")))
@interface GNCDefaultRequestDefaultRequestBuilder : GNCBase <GNCHttpMessageBuilder>
- (void)setAttributesBlock:(void (^)(id<GNCAttributes>))block __attribute__((swift_name("setAttributes(block:)")));
- (void)urlBlock:(void (^)(GNCURLBuilder *))block __attribute__((swift_name("url(block:)")));
- (void)urlUrlString:(NSString *)urlString __attribute__((swift_name("url(urlString:)")));
- (void)urlScheme:(NSString * _Nullable)scheme host:(NSString * _Nullable)host port:(GNCInt * _Nullable)port path:(NSString * _Nullable)path block:(void (^)(GNCURLBuilder *))block __attribute__((swift_name("url(scheme:host:port:path:block:)")));
@property (readonly) id<GNCAttributes> attributes __attribute__((swift_name("attributes")));
@property (readonly) GNCHeadersBuilder *headers_ __attribute__((swift_name("headers_")));
@property NSString *host __attribute__((swift_name("host")));
@property int32_t port __attribute__((swift_name("port")));
@property (readonly) GNCURLBuilder *url __attribute__((swift_name("url")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultRequest.Plugin")))
@interface GNCDefaultRequestPlugin : GNCBase <GNCHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)plugin __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCDefaultRequestPlugin *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(GNCDefaultRequest *)plugin scope:(GNCHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (GNCDefaultRequest *)prepareBlock:(void (^)(GNCDefaultRequestDefaultRequestBuilder *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) GNCAttributeKey<GNCDefaultRequest *> *key __attribute__((swift_name("key")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCallValidator")))
@interface GNCHttpCallValidator : GNCBase
@property (class, readonly, getter=companion) GNCHttpCallValidatorCompanion *companion __attribute__((swift_name("companion")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCallValidator.Companion")))
@interface GNCHttpCallValidatorCompanion : GNCBase <GNCHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHttpCallValidatorCompanion *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(GNCHttpCallValidator *)plugin scope:(GNCHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (GNCHttpCallValidator *)prepareBlock:(void (^)(GNCHttpCallValidatorConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) GNCAttributeKey<GNCHttpCallValidator *> *key __attribute__((swift_name("key")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCallValidator.Config")))
@interface GNCHttpCallValidatorConfig : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)handleResponseExceptionBlock:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("handleResponseException(block:)"))) __attribute__((deprecated("Consider using `handleResponseExceptionWithRequest` instead")));
- (void)handleResponseExceptionWithRequestBlock:(id<GNCKotlinSuspendFunction2>)block __attribute__((swift_name("handleResponseExceptionWithRequest(block:)")));
- (void)validateResponseBlock:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("validateResponse(block:)")));
@property BOOL expectSuccess __attribute__((swift_name("expectSuccess"))) __attribute__((deprecated("This property is ignored. Please use `expectSuccess` property in HttpClientConfig. This is going to become internal.")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpPlainText")))
@interface GNCHttpPlainText : GNCBase
@property (class, readonly, getter=companion) GNCHttpPlainTextPlugin *companion __attribute__((swift_name("companion")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpPlainText.Config")))
@interface GNCHttpPlainTextConfig : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)registerCharset:(GNCCharset *)charset quality:(GNCFloat * _Nullable)quality __attribute__((swift_name("register(charset:quality:)")));
@property GNCCharset *responseCharsetFallback __attribute__((swift_name("responseCharsetFallback")));
@property GNCCharset * _Nullable sendCharset __attribute__((swift_name("sendCharset")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpPlainText.Plugin")))
@interface GNCHttpPlainTextPlugin : GNCBase <GNCHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)plugin __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHttpPlainTextPlugin *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(GNCHttpPlainText *)plugin scope:(GNCHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (GNCHttpPlainText *)prepareBlock:(void (^)(GNCHttpPlainTextConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) GNCAttributeKey<GNCHttpPlainText *> *key __attribute__((swift_name("key")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRedirect")))
@interface GNCHttpRedirect : GNCBase
@property (class, readonly, getter=companion) GNCHttpRedirectPlugin *companion __attribute__((swift_name("companion")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRedirect.Config")))
@interface GNCHttpRedirectConfig : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property BOOL allowHttpsDowngrade __attribute__((swift_name("allowHttpsDowngrade")));
@property BOOL checkHttpMethod __attribute__((swift_name("checkHttpMethod")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRedirect.Plugin")))
@interface GNCHttpRedirectPlugin : GNCBase <GNCHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)plugin __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHttpRedirectPlugin *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(GNCHttpRedirect *)plugin scope:(GNCHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (GNCHttpRedirect *)prepareBlock:(void (^)(GNCHttpRedirectConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) GNCEventDefinition<GNCHttpResponse *> *HttpResponseRedirect __attribute__((swift_name("HttpResponseRedirect")));
@property (readonly) GNCAttributeKey<GNCHttpRedirect *> *key __attribute__((swift_name("key")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestRetry")))
@interface GNCHttpRequestRetry : GNCBase
@property (class, readonly, getter=companion) GNCHttpRequestRetryPlugin *companion __attribute__((swift_name("companion")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestRetry.Configuration")))
@interface GNCHttpRequestRetryConfiguration : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)constantDelayMillis:(int64_t)millis randomizationMs:(int64_t)randomizationMs respectRetryAfterHeader:(BOOL)respectRetryAfterHeader __attribute__((swift_name("constantDelay(millis:randomizationMs:respectRetryAfterHeader:)")));
- (void)delayBlock:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("delay(block:)")));
- (void)delayMillisRespectRetryAfterHeader:(BOOL)respectRetryAfterHeader block:(GNCLong *(^)(GNCHttpRequestRetryDelayContext *, GNCInt *))block __attribute__((swift_name("delayMillis(respectRetryAfterHeader:block:)")));
- (void)exponentialDelayBase:(double)base maxDelayMs:(int64_t)maxDelayMs randomizationMs:(int64_t)randomizationMs respectRetryAfterHeader:(BOOL)respectRetryAfterHeader __attribute__((swift_name("exponentialDelay(base:maxDelayMs:randomizationMs:respectRetryAfterHeader:)")));
- (void)modifyRequestBlock:(void (^)(GNCHttpRequestRetryModifyRequestContext *, GNCHttpRequestBuilder *))block __attribute__((swift_name("modifyRequest(block:)")));
- (void)noRetry __attribute__((swift_name("noRetry()")));
- (void)retryIfMaxRetries:(int32_t)maxRetries block:(GNCBoolean *(^)(GNCHttpRequestRetryShouldRetryContext *, id<GNCHttpRequest>, GNCHttpResponse *))block __attribute__((swift_name("retryIf(maxRetries:block:)")));
- (void)retryOnExceptionMaxRetries:(int32_t)maxRetries __attribute__((swift_name("retryOnException(maxRetries:)")));
- (void)retryOnExceptionIfMaxRetries:(int32_t)maxRetries block:(GNCBoolean *(^)(GNCHttpRequestRetryShouldRetryContext *, GNCHttpRequestBuilder *, GNCKotlinThrowable *))block __attribute__((swift_name("retryOnExceptionIf(maxRetries:block:)")));
- (void)retryOnExceptionOrServerErrorsMaxRetries:(int32_t)maxRetries __attribute__((swift_name("retryOnExceptionOrServerErrors(maxRetries:)")));
- (void)retryOnServerErrorsMaxRetries:(int32_t)maxRetries __attribute__((swift_name("retryOnServerErrors(maxRetries:)")));
@property int32_t maxRetries __attribute__((swift_name("maxRetries")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestRetry.DelayContext")))
@interface GNCHttpRequestRetryDelayContext : GNCBase
@property (readonly) GNCKotlinThrowable * _Nullable cause __attribute__((swift_name("cause")));
@property (readonly) GNCHttpRequestBuilder *request __attribute__((swift_name("request")));
@property (readonly) GNCHttpResponse * _Nullable response __attribute__((swift_name("response")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestRetry.ModifyRequestContext")))
@interface GNCHttpRequestRetryModifyRequestContext : GNCBase
@property (readonly) GNCKotlinThrowable * _Nullable cause __attribute__((swift_name("cause")));
@property (readonly) GNCHttpRequestBuilder *request __attribute__((swift_name("request")));
@property (readonly) GNCHttpResponse * _Nullable response __attribute__((swift_name("response")));
@property (readonly) int32_t retryCount __attribute__((swift_name("retryCount")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestRetry.Plugin")))
@interface GNCHttpRequestRetryPlugin : GNCBase <GNCHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)plugin __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHttpRequestRetryPlugin *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(GNCHttpRequestRetry *)plugin scope:(GNCHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (GNCHttpRequestRetry *)prepareBlock:(void (^)(GNCHttpRequestRetryConfiguration *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) GNCEventDefinition<GNCHttpRequestRetryRetryEventData *> *HttpRequestRetryEvent __attribute__((swift_name("HttpRequestRetryEvent")));
@property (readonly) GNCAttributeKey<GNCHttpRequestRetry *> *key __attribute__((swift_name("key")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestRetry.RetryEventData")))
@interface GNCHttpRequestRetryRetryEventData : GNCBase
@property (readonly) GNCKotlinThrowable * _Nullable cause __attribute__((swift_name("cause")));
@property (readonly) GNCHttpRequestBuilder *request __attribute__((swift_name("request")));
@property (readonly) GNCHttpResponse * _Nullable response __attribute__((swift_name("response")));
@property (readonly) int32_t retryCount __attribute__((swift_name("retryCount")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestRetry.ShouldRetryContext")))
@interface GNCHttpRequestRetryShouldRetryContext : GNCBase
- (instancetype)initWithRetryCount:(int32_t)retryCount __attribute__((swift_name("init(retryCount:)"))) __attribute__((objc_designated_initializer));
@property (readonly) int32_t retryCount __attribute__((swift_name("retryCount")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestTimeoutException")))
@interface GNCHttpRequestTimeoutException : GNCIOException
- (instancetype)initWithRequest:(GNCHttpRequestBuilder *)request __attribute__((swift_name("init(request:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithRequest_:(GNCHttpRequestData *)request __attribute__((swift_name("init(request_:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithUrl:(NSString *)url timeoutMillis:(GNCLong * _Nullable)timeoutMillis __attribute__((swift_name("init(url:timeoutMillis:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString *)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpSend")))
@interface GNCHttpSend : GNCBase
@property (class, readonly, getter=companion) GNCHttpSendPlugin *companion __attribute__((swift_name("companion")));
- (void)interceptBlock:(id<GNCKotlinSuspendFunction2>)block __attribute__((swift_name("intercept(block:)")));
- (void)interceptBlock_:(id<GNCKotlinSuspendFunction3>)block __attribute__((swift_name("intercept(block_:)"))) __attribute__((unavailable("This interceptors do not allow to intercept first network call. Please use another overload and replace HttpClientCall parameter using `val call = execute(request)`")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpSend.Config")))
@interface GNCHttpSendConfig : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property int32_t maxSendCount __attribute__((swift_name("maxSendCount")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpSend.Plugin")))
@interface GNCHttpSendPlugin : GNCBase <GNCHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)plugin __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHttpSendPlugin *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(GNCHttpSend *)plugin scope:(GNCHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (GNCHttpSend *)prepareBlock:(void (^)(GNCHttpSendConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) GNCAttributeKey<GNCHttpSend *> *key __attribute__((swift_name("key")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpTimeout")))
@interface GNCHttpTimeout : GNCBase
@property (class, readonly, getter=companion) GNCHttpTimeoutPlugin *companion __attribute__((swift_name("companion")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpTimeout.HttpTimeoutCapabilityConfiguration")))
@interface GNCHttpTimeoutHttpTimeoutCapabilityConfiguration : GNCBase
- (instancetype)initWithRequestTimeoutMillis:(GNCLong * _Nullable)requestTimeoutMillis connectTimeoutMillis:(GNCLong * _Nullable)connectTimeoutMillis socketTimeoutMillis:(GNCLong * _Nullable)socketTimeoutMillis __attribute__((swift_name("init(requestTimeoutMillis:connectTimeoutMillis:socketTimeoutMillis:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCHttpTimeoutHttpTimeoutCapabilityConfigurationCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
@property GNCLong * _Nullable connectTimeoutMillis __attribute__((swift_name("connectTimeoutMillis")));
@property GNCLong * _Nullable requestTimeoutMillis __attribute__((swift_name("requestTimeoutMillis")));
@property GNCLong * _Nullable socketTimeoutMillis __attribute__((swift_name("socketTimeoutMillis")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpTimeout.HttpTimeoutCapabilityConfigurationCompanion")))
@interface GNCHttpTimeoutHttpTimeoutCapabilityConfigurationCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHttpTimeoutHttpTimeoutCapabilityConfigurationCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) GNCAttributeKey<GNCHttpTimeoutHttpTimeoutCapabilityConfiguration *> *key __attribute__((swift_name("key")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpTimeout.Plugin")))
@interface GNCHttpTimeoutPlugin : GNCBase <GNCHttpClientPlugin, GNCHttpClientEngineCapability>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)plugin __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHttpTimeoutPlugin *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(GNCHttpTimeout *)plugin scope:(GNCHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (GNCHttpTimeout *)prepareBlock:(void (^)(GNCHttpTimeoutHttpTimeoutCapabilityConfiguration *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) int64_t INFINITE_TIMEOUT_MS __attribute__((swift_name("INFINITE_TIMEOUT_MS")));
@property (readonly) GNCAttributeKey<GNCHttpTimeout *> *key __attribute__((swift_name("key")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RedirectResponseException")))
@interface GNCRedirectResponseException : GNCResponseException
- (instancetype)initWithResponse:(GNCHttpResponse *)response __attribute__((swift_name("init(response:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable("Please, provide response text in constructor")));
- (instancetype)initWithResponse:(GNCHttpResponse *)response cachedResponseText:(NSString *)cachedResponseText __attribute__((swift_name("init(response:cachedResponseText:)"))) __attribute__((objc_designated_initializer));
@property (readonly) NSString *message __attribute__((swift_name("message")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SendCountExceedException")))
@interface GNCSendCountExceedException : GNCKotlinIllegalStateException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((swift_name("Sender")))
@protocol GNCSender
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeRequestBuilder:(GNCHttpRequestBuilder *)requestBuilder completionHandler:(void (^)(GNCHttpClientCall * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("execute(requestBuilder:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ServerResponseException")))
@interface GNCServerResponseException : GNCResponseException
- (instancetype)initWithResponse:(GNCHttpResponse *)response __attribute__((swift_name("init(response:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable("Please, provide response text in constructor")));
- (instancetype)initWithResponse:(GNCHttpResponse *)response cachedResponseText:(NSString *)cachedResponseText __attribute__((swift_name("init(response:cachedResponseText:)"))) __attribute__((objc_designated_initializer));
@property (readonly) NSString *message __attribute__((swift_name("message")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UserAgent")))
@interface GNCUserAgent : GNCBase
@property (class, readonly, getter=companion) GNCUserAgentPlugin *companion __attribute__((swift_name("companion")));
@property (readonly) NSString *agent __attribute__((swift_name("agent")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UserAgent.Config")))
@interface GNCUserAgentConfig : GNCBase
- (instancetype)initWithAgent:(NSString *)agent __attribute__((swift_name("init(agent:)"))) __attribute__((objc_designated_initializer));
@property NSString *agent __attribute__((swift_name("agent")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UserAgent.Plugin")))
@interface GNCUserAgentPlugin : GNCBase <GNCHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)plugin __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCUserAgentPlugin *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(GNCUserAgent *)plugin scope:(GNCHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (GNCUserAgent *)prepareBlock:(void (^)(GNCUserAgentConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) GNCAttributeKey<GNCUserAgent *> *key __attribute__((swift_name("key")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCache")))
@interface GNCHttpCache : GNCBase
@property (class, readonly, getter=companion) GNCHttpCacheCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) GNCHttpCacheStorage *privateStorage __attribute__((swift_name("privateStorage")));
@property (readonly) GNCHttpCacheStorage *publicStorage __attribute__((swift_name("publicStorage")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCache.Companion")))
@interface GNCHttpCacheCompanion : GNCBase <GNCHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHttpCacheCompanion *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(GNCHttpCache *)plugin scope:(GNCHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (GNCHttpCache *)prepareBlock:(void (^)(GNCHttpCacheConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) GNCEventDefinition<GNCHttpResponse *> *HttpResponseFromCache __attribute__((swift_name("HttpResponseFromCache")));
@property (readonly) GNCAttributeKey<GNCHttpCache *> *key __attribute__((swift_name("key")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCache.Config")))
@interface GNCHttpCacheConfig : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property GNCHttpCacheStorage *privateStorage __attribute__((swift_name("privateStorage")));
@property GNCHttpCacheStorage *publicStorage __attribute__((swift_name("publicStorage")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCacheEntry")))
@interface GNCHttpCacheEntry : GNCBase
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
@property (readonly) GNCKotlinByteArray *body __attribute__((swift_name("body")));
@property (readonly) GNCGMTDate *expires __attribute__((swift_name("expires")));
@property (readonly) GNCHttpResponse *response __attribute__((swift_name("response")));
@property (readonly) NSDictionary<NSString *, NSString *> *varyKeys __attribute__((swift_name("varyKeys")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InvalidCacheStateException")))
@interface GNCInvalidCacheStateException : GNCKotlinIllegalStateException
- (instancetype)initWithRequestUrl:(GNCUrl *)requestUrl __attribute__((swift_name("init(requestUrl:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((swift_name("HttpCacheStorage")))
@interface GNCHttpCacheStorage : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property (class, readonly, getter=companion) GNCHttpCacheStorageCompanion *companion __attribute__((swift_name("companion")));
- (GNCHttpCacheEntry * _Nullable)findUrl:(GNCUrl *)url varyKeys:(NSDictionary<NSString *, NSString *> *)varyKeys __attribute__((swift_name("find(url:varyKeys:)")));
- (NSSet<GNCHttpCacheEntry *> *)findByUrlUrl:(GNCUrl *)url __attribute__((swift_name("findByUrl(url:)")));
- (void)storeUrl:(GNCUrl *)url value:(GNCHttpCacheEntry *)value __attribute__((swift_name("store(url:value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCacheStorage.Companion")))
@interface GNCHttpCacheStorageCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHttpCacheStorageCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) GNCHttpCacheStorage *Disabled __attribute__((swift_name("Disabled")));
@property (readonly) GNCHttpCacheStorage *(^Unlimited)(void) __attribute__((swift_name("Unlimited")));
@end

__attribute__((swift_name("WebSocketSession")))
@protocol GNCWebSocketSession <GNCCoroutineScope>
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)flushWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("flush(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)sendFrame:(GNCFrame *)frame completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("send(frame:completionHandler:)")));
- (void)terminate __attribute__((swift_name("terminate()"))) __attribute__((deprecated("Use cancel() instead.")));
@property (readonly) NSArray<id<GNCWebSocketExtension>> *extensions __attribute__((swift_name("extensions")));
@property (readonly) id<GNCReceiveChannel> incoming __attribute__((swift_name("incoming")));
@property BOOL masking __attribute__((swift_name("masking")));
@property int64_t maxFrameSize __attribute__((swift_name("maxFrameSize")));
@property (readonly) id<GNCSendChannel> outgoing __attribute__((swift_name("outgoing")));
@end

__attribute__((swift_name("ClientWebSocketSession")))
@protocol GNCClientWebSocketSession <GNCWebSocketSession>
@required
@property (readonly) GNCHttpClientCall *call __attribute__((swift_name("call")));
@end

__attribute__((swift_name("DefaultWebSocketSession")))
@protocol GNCDefaultWebSocketSession <GNCWebSocketSession>
@required
- (void)startNegotiatedExtensions:(NSArray<id<GNCWebSocketExtension>> *)negotiatedExtensions __attribute__((swift_name("start(negotiatedExtensions:)")));
@property (readonly) id<GNCDeferred> closeReason __attribute__((swift_name("closeReason")));
@property int64_t pingIntervalMillis __attribute__((swift_name("pingIntervalMillis")));
@property int64_t timeoutMillis __attribute__((swift_name("timeoutMillis")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultClientWebSocketSession")))
@interface GNCDefaultClientWebSocketSession : GNCBase <GNCClientWebSocketSession, GNCDefaultWebSocketSession>
- (instancetype)initWithCall:(GNCHttpClientCall *)call delegate:(id<GNCDefaultWebSocketSession>)delegate __attribute__((swift_name("init(call:delegate:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)flushWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("flush(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)sendFrame:(GNCFrame *)frame completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("send(frame:completionHandler:)")));
- (void)startNegotiatedExtensions:(NSArray<id<GNCWebSocketExtension>> *)negotiatedExtensions __attribute__((swift_name("start(negotiatedExtensions:)")));
- (void)terminate __attribute__((swift_name("terminate()"))) __attribute__((deprecated("Use cancel() instead.")));
@property (readonly) GNCHttpClientCall *call __attribute__((swift_name("call")));
@property (readonly) id<GNCDeferred> closeReason __attribute__((swift_name("closeReason")));
@property (readonly) id<GNCKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@property (readonly) NSArray<id<GNCWebSocketExtension>> *extensions __attribute__((swift_name("extensions")));
@property (readonly) id<GNCReceiveChannel> incoming __attribute__((swift_name("incoming")));
@property BOOL masking __attribute__((swift_name("masking")));
@property int64_t maxFrameSize __attribute__((swift_name("maxFrameSize")));
@property (readonly) id<GNCSendChannel> outgoing __attribute__((swift_name("outgoing")));
@property int64_t pingIntervalMillis __attribute__((swift_name("pingIntervalMillis")));
@property int64_t timeoutMillis __attribute__((swift_name("timeoutMillis")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSocketCapability")))
@interface GNCWebSocketCapability : GNCBase <GNCHttpClientEngineCapability>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)webSocketCapability __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCWebSocketCapability *shared __attribute__((swift_name("shared")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSocketException")))
@interface GNCWebSocketException : GNCKotlinIllegalStateException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSocketExtensionsCapability")))
@interface GNCWebSocketExtensionsCapability : GNCBase <GNCHttpClientEngineCapability>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)webSocketExtensionsCapability __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCWebSocketExtensionsCapability *shared __attribute__((swift_name("shared")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSockets")))
@interface GNCWebSockets : GNCBase
- (instancetype)initWithPingInterval:(int64_t)pingInterval maxFrameSize:(int64_t)maxFrameSize __attribute__((swift_name("init(pingInterval:maxFrameSize:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property (class, readonly, getter=companion) GNCWebSocketsPlugin *companion __attribute__((swift_name("companion")));
@property (readonly) id<GNCWebsocketContentConverter> _Nullable contentConverter __attribute__((swift_name("contentConverter")));
@property (readonly) int64_t maxFrameSize __attribute__((swift_name("maxFrameSize")));
@property (readonly) int64_t pingInterval __attribute__((swift_name("pingInterval")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSockets.Config")))
@interface GNCWebSocketsConfig : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)extensionsBlock:(void (^)(GNCWebSocketExtensionsConfig *))block __attribute__((swift_name("extensions(block:)")));
@property id<GNCWebsocketContentConverter> _Nullable contentConverter __attribute__((swift_name("contentConverter")));
@property int64_t maxFrameSize __attribute__((swift_name("maxFrameSize")));
@property int64_t pingInterval __attribute__((swift_name("pingInterval")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSockets.Plugin")))
@interface GNCWebSocketsPlugin : GNCBase <GNCHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)plugin __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCWebSocketsPlugin *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(GNCWebSockets *)plugin scope:(GNCHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (GNCWebSockets *)prepareBlock:(void (^)(GNCWebSocketsConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) GNCAttributeKey<GNCWebSockets *> *key __attribute__((swift_name("key")));
@end

__attribute__((swift_name("CookiesStorage")))
@protocol GNCCookiesStorage <GNCCloseable>
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)addCookieRequestUrl:(GNCUrl *)requestUrl cookie:(GNCCookie *)cookie completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("addCookie(requestUrl:cookie:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)getRequestUrl:(GNCUrl *)requestUrl completionHandler:(void (^)(NSArray<GNCCookie *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("get(requestUrl:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AcceptAllCookiesStorage")))
@interface GNCAcceptAllCookiesStorage : GNCBase <GNCCookiesStorage>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)addCookieRequestUrl:(GNCUrl *)requestUrl cookie:(GNCCookie *)cookie completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("addCookie(requestUrl:cookie:completionHandler:)")));
- (void)close __attribute__((swift_name("close()")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)getRequestUrl:(GNCUrl *)requestUrl completionHandler:(void (^)(NSArray<GNCCookie *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("get(requestUrl:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ConstantCookiesStorage")))
@interface GNCConstantCookiesStorage : GNCBase <GNCCookiesStorage>
- (instancetype)initWithCookies:(GNCKotlinArray<GNCCookie *> *)cookies __attribute__((swift_name("init(cookies:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)addCookieRequestUrl:(GNCUrl *)requestUrl cookie:(GNCCookie *)cookie completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("addCookie(requestUrl:cookie:completionHandler:)")));
- (void)close __attribute__((swift_name("close()")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)getRequestUrl:(GNCUrl *)requestUrl completionHandler:(void (^)(NSArray<GNCCookie *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("get(requestUrl:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCookies")))
@interface GNCHttpCookies : GNCBase <GNCCloseable>
@property (class, readonly, getter=companion) GNCHttpCookiesCompanion *companion __attribute__((swift_name("companion")));
- (void)close __attribute__((swift_name("close()")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)getRequestUrl:(GNCUrl *)requestUrl completionHandler:(void (^)(NSArray<GNCCookie *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("get(requestUrl:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCookies.Companion")))
@interface GNCHttpCookiesCompanion : GNCBase <GNCHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHttpCookiesCompanion *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(GNCHttpCookies *)plugin scope:(GNCHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (GNCHttpCookies *)prepareBlock:(void (^)(GNCHttpCookiesConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) GNCAttributeKey<GNCHttpCookies *> *key __attribute__((swift_name("key")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCookies.Config")))
@interface GNCHttpCookiesConfig : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)defaultBlock:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("default(block:)")));
@property id<GNCCookiesStorage> storage __attribute__((swift_name("storage")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ResponseObserver")))
@interface GNCResponseObserver : GNCBase
- (instancetype)initWithResponseHandler:(id<GNCKotlinSuspendFunction1>)responseHandler filter:(GNCBoolean *(^ _Nullable)(GNCHttpClientCall *))filter __attribute__((swift_name("init(responseHandler:filter:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCResponseObserverPlugin *companion __attribute__((swift_name("companion")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ResponseObserver.Config")))
@interface GNCResponseObserverConfig : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)filterBlock:(GNCBoolean *(^)(GNCHttpClientCall *))block __attribute__((swift_name("filter(block:)")));
- (void)onResponseBlock:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("onResponse(block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ResponseObserver.Plugin")))
@interface GNCResponseObserverPlugin : GNCBase <GNCHttpClientPlugin>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)plugin __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCResponseObserverPlugin *shared __attribute__((swift_name("shared")));
- (void)installPlugin:(GNCResponseObserver *)plugin scope:(GNCHttpClient *)scope __attribute__((swift_name("install(plugin:scope:)")));
- (GNCResponseObserver *)prepareBlock:(void (^)(GNCResponseObserverConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) GNCAttributeKey<GNCResponseObserver *> *key __attribute__((swift_name("key")));
@end

__attribute__((swift_name("EventDefinition")))
@interface GNCEventDefinition<T> : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Events")))
@interface GNCEvents : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)raiseDefinition:(GNCEventDefinition<id> *)definition value:(id _Nullable)value __attribute__((swift_name("raise(definition:value:)")));
- (id<GNCDisposableHandle>)subscribeDefinition:(GNCEventDefinition<id> *)definition handler:(void (^)(id _Nullable))handler __attribute__((swift_name("subscribe(definition:handler:)")));
- (void)unsubscribeDefinition:(GNCEventDefinition<id> *)definition handler:(void (^)(id _Nullable))handler __attribute__((swift_name("unsubscribe(definition:handler:)")));
@end

__attribute__((swift_name("ContentConverter")))
@protocol GNCContentConverter
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)deserializeCharset:(GNCCharset *)charset typeInfo:(GNCTypeInfo *)typeInfo content:(id<GNCByteReadChannel>)content completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("deserialize(charset:typeInfo:content:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)serializeContentType:(GNCContentType *)contentType charset:(GNCCharset *)charset typeInfo:(GNCTypeInfo *)typeInfo value:(id)value completionHandler:(void (^)(GNCOutgoingContent * _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("serialize(contentType:charset:typeInfo:value:completionHandler:)"))) __attribute__((deprecated("Please override and use serializeNullable instead")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)serializeNullableContentType:(GNCContentType *)contentType charset:(GNCCharset *)charset typeInfo:(GNCTypeInfo *)typeInfo value:(id _Nullable)value completionHandler:(void (^)(GNCOutgoingContent * _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("serializeNullable(contentType:charset:typeInfo:value:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinxSerializationConverter")))
@interface GNCKotlinxSerializationConverter : GNCBase <GNCContentConverter>
- (instancetype)initWithFormat:(id<GNCSerialFormat>)format __attribute__((swift_name("init(format:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)deserializeCharset:(GNCCharset *)charset typeInfo:(GNCTypeInfo *)typeInfo content:(id<GNCByteReadChannel>)content completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("deserialize(charset:typeInfo:content:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)serializeContentType:(GNCContentType *)contentType charset:(GNCCharset *)charset typeInfo:(GNCTypeInfo *)typeInfo value:(id)value completionHandler:(void (^)(GNCOutgoingContent * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("serialize(contentType:charset:typeInfo:value:completionHandler:)"))) __attribute__((deprecated("Please override and use serializeNullable instead")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)serializeNullableContentType:(GNCContentType *)contentType charset:(GNCCharset *)charset typeInfo:(GNCTypeInfo *)typeInfo value:(id _Nullable)value completionHandler:(void (^)(GNCOutgoingContent * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("serializeNullable(contentType:charset:typeInfo:value:completionHandler:)")));
@end

__attribute__((swift_name("WebsocketContentConverter")))
@protocol GNCWebsocketContentConverter
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)deserializeCharset:(GNCCharset *)charset typeInfo:(GNCTypeInfo *)typeInfo content:(GNCFrame *)content completionHandler_:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("deserialize(charset:typeInfo:content:completionHandler_:)")));
- (BOOL)isApplicableFrame:(GNCFrame *)frame __attribute__((swift_name("isApplicable(frame:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)serializeCharset:(GNCCharset *)charset typeInfo:(GNCTypeInfo *)typeInfo value:(id)value completionHandler:(void (^)(GNCFrame * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("serialize(charset:typeInfo:value:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)serializeNullableCharset:(GNCCharset *)charset typeInfo:(GNCTypeInfo *)typeInfo value:(id _Nullable)value completionHandler:(void (^)(GNCFrame * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("serializeNullable(charset:typeInfo:value:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinxWebsocketSerializationConverter")))
@interface GNCKotlinxWebsocketSerializationConverter : GNCBase <GNCWebsocketContentConverter>
- (instancetype)initWithFormat:(id<GNCSerialFormat>)format __attribute__((swift_name("init(format:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)deserializeCharset:(GNCCharset *)charset typeInfo:(GNCTypeInfo *)typeInfo content:(GNCFrame *)content completionHandler_:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("deserialize(charset:typeInfo:content:completionHandler_:)")));
- (BOOL)isApplicableFrame:(GNCFrame *)frame __attribute__((swift_name("isApplicable(frame:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)serializeNullableCharset:(GNCCharset *)charset typeInfo:(GNCTypeInfo *)typeInfo value:(id _Nullable)value completionHandler:(void (^)(GNCFrame * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("serializeNullable(charset:typeInfo:value:completionHandler:)")));
@end

__attribute__((swift_name("ContentConvertException")))
@interface GNCContentConvertException : GNCKotlinException
- (instancetype)initWithMessage:(NSString *)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonConvertException")))
@interface GNCJsonConvertException : GNCContentConvertException
- (instancetype)initWithMessage:(NSString *)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((swift_name("WebsocketContentConvertException")))
@interface GNCWebsocketContentConvertException : GNCContentConvertException
- (instancetype)initWithMessage:(NSString *)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebsocketConverterNotFoundException")))
@interface GNCWebsocketConverterNotFoundException : GNCWebsocketContentConvertException
- (instancetype)initWithMessage:(NSString *)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebsocketDeserializeException")))
@interface GNCWebsocketDeserializeException : GNCWebsocketContentConvertException
- (instancetype)initWithMessage:(NSString *)message cause:(GNCKotlinThrowable * _Nullable)cause frame:(GNCFrame *)frame __attribute__((swift_name("init(message:cause:frame:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString *)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) GNCFrame *frame __attribute__((swift_name("frame")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CloseReason")))
@interface GNCCloseReason : GNCBase
- (instancetype)initWithCode:(GNCCloseReasonCodes *)code message:(NSString *)message __attribute__((swift_name("init(code:message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCode:(int16_t)code message_:(NSString *)message __attribute__((swift_name("init(code:message_:)"))) __attribute__((objc_designated_initializer));
- (GNCCloseReason *)doCopyCode:(int16_t)code message:(NSString *)message __attribute__((swift_name("doCopy(code:message:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int16_t code __attribute__((swift_name("code")));
@property (readonly) GNCCloseReasonCodes * _Nullable knownReason __attribute__((swift_name("knownReason")));
@property (readonly) NSString *message __attribute__((swift_name("message")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CloseReason.Codes")))
@interface GNCCloseReasonCodes : GNCKotlinEnum<GNCCloseReasonCodes *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCCloseReasonCodesCompanion *companion __attribute__((swift_name("companion")));
@property (class, readonly) GNCCloseReasonCodes *normal __attribute__((swift_name("normal")));
@property (class, readonly) GNCCloseReasonCodes *goingAway __attribute__((swift_name("goingAway")));
@property (class, readonly) GNCCloseReasonCodes *protocolError __attribute__((swift_name("protocolError")));
@property (class, readonly) GNCCloseReasonCodes *cannotAccept __attribute__((swift_name("cannotAccept")));
@property (class, readonly) GNCCloseReasonCodes *closedAbnormally __attribute__((swift_name("closedAbnormally")));
@property (class, readonly) GNCCloseReasonCodes *notConsistent __attribute__((swift_name("notConsistent")));
@property (class, readonly) GNCCloseReasonCodes *violatedPolicy __attribute__((swift_name("violatedPolicy")));
@property (class, readonly) GNCCloseReasonCodes *tooBig __attribute__((swift_name("tooBig")));
@property (class, readonly) GNCCloseReasonCodes *noExtension __attribute__((swift_name("noExtension")));
@property (class, readonly) GNCCloseReasonCodes *internalError __attribute__((swift_name("internalError")));
@property (class, readonly) GNCCloseReasonCodes *serviceRestart __attribute__((swift_name("serviceRestart")));
@property (class, readonly) GNCCloseReasonCodes *tryAgainLater __attribute__((swift_name("tryAgainLater")));
+ (GNCKotlinArray<GNCCloseReasonCodes *> *)values __attribute__((swift_name("values()")));
@property (readonly) int16_t code __attribute__((swift_name("code")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CloseReason.CodesCompanion")))
@interface GNCCloseReasonCodesCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCCloseReasonCodesCompanion *shared __attribute__((swift_name("shared")));
- (GNCCloseReasonCodes * _Nullable)byCodeCode:(int16_t)code __attribute__((swift_name("byCode(code:)")));
@property (readonly) GNCCloseReasonCodes *UNEXPECTED_CONDITION __attribute__((swift_name("UNEXPECTED_CONDITION"))) __attribute__((deprecated("Use INTERNAL_ERROR instead.")));
@end

__attribute__((swift_name("Frame")))
@interface GNCFrame : GNCBase
@property (class, readonly, getter=companion) GNCFrameCompanion *companion __attribute__((swift_name("companion")));
- (GNCFrame *)doCopy __attribute__((swift_name("doCopy()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCKotlinByteArray *data __attribute__((swift_name("data")));
@property (readonly) id<GNCDisposableHandle> disposableHandle __attribute__((swift_name("disposableHandle")));
@property (readonly) BOOL fin __attribute__((swift_name("fin")));
@property (readonly) GNCFrameType *frameType __attribute__((swift_name("frameType")));
@property (readonly) BOOL rsv1 __attribute__((swift_name("rsv1")));
@property (readonly) BOOL rsv2 __attribute__((swift_name("rsv2")));
@property (readonly) BOOL rsv3 __attribute__((swift_name("rsv3")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Frame.Binary")))
@interface GNCFrameBinary : GNCFrame
- (instancetype)initWithFin:(BOOL)fin data:(GNCKotlinByteArray *)data __attribute__((swift_name("init(fin:data:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithFin:(BOOL)fin packet:(GNCByteReadPacket *)packet __attribute__((swift_name("init(fin:packet:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithFin:(BOOL)fin data:(GNCKotlinByteArray *)data rsv1:(BOOL)rsv1 rsv2:(BOOL)rsv2 rsv3:(BOOL)rsv3 __attribute__((swift_name("init(fin:data:rsv1:rsv2:rsv3:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Frame.Close")))
@interface GNCFrameClose : GNCFrame
- (instancetype)initWithReason:(GNCCloseReason *)reason __attribute__((swift_name("init(reason:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithPacket:(GNCByteReadPacket *)packet __attribute__((swift_name("init(packet:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithData:(GNCKotlinByteArray *)data __attribute__((swift_name("init(data:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Frame.Companion")))
@interface GNCFrameCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCFrameCompanion *shared __attribute__((swift_name("shared")));
- (GNCFrame *)byTypeFin:(BOOL)fin frameType:(GNCFrameType *)frameType data:(GNCKotlinByteArray *)data rsv1:(BOOL)rsv1 rsv2:(BOOL)rsv2 rsv3:(BOOL)rsv3 __attribute__((swift_name("byType(fin:frameType:data:rsv1:rsv2:rsv3:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Frame.Ping")))
@interface GNCFramePing : GNCFrame
- (instancetype)initWithPacket:(GNCByteReadPacket *)packet __attribute__((swift_name("init(packet:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithData:(GNCKotlinByteArray *)data __attribute__((swift_name("init(data:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Frame.Pong")))
@interface GNCFramePong : GNCFrame
- (instancetype)initWithPacket:(GNCByteReadPacket *)packet __attribute__((swift_name("init(packet:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithData:(GNCKotlinByteArray *)data disposableHandle:(id<GNCDisposableHandle>)disposableHandle __attribute__((swift_name("init(data:disposableHandle:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Frame.Text")))
@interface GNCFrameText : GNCFrame
- (instancetype)initWithFin:(BOOL)fin data:(GNCKotlinByteArray *)data __attribute__((swift_name("init(fin:data:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithText:(NSString *)text __attribute__((swift_name("init(text:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithFin:(BOOL)fin packet:(GNCByteReadPacket *)packet __attribute__((swift_name("init(fin:packet:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithFin:(BOOL)fin data:(GNCKotlinByteArray *)data rsv1:(BOOL)rsv1 rsv2:(BOOL)rsv2 rsv3:(BOOL)rsv3 __attribute__((swift_name("init(fin:data:rsv1:rsv2:rsv3:)"))) __attribute__((objc_designated_initializer));
@end


/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
__attribute__((swift_name("CopyableThrowable")))
@protocol GNCCopyableThrowable
@required
- (GNCKotlinThrowable * _Nullable)createCopy __attribute__((swift_name("createCopy()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FrameTooBigException")))
@interface GNCFrameTooBigException : GNCKotlinException <GNCCopyableThrowable>
- (instancetype)initWithFrameSize:(int64_t)frameSize __attribute__((swift_name("init(frameSize:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (GNCFrameTooBigException *)createCopy __attribute__((swift_name("createCopy()")));
@property (readonly) int64_t frameSize __attribute__((swift_name("frameSize")));
@property (readonly) NSString *message __attribute__((swift_name("message")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FrameType")))
@interface GNCFrameType : GNCKotlinEnum<GNCFrameType *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCFrameTypeCompanion *companion __attribute__((swift_name("companion")));
@property (class, readonly) GNCFrameType *text __attribute__((swift_name("text")));
@property (class, readonly) GNCFrameType *binary __attribute__((swift_name("binary")));
@property (class, readonly) GNCFrameType *close __attribute__((swift_name("close")));
@property (class, readonly) GNCFrameType *ping __attribute__((swift_name("ping")));
@property (class, readonly) GNCFrameType *pong __attribute__((swift_name("pong")));
+ (GNCKotlinArray<GNCFrameType *> *)values __attribute__((swift_name("values()")));
@property (readonly) BOOL controlFrame __attribute__((swift_name("controlFrame")));
@property (readonly) int32_t opcode __attribute__((swift_name("opcode")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FrameType.Companion")))
@interface GNCFrameTypeCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCFrameTypeCompanion *shared __attribute__((swift_name("shared")));
- (GNCFrameType * _Nullable)getOpcode:(int32_t)opcode __attribute__((swift_name("get(opcode:)")));
@end

__attribute__((swift_name("WebSocketExtension")))
@protocol GNCWebSocketExtension
@required
- (BOOL)clientNegotiationNegotiatedProtocols:(NSArray<GNCWebSocketExtensionHeader *> *)negotiatedProtocols __attribute__((swift_name("clientNegotiation(negotiatedProtocols:)")));
- (GNCFrame *)processIncomingFrameFrame:(GNCFrame *)frame __attribute__((swift_name("processIncomingFrame(frame:)")));
- (GNCFrame *)processOutgoingFrameFrame:(GNCFrame *)frame __attribute__((swift_name("processOutgoingFrame(frame:)")));
- (NSArray<GNCWebSocketExtensionHeader *> *)serverNegotiationRequestedProtocols:(NSArray<GNCWebSocketExtensionHeader *> *)requestedProtocols __attribute__((swift_name("serverNegotiation(requestedProtocols:)")));
@property (readonly) id<GNCWebSocketExtensionFactory> factory __attribute__((swift_name("factory")));
@property (readonly) NSArray<GNCWebSocketExtensionHeader *> *protocols __attribute__((swift_name("protocols")));
@end

__attribute__((swift_name("WebSocketExtensionFactory")))
@protocol GNCWebSocketExtensionFactory
@required
- (id<GNCWebSocketExtension>)installConfig:(void (^)(id))config __attribute__((swift_name("install(config:)")));
@property (readonly) GNCAttributeKey<id<GNCWebSocketExtension>> *key __attribute__((swift_name("key")));
@property (readonly) BOOL rsv1 __attribute__((swift_name("rsv1")));
@property (readonly) BOOL rsv2 __attribute__((swift_name("rsv2")));
@property (readonly) BOOL rsv3 __attribute__((swift_name("rsv3")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSocketExtensionHeader")))
@interface GNCWebSocketExtensionHeader : GNCBase
- (instancetype)initWithName:(NSString *)name parameters:(NSArray<NSString *> *)parameters __attribute__((swift_name("init(name:parameters:)"))) __attribute__((objc_designated_initializer));
- (id<GNCKotlinSequence>)parseParameters __attribute__((swift_name("parseParameters()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) NSArray<NSString *> *parameters __attribute__((swift_name("parameters")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSocketExtensionsConfig")))
@interface GNCWebSocketExtensionsConfig : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSArray<id<GNCWebSocketExtension>> *)build __attribute__((swift_name("build()")));
- (void)installExtension:(id<GNCWebSocketExtensionFactory>)extension config:(void (^)(id))config __attribute__((swift_name("install(extension:config:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BadContentTypeFormatException")))
@interface GNCBadContentTypeFormatException : GNCKotlinException
- (instancetype)initWithValue:(NSString *)value __attribute__((swift_name("init(value:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((swift_name("CacheControl_")))
@interface GNCCacheControl_ : GNCBase
@property (readonly) GNCCacheControl_Visibility * _Nullable visibility __attribute__((swift_name("visibility")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CacheControl_.MaxAge")))
@interface GNCCacheControl_MaxAge : GNCCacheControl_
- (instancetype)initWithMaxAgeSeconds:(int32_t)maxAgeSeconds proxyMaxAgeSeconds:(GNCInt * _Nullable)proxyMaxAgeSeconds mustRevalidate:(BOOL)mustRevalidate proxyRevalidate:(BOOL)proxyRevalidate visibility:(GNCCacheControl_Visibility * _Nullable)visibility __attribute__((swift_name("init(maxAgeSeconds:proxyMaxAgeSeconds:mustRevalidate:proxyRevalidate:visibility:)"))) __attribute__((objc_designated_initializer));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t maxAgeSeconds __attribute__((swift_name("maxAgeSeconds")));
@property (readonly) BOOL mustRevalidate __attribute__((swift_name("mustRevalidate")));
@property (readonly) GNCInt * _Nullable proxyMaxAgeSeconds __attribute__((swift_name("proxyMaxAgeSeconds")));
@property (readonly) BOOL proxyRevalidate __attribute__((swift_name("proxyRevalidate")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CacheControl_.NoCache")))
@interface GNCCacheControl_NoCache : GNCCacheControl_
- (instancetype)initWithVisibility:(GNCCacheControl_Visibility * _Nullable)visibility __attribute__((swift_name("init(visibility:)"))) __attribute__((objc_designated_initializer));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CacheControl_.NoStore")))
@interface GNCCacheControl_NoStore : GNCCacheControl_
- (instancetype)initWithVisibility:(GNCCacheControl_Visibility * _Nullable)visibility __attribute__((swift_name("init(visibility:)"))) __attribute__((objc_designated_initializer));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CacheControl_.Visibility")))
@interface GNCCacheControl_Visibility : GNCKotlinEnum<GNCCacheControl_Visibility *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCCacheControl_Visibility *public_ __attribute__((swift_name("public_")));
@property (class, readonly) GNCCacheControl_Visibility *private_ __attribute__((swift_name("private_")));
+ (GNCKotlinArray<GNCCacheControl_Visibility *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((swift_name("HeaderValueWithParameters")))
@interface GNCHeaderValueWithParameters : GNCBase
- (instancetype)initWithContent:(NSString *)content parameters:(NSArray<GNCHeaderValueParam *> *)parameters __attribute__((swift_name("init(content:parameters:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCHeaderValueWithParametersCompanion *companion __attribute__((swift_name("companion")));
- (NSString * _Nullable)parameterName:(NSString *)name __attribute__((swift_name("parameter(name:)")));
- (NSString *)description __attribute__((swift_name("description()")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@property (readonly) NSString *content __attribute__((swift_name("content")));
@property (readonly) NSArray<GNCHeaderValueParam *> *parameters __attribute__((swift_name("parameters")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentDisposition")))
@interface GNCContentDisposition : GNCHeaderValueWithParameters
- (instancetype)initWithDisposition:(NSString *)disposition parameters:(NSArray<GNCHeaderValueParam *> *)parameters __attribute__((swift_name("init(disposition:parameters:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithContent:(NSString *)content parameters:(NSArray<GNCHeaderValueParam *> *)parameters __attribute__((swift_name("init(content:parameters:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCContentDispositionCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (GNCContentDisposition *)withParameterKey:(NSString *)key value:(NSString *)value encodeValue:(BOOL)encodeValue __attribute__((swift_name("withParameter(key:value:encodeValue:)")));
- (GNCContentDisposition *)withParametersNewParameters:(NSArray<GNCHeaderValueParam *> *)newParameters __attribute__((swift_name("withParameters(newParameters:)")));
@property (readonly) NSString *disposition __attribute__((swift_name("disposition")));
@property (readonly) NSString * _Nullable name __attribute__((swift_name("name")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentDisposition.Companion")))
@interface GNCContentDispositionCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCContentDispositionCompanion *shared __attribute__((swift_name("shared")));
- (GNCContentDisposition *)parseValue:(NSString *)value __attribute__((swift_name("parse(value:)")));
@property (readonly) GNCContentDisposition *Attachment __attribute__((swift_name("Attachment")));
@property (readonly) GNCContentDisposition *File __attribute__((swift_name("File")));
@property (readonly) GNCContentDisposition *Inline __attribute__((swift_name("Inline")));
@property (readonly) GNCContentDisposition *Mixed __attribute__((swift_name("Mixed")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentDisposition.Parameters")))
@interface GNCContentDispositionParameters : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)parameters __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCContentDispositionParameters *shared __attribute__((swift_name("shared")));
@property (readonly) NSString *CreationDate __attribute__((swift_name("CreationDate")));
@property (readonly) NSString *FileName __attribute__((swift_name("FileName")));
@property (readonly) NSString *FileNameAsterisk __attribute__((swift_name("FileNameAsterisk")));
@property (readonly) NSString *Handling __attribute__((swift_name("Handling")));
@property (readonly) NSString *ModificationDate __attribute__((swift_name("ModificationDate")));
@property (readonly) NSString *Name __attribute__((swift_name("Name")));
@property (readonly) NSString *ReadDate __attribute__((swift_name("ReadDate")));
@property (readonly) NSString *Size __attribute__((swift_name("Size")));
@end

__attribute__((swift_name("ContentRange")))
@interface GNCContentRange : GNCBase
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentRange.Bounded")))
@interface GNCContentRangeBounded : GNCContentRange
- (instancetype)initWithFrom:(int64_t)from to:(int64_t)to __attribute__((swift_name("init(from:to:)"))) __attribute__((objc_designated_initializer));
- (GNCContentRangeBounded *)doCopyFrom:(int64_t)from to:(int64_t)to __attribute__((swift_name("doCopy(from:to:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t from __attribute__((swift_name("from")));
@property (readonly) int64_t to __attribute__((swift_name("to")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentRange.Suffix")))
@interface GNCContentRangeSuffix : GNCContentRange
- (instancetype)initWithLastCount:(int64_t)lastCount __attribute__((swift_name("init(lastCount:)"))) __attribute__((objc_designated_initializer));
- (GNCContentRangeSuffix *)doCopyLastCount:(int64_t)lastCount __attribute__((swift_name("doCopy(lastCount:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t lastCount __attribute__((swift_name("lastCount")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentRange.TailFrom")))
@interface GNCContentRangeTailFrom : GNCContentRange
- (instancetype)initWithFrom:(int64_t)from __attribute__((swift_name("init(from:)"))) __attribute__((objc_designated_initializer));
- (GNCContentRangeTailFrom *)doCopyFrom:(int64_t)from __attribute__((swift_name("doCopy(from:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t from __attribute__((swift_name("from")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentType")))
@interface GNCContentType : GNCHeaderValueWithParameters
- (instancetype)initWithContentType:(NSString *)contentType contentSubtype:(NSString *)contentSubtype parameters:(NSArray<GNCHeaderValueParam *> *)parameters __attribute__((swift_name("init(contentType:contentSubtype:parameters:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithContent:(NSString *)content parameters:(NSArray<GNCHeaderValueParam *> *)parameters __attribute__((swift_name("init(content:parameters:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCContentTypeCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)matchPattern:(GNCContentType *)pattern __attribute__((swift_name("match(pattern:)")));
- (BOOL)matchPattern_:(NSString *)pattern __attribute__((swift_name("match(pattern_:)")));
- (GNCContentType *)withParameterName:(NSString *)name value:(NSString *)value __attribute__((swift_name("withParameter(name:value:)")));
- (GNCContentType *)withoutParameters __attribute__((swift_name("withoutParameters()")));
@property (readonly) NSString *contentSubtype __attribute__((swift_name("contentSubtype")));
@property (readonly) NSString *contentType __attribute__((swift_name("contentType")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentType.Application")))
@interface GNCContentTypeApplication : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)application __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCContentTypeApplication *shared __attribute__((swift_name("shared")));
@property (readonly) GNCContentType *Any __attribute__((swift_name("Any")));
@property (readonly) GNCContentType *Atom __attribute__((swift_name("Atom")));
@property (readonly) GNCContentType *Cbor __attribute__((swift_name("Cbor")));
@property (readonly) GNCContentType *Docx __attribute__((swift_name("Docx")));
@property (readonly) GNCContentType *FontWoff __attribute__((swift_name("FontWoff")));
@property (readonly) GNCContentType *FormUrlEncoded __attribute__((swift_name("FormUrlEncoded")));
@property (readonly) GNCContentType *GZip __attribute__((swift_name("GZip")));
@property (readonly) GNCContentType *HalJson __attribute__((swift_name("HalJson")));
@property (readonly) GNCContentType *JavaScript __attribute__((swift_name("JavaScript")));
@property (readonly) GNCContentType *Json __attribute__((swift_name("Json")));
@property (readonly) GNCContentType *OctetStream __attribute__((swift_name("OctetStream")));
@property (readonly) GNCContentType *Pdf __attribute__((swift_name("Pdf")));
@property (readonly) GNCContentType *Pptx __attribute__((swift_name("Pptx")));
@property (readonly) GNCContentType *ProblemJson __attribute__((swift_name("ProblemJson")));
@property (readonly) GNCContentType *ProblemXml __attribute__((swift_name("ProblemXml")));
@property (readonly) GNCContentType *ProtoBuf __attribute__((swift_name("ProtoBuf")));
@property (readonly) GNCContentType *Rss __attribute__((swift_name("Rss")));
@property (readonly) GNCContentType *Wasm __attribute__((swift_name("Wasm")));
@property (readonly) GNCContentType *Xlsx __attribute__((swift_name("Xlsx")));
@property (readonly) GNCContentType *Xml __attribute__((swift_name("Xml")));
@property (readonly) GNCContentType *Xml_Dtd __attribute__((swift_name("Xml_Dtd")));
@property (readonly) GNCContentType *Zip __attribute__((swift_name("Zip")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentType.Audio")))
@interface GNCContentTypeAudio : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)audio __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCContentTypeAudio *shared __attribute__((swift_name("shared")));
@property (readonly) GNCContentType *Any __attribute__((swift_name("Any")));
@property (readonly) GNCContentType *MP4 __attribute__((swift_name("MP4")));
@property (readonly) GNCContentType *MPEG __attribute__((swift_name("MPEG")));
@property (readonly) GNCContentType *OGG __attribute__((swift_name("OGG")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentType.Companion")))
@interface GNCContentTypeCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCContentTypeCompanion *shared __attribute__((swift_name("shared")));
- (GNCContentType *)parseValue:(NSString *)value __attribute__((swift_name("parse(value:)")));
@property (readonly) GNCContentType *Any __attribute__((swift_name("Any")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentType.Image")))
@interface GNCContentTypeImage : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)image __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCContentTypeImage *shared __attribute__((swift_name("shared")));
@property (readonly) GNCContentType *Any __attribute__((swift_name("Any")));
@property (readonly) GNCContentType *GIF __attribute__((swift_name("GIF")));
@property (readonly) GNCContentType *JPEG __attribute__((swift_name("JPEG")));
@property (readonly) GNCContentType *PNG __attribute__((swift_name("PNG")));
@property (readonly) GNCContentType *SVG __attribute__((swift_name("SVG")));
@property (readonly) GNCContentType *XIcon __attribute__((swift_name("XIcon")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentType.Message")))
@interface GNCContentTypeMessage : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)message __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCContentTypeMessage *shared __attribute__((swift_name("shared")));
@property (readonly) GNCContentType *Any __attribute__((swift_name("Any")));
@property (readonly) GNCContentType *Http __attribute__((swift_name("Http")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentType.MultiPart")))
@interface GNCContentTypeMultiPart : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)multiPart __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCContentTypeMultiPart *shared __attribute__((swift_name("shared")));
@property (readonly) GNCContentType *Alternative __attribute__((swift_name("Alternative")));
@property (readonly) GNCContentType *Any __attribute__((swift_name("Any")));
@property (readonly) GNCContentType *ByteRanges __attribute__((swift_name("ByteRanges")));
@property (readonly) GNCContentType *Encrypted __attribute__((swift_name("Encrypted")));
@property (readonly) GNCContentType *FormData __attribute__((swift_name("FormData")));
@property (readonly) GNCContentType *Mixed __attribute__((swift_name("Mixed")));
@property (readonly) GNCContentType *Related __attribute__((swift_name("Related")));
@property (readonly) GNCContentType *Signed __attribute__((swift_name("Signed")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentType.Text")))
@interface GNCContentTypeText : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)text __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCContentTypeText *shared __attribute__((swift_name("shared")));
@property (readonly) GNCContentType *Any __attribute__((swift_name("Any")));
@property (readonly) GNCContentType *CSS __attribute__((swift_name("CSS")));
@property (readonly) GNCContentType *CSV __attribute__((swift_name("CSV")));
@property (readonly) GNCContentType *EventStream __attribute__((swift_name("EventStream")));
@property (readonly) GNCContentType *Html __attribute__((swift_name("Html")));
@property (readonly) GNCContentType *JavaScript __attribute__((swift_name("JavaScript")));
@property (readonly) GNCContentType *Plain __attribute__((swift_name("Plain")));
@property (readonly) GNCContentType *VCard __attribute__((swift_name("VCard")));
@property (readonly) GNCContentType *Xml __attribute__((swift_name("Xml")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentType.Video")))
@interface GNCContentTypeVideo : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)video __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCContentTypeVideo *shared __attribute__((swift_name("shared")));
@property (readonly) GNCContentType *Any __attribute__((swift_name("Any")));
@property (readonly) GNCContentType *MP4 __attribute__((swift_name("MP4")));
@property (readonly) GNCContentType *MPEG __attribute__((swift_name("MPEG")));
@property (readonly) GNCContentType *OGG __attribute__((swift_name("OGG")));
@property (readonly) GNCContentType *QuickTime __attribute__((swift_name("QuickTime")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Cookie")))
@interface GNCCookie : GNCBase
- (instancetype)initWithName:(NSString *)name value:(NSString *)value encoding:(GNCCookieEncoding *)encoding maxAge:(int32_t)maxAge expires:(GNCGMTDate * _Nullable)expires domain:(NSString * _Nullable)domain path:(NSString * _Nullable)path secure:(BOOL)secure httpOnly:(BOOL)httpOnly extensions:(NSDictionary<NSString *, id> *)extensions __attribute__((swift_name("init(name:value:encoding:maxAge:expires:domain:path:secure:httpOnly:extensions:)"))) __attribute__((objc_designated_initializer));
- (GNCCookie *)doCopyName:(NSString *)name value:(NSString *)value encoding:(GNCCookieEncoding *)encoding maxAge:(int32_t)maxAge expires:(GNCGMTDate * _Nullable)expires domain:(NSString * _Nullable)domain path:(NSString * _Nullable)path secure:(BOOL)secure httpOnly:(BOOL)httpOnly extensions:(NSDictionary<NSString *, id> *)extensions __attribute__((swift_name("doCopy(name:value:encoding:maxAge:expires:domain:path:secure:httpOnly:extensions:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString * _Nullable domain __attribute__((swift_name("domain")));
@property (readonly) GNCCookieEncoding *encoding __attribute__((swift_name("encoding")));
@property (readonly) GNCGMTDate * _Nullable expires __attribute__((swift_name("expires")));
@property (readonly) NSDictionary<NSString *, id> *extensions __attribute__((swift_name("extensions")));
@property (readonly) BOOL httpOnly __attribute__((swift_name("httpOnly")));
@property (readonly) int32_t maxAge __attribute__((swift_name("maxAge")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) NSString * _Nullable path __attribute__((swift_name("path")));
@property (readonly) BOOL secure __attribute__((swift_name("secure")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CookieEncoding")))
@interface GNCCookieEncoding : GNCKotlinEnum<GNCCookieEncoding *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCCookieEncoding *raw __attribute__((swift_name("raw")));
@property (class, readonly) GNCCookieEncoding *dquotes __attribute__((swift_name("dquotes")));
@property (class, readonly) GNCCookieEncoding *uriEncoding __attribute__((swift_name("uriEncoding")));
@property (class, readonly) GNCCookieEncoding *base64Encoding __attribute__((swift_name("base64Encoding")));
+ (GNCKotlinArray<GNCCookieEncoding *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((swift_name("StringValues")))
@protocol GNCStringValues
@required
- (BOOL)containsName:(NSString *)name __attribute__((swift_name("contains(name:)")));
- (BOOL)containsName:(NSString *)name value:(NSString *)value __attribute__((swift_name("contains(name:value:)")));
- (NSSet<id<GNCKotlinMapEntry>> *)entries __attribute__((swift_name("entries()")));
- (void)forEachBody:(void (^)(NSString *, NSArray<NSString *> *))body __attribute__((swift_name("forEach(body:)")));
- (NSString * _Nullable)getName:(NSString *)name __attribute__((swift_name("get(name:)")));
- (NSArray<NSString *> * _Nullable)getAllName:(NSString *)name __attribute__((swift_name("getAll(name:)")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (NSSet<NSString *> *)names __attribute__((swift_name("names()")));
@property (readonly) BOOL caseInsensitiveName __attribute__((swift_name("caseInsensitiveName")));
@end

__attribute__((swift_name("Headers")))
@protocol GNCHeaders <GNCStringValues>
@required
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EmptyHeaders")))
@interface GNCEmptyHeaders : GNCBase <GNCHeaders>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)emptyHeaders __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCEmptyHeaders *shared __attribute__((swift_name("shared")));
- (NSSet<id<GNCKotlinMapEntry>> *)entries __attribute__((swift_name("entries()")));
- (NSArray<NSString *> * _Nullable)getAllName:(NSString *)name __attribute__((swift_name("getAll(name:)")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (NSSet<NSString *> *)names __attribute__((swift_name("names()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) BOOL caseInsensitiveName __attribute__((swift_name("caseInsensitiveName")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeaderValue")))
@interface GNCHeaderValue : GNCBase
- (instancetype)initWithValue:(NSString *)value params:(NSArray<GNCHeaderValueParam *> *)params __attribute__((swift_name("init(value:params:)"))) __attribute__((objc_designated_initializer));
- (GNCHeaderValue *)doCopyValue:(NSString *)value params:(NSArray<GNCHeaderValueParam *> *)params __attribute__((swift_name("doCopy(value:params:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSArray<GNCHeaderValueParam *> *params __attribute__((swift_name("params")));
@property (readonly) double quality __attribute__((swift_name("quality")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeaderValueParam")))
@interface GNCHeaderValueParam : GNCBase
- (instancetype)initWithName:(NSString *)name value:(NSString *)value __attribute__((swift_name("init(name:value:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithName:(NSString *)name value:(NSString *)value escapeValue:(BOOL)escapeValue __attribute__((swift_name("init(name:value:escapeValue:)"))) __attribute__((objc_designated_initializer));
- (GNCHeaderValueParam *)doCopyName:(NSString *)name value:(NSString *)value escapeValue:(BOOL)escapeValue __attribute__((swift_name("doCopy(name:value:escapeValue:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) BOOL escapeValue __attribute__((swift_name("escapeValue")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeaderValueWithParameters.Companion")))
@interface GNCHeaderValueWithParametersCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHeaderValueWithParametersCompanion *shared __attribute__((swift_name("shared")));
- (id _Nullable)parseValue:(NSString *)value init:(id _Nullable (^)(NSString *, NSArray<GNCHeaderValueParam *> *))init __attribute__((swift_name("parse(value:init:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeadersCompanion")))
@interface GNCHeadersCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHeadersCompanion *shared __attribute__((swift_name("shared")));
- (id<GNCHeaders>)buildBuilder:(void (^)(GNCHeadersBuilder *))builder __attribute__((swift_name("build(builder:)")));
@property (readonly) id<GNCHeaders> Empty __attribute__((swift_name("Empty")));
@end

__attribute__((swift_name("StringValuesBuilder")))
@protocol GNCStringValuesBuilder
@required
- (void)appendName:(NSString *)name value:(NSString *)value __attribute__((swift_name("append(name:value:)")));
- (void)appendAllStringValues:(id<GNCStringValues>)stringValues __attribute__((swift_name("appendAll(stringValues:)")));
- (void)appendAllName:(NSString *)name values:(id)values __attribute__((swift_name("appendAll(name:values:)")));
- (void)appendMissingStringValues:(id<GNCStringValues>)stringValues __attribute__((swift_name("appendMissing(stringValues:)")));
- (void)appendMissingName:(NSString *)name values:(id)values __attribute__((swift_name("appendMissing(name:values:)")));
- (id<GNCStringValues>)build __attribute__((swift_name("build()")));
- (void)clear __attribute__((swift_name("clear()")));
- (BOOL)containsName:(NSString *)name __attribute__((swift_name("contains(name:)")));
- (BOOL)containsName:(NSString *)name value:(NSString *)value __attribute__((swift_name("contains(name:value:)")));
- (NSSet<id<GNCKotlinMapEntry>> *)entries __attribute__((swift_name("entries()")));
- (NSString * _Nullable)getName:(NSString *)name __attribute__((swift_name("get(name:)")));
- (NSArray<NSString *> * _Nullable)getAllName:(NSString *)name __attribute__((swift_name("getAll(name:)")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (NSSet<NSString *> *)names __attribute__((swift_name("names()")));
- (void)removeName:(NSString *)name __attribute__((swift_name("remove(name:)")));
- (BOOL)removeName:(NSString *)name value:(NSString *)value __attribute__((swift_name("remove(name:value:)")));
- (void)removeKeysWithNoEntries __attribute__((swift_name("removeKeysWithNoEntries()")));
- (void)setName:(NSString *)name value:(NSString *)value __attribute__((swift_name("set(name:value:)")));
@property (readonly) BOOL caseInsensitiveName __attribute__((swift_name("caseInsensitiveName")));
@end

__attribute__((swift_name("StringValuesBuilderImpl")))
@interface GNCStringValuesBuilderImpl : GNCBase <GNCStringValuesBuilder>
- (instancetype)initWithCaseInsensitiveName:(BOOL)caseInsensitiveName size:(int32_t)size __attribute__((swift_name("init(caseInsensitiveName:size:)"))) __attribute__((objc_designated_initializer));
- (void)appendName:(NSString *)name value:(NSString *)value __attribute__((swift_name("append(name:value:)")));
- (void)appendAllStringValues:(id<GNCStringValues>)stringValues __attribute__((swift_name("appendAll(stringValues:)")));
- (void)appendAllName:(NSString *)name values:(id)values __attribute__((swift_name("appendAll(name:values:)")));
- (void)appendMissingStringValues:(id<GNCStringValues>)stringValues __attribute__((swift_name("appendMissing(stringValues:)")));
- (void)appendMissingName:(NSString *)name values:(id)values __attribute__((swift_name("appendMissing(name:values:)")));
- (id<GNCStringValues>)build __attribute__((swift_name("build()")));
- (void)clear __attribute__((swift_name("clear()")));
- (BOOL)containsName:(NSString *)name __attribute__((swift_name("contains(name:)")));
- (BOOL)containsName:(NSString *)name value:(NSString *)value __attribute__((swift_name("contains(name:value:)")));
- (NSSet<id<GNCKotlinMapEntry>> *)entries __attribute__((swift_name("entries()")));
- (NSString * _Nullable)getName:(NSString *)name __attribute__((swift_name("get(name:)")));
- (NSArray<NSString *> * _Nullable)getAllName:(NSString *)name __attribute__((swift_name("getAll(name:)")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (NSSet<NSString *> *)names __attribute__((swift_name("names()")));
- (void)removeName:(NSString *)name __attribute__((swift_name("remove(name:)")));
- (BOOL)removeName:(NSString *)name value:(NSString *)value __attribute__((swift_name("remove(name:value:)")));
- (void)removeKeysWithNoEntries __attribute__((swift_name("removeKeysWithNoEntries()")));
- (void)setName:(NSString *)name value:(NSString *)value __attribute__((swift_name("set(name:value:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)validateNameName:(NSString *)name __attribute__((swift_name("validateName(name:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)validateValueValue:(NSString *)value __attribute__((swift_name("validateValue(value:)")));
@property (readonly) BOOL caseInsensitiveName __attribute__((swift_name("caseInsensitiveName")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@property (readonly) GNCMutableDictionary<NSString *, NSMutableArray<NSString *> *> *values __attribute__((swift_name("values")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeadersBuilder")))
@interface GNCHeadersBuilder : GNCStringValuesBuilderImpl
- (instancetype)initWithSize:(int32_t)size __attribute__((swift_name("init(size:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCaseInsensitiveName:(BOOL)caseInsensitiveName size:(int32_t)size __attribute__((swift_name("init(caseInsensitiveName:size:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (id<GNCHeaders>)build __attribute__((swift_name("build()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)validateNameName:(NSString *)name __attribute__((swift_name("validateName(name:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)validateValueValue:(NSString *)value __attribute__((swift_name("validateValue(value:)")));
@end

__attribute__((swift_name("StringValuesImpl")))
@interface GNCStringValuesImpl : GNCBase <GNCStringValues>
- (instancetype)initWithCaseInsensitiveName:(BOOL)caseInsensitiveName values:(NSDictionary<NSString *, NSArray<NSString *> *> *)values __attribute__((swift_name("init(caseInsensitiveName:values:)"))) __attribute__((objc_designated_initializer));
- (BOOL)containsName:(NSString *)name __attribute__((swift_name("contains(name:)")));
- (BOOL)containsName:(NSString *)name value:(NSString *)value __attribute__((swift_name("contains(name:value:)")));
- (NSSet<id<GNCKotlinMapEntry>> *)entries __attribute__((swift_name("entries()")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (void)forEachBody:(void (^)(NSString *, NSArray<NSString *> *))body __attribute__((swift_name("forEach(body:)")));
- (NSString * _Nullable)getName:(NSString *)name __attribute__((swift_name("get(name:)")));
- (NSArray<NSString *> * _Nullable)getAllName:(NSString *)name __attribute__((swift_name("getAll(name:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (NSSet<NSString *> *)names __attribute__((swift_name("names()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) BOOL caseInsensitiveName __attribute__((swift_name("caseInsensitiveName")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@property (readonly) NSDictionary<NSString *, NSArray<NSString *> *> *values __attribute__((swift_name("values")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeadersImpl")))
@interface GNCHeadersImpl : GNCStringValuesImpl <GNCHeaders>
- (instancetype)initWithValues:(NSDictionary<NSString *, NSArray<NSString *> *> *)values __attribute__((swift_name("init(values:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCaseInsensitiveName:(BOOL)caseInsensitiveName values:(NSDictionary<NSString *, NSArray<NSString *> *> *)values __attribute__((swift_name("init(caseInsensitiveName:values:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("StringValuesSingleImpl")))
@interface GNCStringValuesSingleImpl : GNCBase <GNCStringValues>
- (instancetype)initWithCaseInsensitiveName:(BOOL)caseInsensitiveName name:(NSString *)name values:(NSArray<NSString *> *)values __attribute__((swift_name("init(caseInsensitiveName:name:values:)"))) __attribute__((objc_designated_initializer));
- (BOOL)containsName:(NSString *)name __attribute__((swift_name("contains(name:)")));
- (BOOL)containsName:(NSString *)name value:(NSString *)value __attribute__((swift_name("contains(name:value:)")));
- (NSSet<id<GNCKotlinMapEntry>> *)entries __attribute__((swift_name("entries()")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (void)forEachBody:(void (^)(NSString *, NSArray<NSString *> *))body __attribute__((swift_name("forEach(body:)")));
- (NSString * _Nullable)getName:(NSString *)name __attribute__((swift_name("get(name:)")));
- (NSArray<NSString *> * _Nullable)getAllName:(NSString *)name __attribute__((swift_name("getAll(name:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (NSSet<NSString *> *)names __attribute__((swift_name("names()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) BOOL caseInsensitiveName __attribute__((swift_name("caseInsensitiveName")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) NSArray<NSString *> *values __attribute__((swift_name("values")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeadersSingleImpl")))
@interface GNCHeadersSingleImpl : GNCStringValuesSingleImpl <GNCHeaders>
- (instancetype)initWithName:(NSString *)name values:(NSArray<NSString *> *)values __attribute__((swift_name("init(name:values:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCaseInsensitiveName:(BOOL)caseInsensitiveName name:(NSString *)name values:(NSArray<NSString *> *)values __attribute__((swift_name("init(caseInsensitiveName:name:values:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpHeaders")))
@interface GNCHttpHeaders : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)httpHeaders __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHttpHeaders *shared __attribute__((swift_name("shared")));
- (void)checkHeaderNameName:(NSString *)name __attribute__((swift_name("checkHeaderName(name:)")));
- (void)checkHeaderValueValue:(NSString *)value __attribute__((swift_name("checkHeaderValue(value:)")));
- (BOOL)isUnsafeHeader:(NSString *)header __attribute__((swift_name("isUnsafe(header:)")));
@property (readonly) NSString *ALPN __attribute__((swift_name("ALPN")));
@property (readonly) NSString *Accept __attribute__((swift_name("Accept")));
@property (readonly) NSString *AcceptCharset __attribute__((swift_name("AcceptCharset")));
@property (readonly) NSString *AcceptEncoding __attribute__((swift_name("AcceptEncoding")));
@property (readonly) NSString *AcceptLanguage __attribute__((swift_name("AcceptLanguage")));
@property (readonly) NSString *AcceptRanges __attribute__((swift_name("AcceptRanges")));
@property (readonly) NSString *AccessControlAllowCredentials __attribute__((swift_name("AccessControlAllowCredentials")));
@property (readonly) NSString *AccessControlAllowHeaders __attribute__((swift_name("AccessControlAllowHeaders")));
@property (readonly) NSString *AccessControlAllowMethods __attribute__((swift_name("AccessControlAllowMethods")));
@property (readonly) NSString *AccessControlAllowOrigin __attribute__((swift_name("AccessControlAllowOrigin")));
@property (readonly) NSString *AccessControlExposeHeaders __attribute__((swift_name("AccessControlExposeHeaders")));
@property (readonly) NSString *AccessControlMaxAge __attribute__((swift_name("AccessControlMaxAge")));
@property (readonly) NSString *AccessControlRequestHeaders __attribute__((swift_name("AccessControlRequestHeaders")));
@property (readonly) NSString *AccessControlRequestMethod __attribute__((swift_name("AccessControlRequestMethod")));
@property (readonly) NSString *Age __attribute__((swift_name("Age")));
@property (readonly) NSString *Allow __attribute__((swift_name("Allow")));
@property (readonly) NSString *AuthenticationInfo __attribute__((swift_name("AuthenticationInfo")));
@property (readonly) NSString *Authorization __attribute__((swift_name("Authorization")));
@property (readonly) NSString *CacheControl __attribute__((swift_name("CacheControl")));
@property (readonly) NSString *Connection __attribute__((swift_name("Connection")));
@property (readonly) NSString *ContentDisposition __attribute__((swift_name("ContentDisposition")));
@property (readonly) NSString *ContentEncoding __attribute__((swift_name("ContentEncoding")));
@property (readonly) NSString *ContentLanguage __attribute__((swift_name("ContentLanguage")));
@property (readonly) NSString *ContentLength __attribute__((swift_name("ContentLength")));
@property (readonly) NSString *ContentLocation __attribute__((swift_name("ContentLocation")));
@property (readonly) NSString *ContentRange __attribute__((swift_name("ContentRange")));
@property (readonly) NSString *ContentType __attribute__((swift_name("ContentType")));
@property (readonly) NSString *Cookie __attribute__((swift_name("Cookie")));
@property (readonly) NSString *DASL __attribute__((swift_name("DASL")));
@property (readonly) NSString *DAV __attribute__((swift_name("DAV")));
@property (readonly) NSString *Date __attribute__((swift_name("Date")));
@property (readonly) NSString *Depth __attribute__((swift_name("Depth")));
@property (readonly) NSString *Destination __attribute__((swift_name("Destination")));
@property (readonly) NSString *ETag __attribute__((swift_name("ETag")));
@property (readonly) NSString *Expect __attribute__((swift_name("Expect")));
@property (readonly) NSString *Expires __attribute__((swift_name("Expires")));
@property (readonly) NSString *Forwarded __attribute__((swift_name("Forwarded")));
@property (readonly) NSString *From __attribute__((swift_name("From")));
@property (readonly) NSString *HTTP2Settings __attribute__((swift_name("HTTP2Settings")));
@property (readonly) NSString *Host __attribute__((swift_name("Host")));
@property (readonly) NSString *If __attribute__((swift_name("If")));
@property (readonly) NSString *IfMatch __attribute__((swift_name("IfMatch")));
@property (readonly) NSString *IfModifiedSince __attribute__((swift_name("IfModifiedSince")));
@property (readonly) NSString *IfNoneMatch __attribute__((swift_name("IfNoneMatch")));
@property (readonly) NSString *IfRange __attribute__((swift_name("IfRange")));
@property (readonly) NSString *IfScheduleTagMatch __attribute__((swift_name("IfScheduleTagMatch")));
@property (readonly) NSString *IfUnmodifiedSince __attribute__((swift_name("IfUnmodifiedSince")));
@property (readonly) NSString *LastModified __attribute__((swift_name("LastModified")));
@property (readonly) NSString *Link __attribute__((swift_name("Link")));
@property (readonly) NSString *Location __attribute__((swift_name("Location")));
@property (readonly) NSString *LockToken __attribute__((swift_name("LockToken")));
@property (readonly) NSString *MIMEVersion __attribute__((swift_name("MIMEVersion")));
@property (readonly) NSString *MaxForwards __attribute__((swift_name("MaxForwards")));
@property (readonly) NSString *OrderingType __attribute__((swift_name("OrderingType")));
@property (readonly) NSString *Origin __attribute__((swift_name("Origin")));
@property (readonly) NSString *Overwrite __attribute__((swift_name("Overwrite")));
@property (readonly) NSString *Position __attribute__((swift_name("Position")));
@property (readonly) NSString *Pragma __attribute__((swift_name("Pragma")));
@property (readonly) NSString *Prefer __attribute__((swift_name("Prefer")));
@property (readonly) NSString *PreferenceApplied __attribute__((swift_name("PreferenceApplied")));
@property (readonly) NSString *ProxyAuthenticate __attribute__((swift_name("ProxyAuthenticate")));
@property (readonly) NSString *ProxyAuthenticationInfo __attribute__((swift_name("ProxyAuthenticationInfo")));
@property (readonly) NSString *ProxyAuthorization __attribute__((swift_name("ProxyAuthorization")));
@property (readonly) NSString *PublicKeyPins __attribute__((swift_name("PublicKeyPins")));
@property (readonly) NSString *PublicKeyPinsReportOnly __attribute__((swift_name("PublicKeyPinsReportOnly")));
@property (readonly) NSString *Range __attribute__((swift_name("Range")));
@property (readonly) NSString *Referrer __attribute__((swift_name("Referrer")));
@property (readonly) NSString *RetryAfter __attribute__((swift_name("RetryAfter")));
@property (readonly) NSString *SLUG __attribute__((swift_name("SLUG")));
@property (readonly) NSString *ScheduleReply __attribute__((swift_name("ScheduleReply")));
@property (readonly) NSString *ScheduleTag __attribute__((swift_name("ScheduleTag")));
@property (readonly) NSString *SecWebSocketAccept __attribute__((swift_name("SecWebSocketAccept")));
@property (readonly) NSString *SecWebSocketExtensions __attribute__((swift_name("SecWebSocketExtensions")));
@property (readonly) NSString *SecWebSocketKey __attribute__((swift_name("SecWebSocketKey")));
@property (readonly) NSString *SecWebSocketProtocol __attribute__((swift_name("SecWebSocketProtocol")));
@property (readonly) NSString *SecWebSocketVersion __attribute__((swift_name("SecWebSocketVersion")));
@property (readonly) NSString *Server __attribute__((swift_name("Server")));
@property (readonly) NSString *SetCookie __attribute__((swift_name("SetCookie")));
@property (readonly) NSString *StrictTransportSecurity __attribute__((swift_name("StrictTransportSecurity")));
@property (readonly) NSString *TE __attribute__((swift_name("TE")));
@property (readonly) NSString *Timeout __attribute__((swift_name("Timeout")));
@property (readonly) NSString *Trailer __attribute__((swift_name("Trailer")));
@property (readonly) NSString *TransferEncoding __attribute__((swift_name("TransferEncoding")));
@property (readonly) GNCKotlinArray<NSString *> *UnsafeHeaders __attribute__((swift_name("UnsafeHeaders"))) __attribute__((deprecated("Use UnsafeHeadersList instead.")));
@property (readonly) NSArray<NSString *> *UnsafeHeadersList __attribute__((swift_name("UnsafeHeadersList")));
@property (readonly) NSString *Upgrade __attribute__((swift_name("Upgrade")));
@property (readonly) NSString *UserAgent __attribute__((swift_name("UserAgent")));
@property (readonly) NSString *Vary __attribute__((swift_name("Vary")));
@property (readonly) NSString *Via __attribute__((swift_name("Via")));
@property (readonly) NSString *WWWAuthenticate __attribute__((swift_name("WWWAuthenticate")));
@property (readonly) NSString *Warning __attribute__((swift_name("Warning")));
@property (readonly) NSString *XCorrelationId __attribute__((swift_name("XCorrelationId")));
@property (readonly) NSString *XForwardedFor __attribute__((swift_name("XForwardedFor")));
@property (readonly) NSString *XForwardedHost __attribute__((swift_name("XForwardedHost")));
@property (readonly) NSString *XForwardedPort __attribute__((swift_name("XForwardedPort")));
@property (readonly) NSString *XForwardedProto __attribute__((swift_name("XForwardedProto")));
@property (readonly) NSString *XForwardedServer __attribute__((swift_name("XForwardedServer")));
@property (readonly) NSString *XHttpMethodOverride __attribute__((swift_name("XHttpMethodOverride")));
@property (readonly) NSString *XRequestId __attribute__((swift_name("XRequestId")));
@property (readonly) NSString *XTotalCount __attribute__((swift_name("XTotalCount")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpMethod")))
@interface GNCHttpMethod : GNCBase
- (instancetype)initWithValue:(NSString *)value __attribute__((swift_name("init(value:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCHttpMethodCompanion *companion __attribute__((swift_name("companion")));
- (GNCHttpMethod *)doCopyValue:(NSString *)value __attribute__((swift_name("doCopy(value:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpMethod.Companion")))
@interface GNCHttpMethodCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHttpMethodCompanion *shared __attribute__((swift_name("shared")));
- (GNCHttpMethod *)parseMethod:(NSString *)method __attribute__((swift_name("parse(method:)")));
@property (readonly) NSArray<GNCHttpMethod *> *DefaultMethods __attribute__((swift_name("DefaultMethods")));
@property (readonly) GNCHttpMethod *Delete __attribute__((swift_name("Delete")));
@property (readonly) GNCHttpMethod *Get __attribute__((swift_name("Get")));
@property (readonly) GNCHttpMethod *Head __attribute__((swift_name("Head")));
@property (readonly) GNCHttpMethod *Options __attribute__((swift_name("Options")));
@property (readonly) GNCHttpMethod *Patch __attribute__((swift_name("Patch")));
@property (readonly) GNCHttpMethod *Post __attribute__((swift_name("Post")));
@property (readonly) GNCHttpMethod *Put __attribute__((swift_name("Put")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpProtocolVersion")))
@interface GNCHttpProtocolVersion : GNCBase
- (instancetype)initWithName:(NSString *)name major:(int32_t)major minor:(int32_t)minor __attribute__((swift_name("init(name:major:minor:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCHttpProtocolVersionCompanion *companion __attribute__((swift_name("companion")));
- (GNCHttpProtocolVersion *)doCopyName:(NSString *)name major:(int32_t)major minor:(int32_t)minor __attribute__((swift_name("doCopy(name:major:minor:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t major __attribute__((swift_name("major")));
@property (readonly) int32_t minor __attribute__((swift_name("minor")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpProtocolVersion.Companion")))
@interface GNCHttpProtocolVersionCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHttpProtocolVersionCompanion *shared __attribute__((swift_name("shared")));
- (GNCHttpProtocolVersion *)fromValueName:(NSString *)name major:(int32_t)major minor:(int32_t)minor __attribute__((swift_name("fromValue(name:major:minor:)")));
- (GNCHttpProtocolVersion *)parseValue:(id)value __attribute__((swift_name("parse(value:)")));
@property (readonly) GNCHttpProtocolVersion *HTTP_1_0 __attribute__((swift_name("HTTP_1_0")));
@property (readonly) GNCHttpProtocolVersion *HTTP_1_1 __attribute__((swift_name("HTTP_1_1")));
@property (readonly) GNCHttpProtocolVersion *HTTP_2_0 __attribute__((swift_name("HTTP_2_0")));
@property (readonly) GNCHttpProtocolVersion *QUIC __attribute__((swift_name("QUIC")));
@property (readonly) GNCHttpProtocolVersion *SPDY_3 __attribute__((swift_name("SPDY_3")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpStatusCode")))
@interface GNCHttpStatusCode : GNCBase
- (instancetype)initWithValue:(int32_t)value description:(NSString *)description __attribute__((swift_name("init(value:description:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCHttpStatusCodeCompanion *companion __attribute__((swift_name("companion")));
- (GNCHttpStatusCode *)doCopyValue:(int32_t)value description:(NSString *)description __attribute__((swift_name("doCopy(value:description:)")));
- (GNCHttpStatusCode *)descriptionValue:(NSString *)value __attribute__((swift_name("description(value:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *description_ __attribute__((swift_name("description_")));
@property (readonly) int32_t value __attribute__((swift_name("value")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpStatusCode.Companion")))
@interface GNCHttpStatusCodeCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHttpStatusCodeCompanion *shared __attribute__((swift_name("shared")));
- (GNCHttpStatusCode *)fromValueValue:(int32_t)value __attribute__((swift_name("fromValue(value:)")));
@property (readonly) GNCHttpStatusCode *Accepted __attribute__((swift_name("Accepted")));
@property (readonly) GNCHttpStatusCode *BadGateway __attribute__((swift_name("BadGateway")));
@property (readonly) GNCHttpStatusCode *BadRequest __attribute__((swift_name("BadRequest")));
@property (readonly) GNCHttpStatusCode *Conflict __attribute__((swift_name("Conflict")));
@property (readonly) GNCHttpStatusCode *Continue __attribute__((swift_name("Continue")));
@property (readonly) GNCHttpStatusCode *Created __attribute__((swift_name("Created")));
@property (readonly) GNCHttpStatusCode *ExpectationFailed __attribute__((swift_name("ExpectationFailed")));
@property (readonly) GNCHttpStatusCode *FailedDependency __attribute__((swift_name("FailedDependency")));
@property (readonly) GNCHttpStatusCode *Forbidden __attribute__((swift_name("Forbidden")));
@property (readonly) GNCHttpStatusCode *Found __attribute__((swift_name("Found")));
@property (readonly) GNCHttpStatusCode *GatewayTimeout __attribute__((swift_name("GatewayTimeout")));
@property (readonly) GNCHttpStatusCode *Gone __attribute__((swift_name("Gone")));
@property (readonly) GNCHttpStatusCode *InsufficientStorage __attribute__((swift_name("InsufficientStorage")));
@property (readonly) GNCHttpStatusCode *InternalServerError __attribute__((swift_name("InternalServerError")));
@property (readonly) GNCHttpStatusCode *LengthRequired __attribute__((swift_name("LengthRequired")));
@property (readonly) GNCHttpStatusCode *Locked __attribute__((swift_name("Locked")));
@property (readonly) GNCHttpStatusCode *MethodNotAllowed __attribute__((swift_name("MethodNotAllowed")));
@property (readonly) GNCHttpStatusCode *MovedPermanently __attribute__((swift_name("MovedPermanently")));
@property (readonly) GNCHttpStatusCode *MultiStatus __attribute__((swift_name("MultiStatus")));
@property (readonly) GNCHttpStatusCode *MultipleChoices __attribute__((swift_name("MultipleChoices")));
@property (readonly) GNCHttpStatusCode *NoContent __attribute__((swift_name("NoContent")));
@property (readonly) GNCHttpStatusCode *NonAuthoritativeInformation __attribute__((swift_name("NonAuthoritativeInformation")));
@property (readonly) GNCHttpStatusCode *NotAcceptable __attribute__((swift_name("NotAcceptable")));
@property (readonly) GNCHttpStatusCode *NotFound __attribute__((swift_name("NotFound")));
@property (readonly) GNCHttpStatusCode *NotImplemented __attribute__((swift_name("NotImplemented")));
@property (readonly) GNCHttpStatusCode *NotModified __attribute__((swift_name("NotModified")));
@property (readonly) GNCHttpStatusCode *OK __attribute__((swift_name("OK")));
@property (readonly) GNCHttpStatusCode *PartialContent __attribute__((swift_name("PartialContent")));
@property (readonly) GNCHttpStatusCode *PayloadTooLarge __attribute__((swift_name("PayloadTooLarge")));
@property (readonly) GNCHttpStatusCode *PaymentRequired __attribute__((swift_name("PaymentRequired")));
@property (readonly) GNCHttpStatusCode *PermanentRedirect __attribute__((swift_name("PermanentRedirect")));
@property (readonly) GNCHttpStatusCode *PreconditionFailed __attribute__((swift_name("PreconditionFailed")));
@property (readonly) GNCHttpStatusCode *Processing __attribute__((swift_name("Processing")));
@property (readonly) GNCHttpStatusCode *ProxyAuthenticationRequired __attribute__((swift_name("ProxyAuthenticationRequired")));
@property (readonly) GNCHttpStatusCode *RequestHeaderFieldTooLarge __attribute__((swift_name("RequestHeaderFieldTooLarge")));
@property (readonly) GNCHttpStatusCode *RequestTimeout __attribute__((swift_name("RequestTimeout")));
@property (readonly) GNCHttpStatusCode *RequestURITooLong __attribute__((swift_name("RequestURITooLong")));
@property (readonly) GNCHttpStatusCode *RequestedRangeNotSatisfiable __attribute__((swift_name("RequestedRangeNotSatisfiable")));
@property (readonly) GNCHttpStatusCode *ResetContent __attribute__((swift_name("ResetContent")));
@property (readonly) GNCHttpStatusCode *SeeOther __attribute__((swift_name("SeeOther")));
@property (readonly) GNCHttpStatusCode *ServiceUnavailable __attribute__((swift_name("ServiceUnavailable")));
@property (readonly) GNCHttpStatusCode *SwitchProxy __attribute__((swift_name("SwitchProxy")));
@property (readonly) GNCHttpStatusCode *SwitchingProtocols __attribute__((swift_name("SwitchingProtocols")));
@property (readonly) GNCHttpStatusCode *TemporaryRedirect __attribute__((swift_name("TemporaryRedirect")));
@property (readonly) GNCHttpStatusCode *TooManyRequests __attribute__((swift_name("TooManyRequests")));
@property (readonly) GNCHttpStatusCode *Unauthorized __attribute__((swift_name("Unauthorized")));
@property (readonly) GNCHttpStatusCode *UnprocessableEntity __attribute__((swift_name("UnprocessableEntity")));
@property (readonly) GNCHttpStatusCode *UnsupportedMediaType __attribute__((swift_name("UnsupportedMediaType")));
@property (readonly) GNCHttpStatusCode *UpgradeRequired __attribute__((swift_name("UpgradeRequired")));
@property (readonly) GNCHttpStatusCode *UseProxy __attribute__((swift_name("UseProxy")));
@property (readonly) GNCHttpStatusCode *VariantAlsoNegotiates __attribute__((swift_name("VariantAlsoNegotiates")));
@property (readonly) GNCHttpStatusCode *VersionNotSupported __attribute__((swift_name("VersionNotSupported")));
@property (readonly) NSArray<GNCHttpStatusCode *> *allStatusCodes __attribute__((swift_name("allStatusCodes")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IllegalHeaderNameException")))
@interface GNCIllegalHeaderNameException : GNCKotlinIllegalArgumentException
- (instancetype)initWithHeaderName:(NSString *)headerName position:(int32_t)position __attribute__((swift_name("init(headerName:position:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) NSString *headerName __attribute__((swift_name("headerName")));
@property (readonly) int32_t position __attribute__((swift_name("position")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IllegalHeaderValueException")))
@interface GNCIllegalHeaderValueException : GNCKotlinIllegalArgumentException
- (instancetype)initWithHeaderValue:(NSString *)headerValue position:(int32_t)position __attribute__((swift_name("init(headerValue:position:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) NSString *headerValue __attribute__((swift_name("headerValue")));
@property (readonly) int32_t position __attribute__((swift_name("position")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LinkHeader")))
@interface GNCLinkHeader : GNCHeaderValueWithParameters
- (instancetype)initWithUri:(NSString *)uri rel:(NSString *)rel __attribute__((swift_name("init(uri:rel:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithUri:(NSString *)uri rel_:(GNCKotlinArray<NSString *> *)rel __attribute__((swift_name("init(uri:rel_:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithUri:(NSString *)uri rel:(NSArray<NSString *> *)rel type:(GNCContentType *)type __attribute__((swift_name("init(uri:rel:type:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithUri:(NSString *)uri params:(NSArray<GNCHeaderValueParam *> *)params __attribute__((swift_name("init(uri:params:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithContent:(NSString *)content parameters:(NSArray<GNCHeaderValueParam *> *)parameters __attribute__((swift_name("init(content:parameters:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) NSString *uri __attribute__((swift_name("uri")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LinkHeader.Parameters")))
@interface GNCLinkHeaderParameters : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)parameters __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCLinkHeaderParameters *shared __attribute__((swift_name("shared")));
@property (readonly) NSString *Anchor __attribute__((swift_name("Anchor")));
@property (readonly) NSString *HrefLang __attribute__((swift_name("HrefLang")));
@property (readonly) NSString *Media __attribute__((swift_name("Media")));
@property (readonly) NSString *Rel __attribute__((swift_name("Rel")));
@property (readonly) NSString *Rev __attribute__((swift_name("Rev")));
@property (readonly) NSString *Title __attribute__((swift_name("Title")));
@property (readonly) NSString *Type __attribute__((swift_name("Type")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LinkHeader.Rel")))
@interface GNCLinkHeaderRel : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)rel __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCLinkHeaderRel *shared __attribute__((swift_name("shared")));
@property (readonly) NSString *DnsPrefetch __attribute__((swift_name("DnsPrefetch")));
@property (readonly) NSString *Next __attribute__((swift_name("Next")));
@property (readonly) NSString *PreConnect __attribute__((swift_name("PreConnect")));
@property (readonly) NSString *PreLoad __attribute__((swift_name("PreLoad")));
@property (readonly) NSString *PreRender __attribute__((swift_name("PreRender")));
@property (readonly) NSString *Prefetch __attribute__((swift_name("Prefetch")));
@property (readonly) NSString *Stylesheet __attribute__((swift_name("Stylesheet")));
@end

__attribute__((swift_name("Parameters")))
@protocol GNCParameters <GNCStringValues>
@required
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ParametersCompanion")))
@interface GNCParametersCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCParametersCompanion *shared __attribute__((swift_name("shared")));
- (id<GNCParameters>)buildBuilder:(void (^)(id<GNCParametersBuilder>))builder __attribute__((swift_name("build(builder:)")));
@property (readonly) id<GNCParameters> Empty __attribute__((swift_name("Empty")));
@end

__attribute__((swift_name("ParametersBuilder")))
@protocol GNCParametersBuilder <GNCStringValuesBuilder>
@required
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ParametersBuilderImpl")))
@interface GNCParametersBuilderImpl : GNCStringValuesBuilderImpl <GNCParametersBuilder>
- (instancetype)initWithSize:(int32_t)size __attribute__((swift_name("init(size:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCaseInsensitiveName:(BOOL)caseInsensitiveName size:(int32_t)size __attribute__((swift_name("init(caseInsensitiveName:size:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (id<GNCParameters>)build __attribute__((swift_name("build()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ParametersImpl")))
@interface GNCParametersImpl : GNCStringValuesImpl <GNCParameters>
- (instancetype)initWithValues:(NSDictionary<NSString *, NSArray<NSString *> *> *)values __attribute__((swift_name("init(values:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCaseInsensitiveName:(BOOL)caseInsensitiveName values:(NSDictionary<NSString *, NSArray<NSString *> *> *)values __attribute__((swift_name("init(caseInsensitiveName:values:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ParametersSingleImpl")))
@interface GNCParametersSingleImpl : GNCStringValuesSingleImpl <GNCParameters>
- (instancetype)initWithName:(NSString *)name values:(NSArray<NSString *> *)values __attribute__((swift_name("init(name:values:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCaseInsensitiveName:(BOOL)caseInsensitiveName name:(NSString *)name values:(NSArray<NSString *> *)values __attribute__((swift_name("init(caseInsensitiveName:name:values:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RangeUnits")))
@interface GNCRangeUnits : GNCKotlinEnum<GNCRangeUnits *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCRangeUnits *bytes __attribute__((swift_name("bytes")));
@property (class, readonly) GNCRangeUnits *none __attribute__((swift_name("none")));
+ (GNCKotlinArray<GNCRangeUnits *> *)values __attribute__((swift_name("values()")));
@property (readonly) NSString *unitToken __attribute__((swift_name("unitToken")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RangesSpecifier")))
@interface GNCRangesSpecifier : GNCBase
- (instancetype)initWithUnit:(GNCRangeUnits *)unit ranges:(NSArray<GNCContentRange *> *)ranges __attribute__((swift_name("init(unit:ranges:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithUnit:(NSString *)unit ranges_:(NSArray<GNCContentRange *> *)ranges __attribute__((swift_name("init(unit:ranges_:)"))) __attribute__((objc_designated_initializer));
- (GNCRangesSpecifier *)doCopyUnit:(NSString *)unit ranges:(NSArray<GNCContentRange *> *)ranges __attribute__((swift_name("doCopy(unit:ranges:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)isValidRangeUnitPredicate:(GNCBoolean *(^)(NSString *))rangeUnitPredicate __attribute__((swift_name("isValid(rangeUnitPredicate:)")));
- (NSArray<GNCKotlinLongRange *> *)mergeLength:(int64_t)length __attribute__((swift_name("merge(length:)")));
- (NSArray<GNCKotlinLongRange *> *)mergeLength:(int64_t)length maxRangeCount:(int32_t)maxRangeCount __attribute__((swift_name("merge(length:maxRangeCount:)")));
- (GNCKotlinLongRange * _Nullable)mergeToSingleLength:(int64_t)length __attribute__((swift_name("mergeToSingle(length:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSArray<GNCContentRange *> *ranges __attribute__((swift_name("ranges")));
@property (readonly) NSString *unit __attribute__((swift_name("unit")));
@end

__attribute__((swift_name("RequestConnectionPoint")))
@protocol GNCRequestConnectionPoint
@required
@property (readonly) NSString *host __attribute__((swift_name("host")));
@property (readonly) GNCHttpMethod *method __attribute__((swift_name("method")));
@property (readonly) int32_t port __attribute__((swift_name("port")));
@property (readonly) NSString *remoteHost __attribute__((swift_name("remoteHost")));
@property (readonly) NSString *scheme __attribute__((swift_name("scheme")));
@property (readonly) NSString *uri __attribute__((swift_name("uri")));
@property (readonly) NSString *version __attribute__((swift_name("version")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("URLBuilder")))
@interface GNCURLBuilder : GNCBase
- (instancetype)initWithProtocol:(GNCURLProtocol *)protocol host:(NSString *)host port:(int32_t)port user:(NSString * _Nullable)user password:(NSString * _Nullable)password pathSegments:(NSArray<NSString *> *)pathSegments parameters:(id<GNCParameters>)parameters fragment:(NSString *)fragment trailingQuery:(BOOL)trailingQuery __attribute__((swift_name("init(protocol:host:port:user:password:pathSegments:parameters:fragment:trailingQuery:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCURLBuilderCompanion *companion __attribute__((swift_name("companion")));
- (GNCUrl *)build __attribute__((swift_name("build()")));
- (NSString *)buildString __attribute__((swift_name("buildString()")));
@property NSString *encodedFragment __attribute__((swift_name("encodedFragment")));
@property id<GNCParametersBuilder> encodedParameters __attribute__((swift_name("encodedParameters")));
@property NSString * _Nullable encodedPassword __attribute__((swift_name("encodedPassword")));
@property NSArray<NSString *> *encodedPathSegments __attribute__((swift_name("encodedPathSegments")));
@property NSString * _Nullable encodedUser __attribute__((swift_name("encodedUser")));
@property NSString *fragment __attribute__((swift_name("fragment")));
@property NSString *host __attribute__((swift_name("host")));
@property (readonly) id<GNCParametersBuilder> parameters __attribute__((swift_name("parameters")));
@property NSString * _Nullable password __attribute__((swift_name("password")));
@property NSArray<NSString *> *pathSegments __attribute__((swift_name("pathSegments")));
@property int32_t port __attribute__((swift_name("port")));
@property GNCURLProtocol *protocol __attribute__((swift_name("protocol")));
@property BOOL trailingQuery __attribute__((swift_name("trailingQuery")));
@property NSString * _Nullable user __attribute__((swift_name("user")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("URLBuilder.Companion")))
@interface GNCURLBuilderCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCURLBuilderCompanion *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("URLDecodeException")))
@interface GNCURLDecodeException : GNCKotlinException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("URLParserException")))
@interface GNCURLParserException : GNCKotlinIllegalStateException
- (instancetype)initWithUrlString:(NSString *)urlString cause:(GNCKotlinThrowable *)cause __attribute__((swift_name("init(urlString:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("URLProtocol")))
@interface GNCURLProtocol : GNCBase
- (instancetype)initWithName:(NSString *)name defaultPort:(int32_t)defaultPort __attribute__((swift_name("init(name:defaultPort:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCURLProtocolCompanion *companion __attribute__((swift_name("companion")));
- (GNCURLProtocol *)doCopyName:(NSString *)name defaultPort:(int32_t)defaultPort __attribute__((swift_name("doCopy(name:defaultPort:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t defaultPort __attribute__((swift_name("defaultPort")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("URLProtocol.Companion")))
@interface GNCURLProtocolCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCURLProtocolCompanion *shared __attribute__((swift_name("shared")));
- (GNCURLProtocol *)createOrDefaultName:(NSString *)name __attribute__((swift_name("createOrDefault(name:)")));
@property (readonly) GNCURLProtocol *HTTP __attribute__((swift_name("HTTP")));
@property (readonly) GNCURLProtocol *HTTPS __attribute__((swift_name("HTTPS")));
@property (readonly) GNCURLProtocol *SOCKS __attribute__((swift_name("SOCKS")));
@property (readonly) GNCURLProtocol *WS __attribute__((swift_name("WS")));
@property (readonly) GNCURLProtocol *WSS __attribute__((swift_name("WSS")));
@property (readonly) NSDictionary<NSString *, GNCURLProtocol *> *byName __attribute__((swift_name("byName")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UnsafeHeaderException")))
@interface GNCUnsafeHeaderException : GNCKotlinIllegalArgumentException
- (instancetype)initWithHeader:(NSString *)header __attribute__((swift_name("init(header:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Url")))
@interface GNCUrl : GNCBase
@property (class, readonly, getter=companion) GNCUrlCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *encodedFragment __attribute__((swift_name("encodedFragment")));
@property (readonly) NSString * _Nullable encodedPassword __attribute__((swift_name("encodedPassword")));
@property (readonly) NSString *encodedPath __attribute__((swift_name("encodedPath")));
@property (readonly) NSString *encodedPathAndQuery __attribute__((swift_name("encodedPathAndQuery")));
@property (readonly) NSString *encodedQuery __attribute__((swift_name("encodedQuery")));
@property (readonly) NSString * _Nullable encodedUser __attribute__((swift_name("encodedUser")));
@property (readonly) NSString *fragment __attribute__((swift_name("fragment")));
@property (readonly) NSString *host __attribute__((swift_name("host")));
@property (readonly) id<GNCParameters> parameters __attribute__((swift_name("parameters")));
@property (readonly) NSString * _Nullable password __attribute__((swift_name("password")));
@property (readonly) NSArray<NSString *> *pathSegments __attribute__((swift_name("pathSegments")));
@property (readonly) int32_t port __attribute__((swift_name("port")));
@property (readonly) GNCURLProtocol *protocol __attribute__((swift_name("protocol")));
@property (readonly) int32_t specifiedPort __attribute__((swift_name("specifiedPort")));
@property (readonly) BOOL trailingQuery __attribute__((swift_name("trailingQuery")));
@property (readonly) NSString * _Nullable user __attribute__((swift_name("user")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Url.Companion")))
@interface GNCUrlCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCUrlCompanion *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AuthScheme")))
@interface GNCAuthScheme : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)authScheme __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCAuthScheme *shared __attribute__((swift_name("shared")));
@property (readonly) NSString *Basic __attribute__((swift_name("Basic")));
@property (readonly) NSString *Bearer __attribute__((swift_name("Bearer")));
@property (readonly) NSString *Digest __attribute__((swift_name("Digest")));
@property (readonly) NSString *Negotiate __attribute__((swift_name("Negotiate")));
@property (readonly) NSString *OAuth __attribute__((swift_name("OAuth")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeaderValueEncoding")))
@interface GNCHeaderValueEncoding : GNCKotlinEnum<GNCHeaderValueEncoding *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCHeaderValueEncoding *quotedWhenRequired __attribute__((swift_name("quotedWhenRequired")));
@property (class, readonly) GNCHeaderValueEncoding *quotedAlways __attribute__((swift_name("quotedAlways")));
@property (class, readonly) GNCHeaderValueEncoding *uriEncode __attribute__((swift_name("uriEncode")));
+ (GNCKotlinArray<GNCHeaderValueEncoding *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((swift_name("HttpAuthHeader")))
@interface GNCHttpAuthHeader : GNCBase
@property (class, readonly, getter=companion) GNCHttpAuthHeaderCompanion *companion __attribute__((swift_name("companion")));
- (NSString *)render __attribute__((swift_name("render()")));
- (NSString *)renderEncoding:(GNCHeaderValueEncoding *)encoding __attribute__((swift_name("render(encoding:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *authScheme __attribute__((swift_name("authScheme")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpAuthHeader.Companion")))
@interface GNCHttpAuthHeaderCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHttpAuthHeaderCompanion *shared __attribute__((swift_name("shared")));
- (GNCHttpAuthHeaderParameterized *)basicAuthChallengeRealm:(NSString *)realm charset:(GNCCharset * _Nullable)charset __attribute__((swift_name("basicAuthChallenge(realm:charset:)")));
- (GNCHttpAuthHeaderParameterized *)digestAuthChallengeRealm:(NSString *)realm nonce:(NSString *)nonce domain:(NSArray<NSString *> *)domain opaque:(NSString * _Nullable)opaque stale:(GNCBoolean * _Nullable)stale algorithm:(NSString *)algorithm __attribute__((swift_name("digestAuthChallenge(realm:nonce:domain:opaque:stale:algorithm:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpAuthHeader.Parameterized")))
@interface GNCHttpAuthHeaderParameterized : GNCHttpAuthHeader
- (instancetype)initWithAuthScheme:(NSString *)authScheme parameters:(NSDictionary<NSString *, NSString *> *)parameters encoding:(GNCHeaderValueEncoding *)encoding __attribute__((swift_name("init(authScheme:parameters:encoding:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithAuthScheme:(NSString *)authScheme parameters:(NSArray<GNCHeaderValueParam *> *)parameters encoding_:(GNCHeaderValueEncoding *)encoding __attribute__((swift_name("init(authScheme:parameters:encoding_:)"))) __attribute__((objc_designated_initializer));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString * _Nullable)parameterName:(NSString *)name __attribute__((swift_name("parameter(name:)")));
- (NSString *)render __attribute__((swift_name("render()")));
- (NSString *)renderEncoding:(GNCHeaderValueEncoding *)encoding __attribute__((swift_name("render(encoding:)")));
- (GNCHttpAuthHeaderParameterized *)withParameterName:(NSString *)name value:(NSString *)value __attribute__((swift_name("withParameter(name:value:)")));
- (GNCHttpAuthHeaderParameterized *)withReplacedParameterName:(NSString *)name value:(NSString *)value __attribute__((swift_name("withReplacedParameter(name:value:)")));
@property (readonly) GNCHeaderValueEncoding *encoding __attribute__((swift_name("encoding")));
@property (readonly) NSArray<GNCHeaderValueParam *> *parameters __attribute__((swift_name("parameters")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpAuthHeader.Parameters")))
@interface GNCHttpAuthHeaderParameters : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)parameters __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHttpAuthHeaderParameters *shared __attribute__((swift_name("shared")));
@property (readonly) NSString *Charset __attribute__((swift_name("Charset")));
@property (readonly) NSString *OAuthCallback __attribute__((swift_name("OAuthCallback")));
@property (readonly) NSString *OAuthCallbackConfirmed __attribute__((swift_name("OAuthCallbackConfirmed")));
@property (readonly) NSString *OAuthConsumerKey __attribute__((swift_name("OAuthConsumerKey")));
@property (readonly) NSString *OAuthNonce __attribute__((swift_name("OAuthNonce")));
@property (readonly) NSString *OAuthSignature __attribute__((swift_name("OAuthSignature")));
@property (readonly) NSString *OAuthSignatureMethod __attribute__((swift_name("OAuthSignatureMethod")));
@property (readonly) NSString *OAuthTimestamp __attribute__((swift_name("OAuthTimestamp")));
@property (readonly) NSString *OAuthToken __attribute__((swift_name("OAuthToken")));
@property (readonly) NSString *OAuthTokenSecret __attribute__((swift_name("OAuthTokenSecret")));
@property (readonly) NSString *OAuthVerifier __attribute__((swift_name("OAuthVerifier")));
@property (readonly) NSString *OAuthVersion __attribute__((swift_name("OAuthVersion")));
@property (readonly) NSString *Realm __attribute__((swift_name("Realm")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpAuthHeader.Single")))
@interface GNCHttpAuthHeaderSingle : GNCHttpAuthHeader
- (instancetype)initWithAuthScheme:(NSString *)authScheme blob:(NSString *)blob __attribute__((swift_name("init(authScheme:blob:)"))) __attribute__((objc_designated_initializer));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)render __attribute__((swift_name("render()")));
- (NSString *)renderEncoding:(GNCHeaderValueEncoding *)encoding __attribute__((swift_name("render(encoding:)")));
@property (readonly) NSString *blob __attribute__((swift_name("blob")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ParseException")))
@interface GNCParseException : GNCKotlinIllegalArgumentException
- (instancetype)initWithMessage:(NSString *)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) GNCKotlinThrowable * _Nullable cause __attribute__((swift_name("cause")));
@property (readonly) NSString *message __attribute__((swift_name("message")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteArrayContent")))
@interface GNCByteArrayContent : GNCOutgoingContentByteArrayContent
- (instancetype)initWithBytes:(GNCKotlinByteArray *)bytes contentType:(GNCContentType * _Nullable)contentType status:(GNCHttpStatusCode * _Nullable)status __attribute__((swift_name("init(bytes:contentType:status:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCKotlinByteArray *)bytes __attribute__((swift_name("bytes()")));
@property (readonly) GNCLong *contentLength __attribute__((swift_name("contentLength")));
@property (readonly) GNCContentType * _Nullable contentType __attribute__((swift_name("contentType")));
@property (readonly) GNCHttpStatusCode * _Nullable status __attribute__((swift_name("status")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CachingOptions")))
@interface GNCCachingOptions : GNCBase
- (instancetype)initWithCacheControl:(GNCCacheControl_ * _Nullable)cacheControl expires:(GNCGMTDate * _Nullable)expires __attribute__((swift_name("init(cacheControl:expires:)"))) __attribute__((objc_designated_initializer));
- (GNCCachingOptions *)doCopyCacheControl:(GNCCacheControl_ * _Nullable)cacheControl expires:(GNCGMTDate * _Nullable)expires __attribute__((swift_name("doCopy(cacheControl:expires:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCCacheControl_ * _Nullable cacheControl __attribute__((swift_name("cacheControl")));
@property (readonly) GNCGMTDate * _Nullable expires __attribute__((swift_name("expires")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChannelWriterContent")))
@interface GNCChannelWriterContent : GNCOutgoingContentWriteChannelContent
- (instancetype)initWithBody:(id<GNCKotlinSuspendFunction1>)body contentType:(GNCContentType * _Nullable)contentType status:(GNCHttpStatusCode * _Nullable)status contentLength:(GNCLong * _Nullable)contentLength __attribute__((swift_name("init(body:contentType:status:contentLength:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeToChannel:(id<GNCByteWriteChannel>)channel completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeTo(channel:completionHandler:)")));
@property (readonly) GNCLong * _Nullable contentLength __attribute__((swift_name("contentLength")));
@property (readonly) GNCContentType * _Nullable contentType __attribute__((swift_name("contentType")));
@property (readonly) GNCHttpStatusCode * _Nullable status __attribute__((swift_name("status")));
@end

__attribute__((swift_name("Version")))
@protocol GNCVersion
@required
- (void)appendHeadersToBuilder:(GNCHeadersBuilder *)builder __attribute__((swift_name("appendHeadersTo(builder:)")));
- (GNCVersionCheckResult *)checkRequestHeaders:(id<GNCHeaders>)requestHeaders __attribute__((swift_name("check(requestHeaders:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EntityTagVersion")))
@interface GNCEntityTagVersion : GNCBase <GNCVersion>
- (instancetype)initWithEtag:(NSString *)etag weak:(BOOL)weak __attribute__((swift_name("init(etag:weak:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCEntityTagVersionCompanion *companion __attribute__((swift_name("companion")));
- (void)appendHeadersToBuilder:(GNCHeadersBuilder *)builder __attribute__((swift_name("appendHeadersTo(builder:)")));
- (GNCVersionCheckResult *)checkRequestHeaders:(id<GNCHeaders>)requestHeaders __attribute__((swift_name("check(requestHeaders:)")));
- (GNCEntityTagVersion *)doCopyEtag:(NSString *)etag weak:(BOOL)weak __attribute__((swift_name("doCopy(etag:weak:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)matchOther:(GNCEntityTagVersion *)other __attribute__((swift_name("match(other:)")));
- (GNCVersionCheckResult *)matchGivenMatchEtags:(NSArray<GNCEntityTagVersion *> *)givenMatchEtags __attribute__((swift_name("match(givenMatchEtags:)")));
- (GNCVersionCheckResult *)noneMatchGivenNoneMatchEtags:(NSArray<GNCEntityTagVersion *> *)givenNoneMatchEtags __attribute__((swift_name("noneMatch(givenNoneMatchEtags:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *etag __attribute__((swift_name("etag")));
@property (readonly) BOOL weak __attribute__((swift_name("weak")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EntityTagVersion.Companion")))
@interface GNCEntityTagVersionCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCEntityTagVersionCompanion *shared __attribute__((swift_name("shared")));
- (NSArray<GNCEntityTagVersion *> *)parseHeaderValue:(NSString *)headerValue __attribute__((swift_name("parse(headerValue:)")));
- (GNCEntityTagVersion *)parseSingleValue:(NSString *)value __attribute__((swift_name("parseSingle(value:)")));
@property (readonly) GNCEntityTagVersion *STAR __attribute__((swift_name("STAR")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LastModifiedVersion")))
@interface GNCLastModifiedVersion : GNCBase <GNCVersion>
- (instancetype)initWithLastModified:(GNCGMTDate *)lastModified __attribute__((swift_name("init(lastModified:)"))) __attribute__((objc_designated_initializer));
- (void)appendHeadersToBuilder:(GNCHeadersBuilder *)builder __attribute__((swift_name("appendHeadersTo(builder:)")));
- (GNCVersionCheckResult *)checkRequestHeaders:(id<GNCHeaders>)requestHeaders __attribute__((swift_name("check(requestHeaders:)")));
- (GNCLastModifiedVersion *)doCopyLastModified:(GNCGMTDate *)lastModified __attribute__((swift_name("doCopy(lastModified:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)ifModifiedSinceDates:(NSArray<GNCGMTDate *> *)dates __attribute__((swift_name("ifModifiedSince(dates:)")));
- (BOOL)ifUnmodifiedSinceDates:(NSArray<GNCGMTDate *> *)dates __attribute__((swift_name("ifUnmodifiedSince(dates:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCGMTDate *lastModified __attribute__((swift_name("lastModified")));
@end

__attribute__((swift_name("MultiPartData")))
@protocol GNCMultiPartData
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readPartWithCompletionHandler:(void (^)(GNCPartData * _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("readPart(completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MultiPartDataEmpty")))
@interface GNCMultiPartDataEmpty : GNCBase <GNCMultiPartData>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)empty __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCMultiPartDataEmpty *shared __attribute__((swift_name("shared")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readPartWithCompletionHandler:(void (^)(GNCPartData * _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("readPart(completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NullBody")))
@interface GNCNullBody : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)nullBody __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCNullBody *shared __attribute__((swift_name("shared")));
@end

__attribute__((swift_name("OutgoingContent.ProtocolUpgrade")))
@interface GNCOutgoingContentProtocolUpgrade : GNCOutgoingContent
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)upgradeInput:(id<GNCByteReadChannel>)input output:(id<GNCByteWriteChannel>)output engineContext:(id<GNCKotlinCoroutineContext>)engineContext userContext:(id<GNCKotlinCoroutineContext>)userContext completionHandler:(void (^)(id<GNCJob> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("upgrade(input:output:engineContext:userContext:completionHandler:)")));
@property (readonly) GNCHttpStatusCode *status __attribute__((swift_name("status")));
@end

__attribute__((swift_name("OutgoingContent.ReadChannelContent")))
@interface GNCOutgoingContentReadChannelContent : GNCOutgoingContent
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (id<GNCByteReadChannel>)readFrom __attribute__((swift_name("readFrom()")));
- (id<GNCByteReadChannel>)readFromRange:(GNCKotlinLongRange *)range __attribute__((swift_name("readFrom(range:)")));
@end

__attribute__((swift_name("PartData")))
@interface GNCPartData : GNCBase
@property (readonly) GNCContentDisposition * _Nullable contentDisposition __attribute__((swift_name("contentDisposition")));
@property (readonly) GNCContentType * _Nullable contentType __attribute__((swift_name("contentType")));
@property (readonly) void (^dispose)(void) __attribute__((swift_name("dispose")));
@property (readonly) id<GNCHeaders> headers __attribute__((swift_name("headers")));
@property (readonly) NSString * _Nullable name __attribute__((swift_name("name")));
@property (readonly) id<GNCHeaders> partHeaders __attribute__((swift_name("partHeaders"))) __attribute__((unavailable("Use headers property instead")));
@property (readonly) NSString * _Nullable partName __attribute__((swift_name("partName"))) __attribute__((unavailable("Use name property instead")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PartData.BinaryChannelItem")))
@interface GNCPartDataBinaryChannelItem : GNCPartData
- (instancetype)initWithProvider:(id<GNCByteReadChannel> (^)(void))provider partHeaders:(id<GNCHeaders>)partHeaders __attribute__((swift_name("init(provider:partHeaders:)"))) __attribute__((objc_designated_initializer));
@property (readonly) id<GNCByteReadChannel> (^provider)(void) __attribute__((swift_name("provider")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PartData.BinaryItem")))
@interface GNCPartDataBinaryItem : GNCPartData
- (instancetype)initWithProvider:(GNCInput *(^)(void))provider dispose:(void (^)(void))dispose partHeaders:(id<GNCHeaders>)partHeaders __attribute__((swift_name("init(provider:dispose:partHeaders:)"))) __attribute__((objc_designated_initializer));
@property (readonly) GNCInput *(^provider)(void) __attribute__((swift_name("provider")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PartData.FileItem")))
@interface GNCPartDataFileItem : GNCPartData
- (instancetype)initWithProvider:(GNCInput *(^)(void))provider dispose:(void (^)(void))dispose partHeaders:(id<GNCHeaders>)partHeaders __attribute__((swift_name("init(provider:dispose:partHeaders:)"))) __attribute__((objc_designated_initializer));
@property (readonly) NSString * _Nullable originalFileName __attribute__((swift_name("originalFileName")));
@property (readonly) GNCInput *(^provider)(void) __attribute__((swift_name("provider")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PartData.FormItem")))
@interface GNCPartDataFormItem : GNCPartData
- (instancetype)initWithValue:(NSString *)value dispose:(void (^)(void))dispose partHeaders:(id<GNCHeaders>)partHeaders __attribute__((swift_name("init(value:dispose:partHeaders:)"))) __attribute__((objc_designated_initializer));
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TextContent")))
@interface GNCTextContent : GNCOutgoingContentByteArrayContent
- (instancetype)initWithText:(NSString *)text contentType:(GNCContentType *)contentType status:(GNCHttpStatusCode * _Nullable)status __attribute__((swift_name("init(text:contentType:status:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCKotlinByteArray *)bytes __attribute__((swift_name("bytes()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCLong *contentLength __attribute__((swift_name("contentLength")));
@property (readonly) GNCContentType *contentType __attribute__((swift_name("contentType")));
@property (readonly) GNCHttpStatusCode * _Nullable status __attribute__((swift_name("status")));
@property (readonly) NSString *text __attribute__((swift_name("text")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("VersionCheckResult")))
@interface GNCVersionCheckResult : GNCKotlinEnum<GNCVersionCheckResult *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCVersionCheckResult *ok __attribute__((swift_name("ok")));
@property (class, readonly) GNCVersionCheckResult *notModified __attribute__((swift_name("notModified")));
@property (class, readonly) GNCVersionCheckResult *preconditionFailed __attribute__((swift_name("preconditionFailed")));
+ (GNCKotlinArray<GNCVersionCheckResult *> *)values __attribute__((swift_name("values()")));
@property (readonly) GNCHttpStatusCode *statusCode __attribute__((swift_name("statusCode")));
@end

__attribute__((swift_name("NonceManager")))
@protocol GNCNonceManager
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)doNewNonceWithCompletionHandler:(void (^)(NSString * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("doNewNonce(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)verifyNonceNonce:(NSString *)nonce completionHandler:(void (^)(GNCBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("verifyNonce(nonce:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AlwaysFailNonceManager")))
@interface GNCAlwaysFailNonceManager : GNCBase <GNCNonceManager>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)alwaysFailNonceManager __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCAlwaysFailNonceManager *shared __attribute__((swift_name("shared")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)doNewNonceWithCompletionHandler:(void (^)(NSString * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("doNewNonce(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)verifyNonceNonce:(NSString *)nonce completionHandler:(void (^)(GNCBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("verifyNonce(nonce:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AttributeKey")))
@interface GNCAttributeKey<T> : GNCBase
- (instancetype)initWithName:(NSString *)name __attribute__((swift_name("init(name:)"))) __attribute__((objc_designated_initializer));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@end

__attribute__((swift_name("Attributes")))
@protocol GNCAttributes
@required
- (id)computeIfAbsentKey:(GNCAttributeKey<id> *)key block:(id (^)(void))block __attribute__((swift_name("computeIfAbsent(key:block:)")));
- (BOOL)containsKey:(GNCAttributeKey<id> *)key __attribute__((swift_name("contains(key:)")));
- (id)getKey:(GNCAttributeKey<id> *)key __attribute__((swift_name("get(key:)")));
- (id _Nullable)getOrNullKey:(GNCAttributeKey<id> *)key __attribute__((swift_name("getOrNull(key:)")));
- (void)putKey:(GNCAttributeKey<id> *)key value:(id)value __attribute__((swift_name("put(key:value:)")));
- (void)removeKey:(GNCAttributeKey<id> *)key __attribute__((swift_name("remove(key:)")));
- (id)takeKey:(GNCAttributeKey<id> *)key __attribute__((swift_name("take(key:)")));
- (id _Nullable)takeOrNullKey:(GNCAttributeKey<id> *)key __attribute__((swift_name("takeOrNull(key:)")));
@property (readonly) NSArray<GNCAttributeKey<id> *> *allKeys __attribute__((swift_name("allKeys")));
@end

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("CaseInsensitiveMap")))
@interface GNCCaseInsensitiveMap : NSObject
@end

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("CaseInsensitiveSet")))
@interface GNCCaseInsensitiveSet : NSObject
@end

__attribute__((swift_name("Digest")))
@protocol GNCDigest
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)buildWithCompletionHandler:(void (^)(GNCKotlinByteArray * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("build(completionHandler:)")));
- (void)plusAssignBytes:(GNCKotlinByteArray *)bytes __attribute__((swift_name("plusAssign(bytes:)")));
- (void)reset __attribute__((swift_name("reset()")));
@end

__attribute__((swift_name("Encoder_")))
@protocol GNCEncoder_
@required
- (id<GNCByteReadChannel>)decode:(id<GNCCoroutineScope>)receiver source:(id<GNCByteReadChannel>)source __attribute__((swift_name("decode(_:source:)")));
- (id<GNCByteReadChannel>)encode:(id<GNCCoroutineScope>)receiver source:(id<GNCByteReadChannel>)source __attribute__((swift_name("encode(_:source:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GenerateOnlyNonceManager")))
@interface GNCGenerateOnlyNonceManager : GNCBase <GNCNonceManager>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)generateOnlyNonceManager __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCGenerateOnlyNonceManager *shared __attribute__((swift_name("shared")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)doNewNonceWithCompletionHandler:(void (^)(NSString * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("doNewNonce(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)verifyNonceNonce:(NSString *)nonce completionHandler:(void (^)(GNCBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("verifyNonce(nonce:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Hash")))
@interface GNCHash : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)hash_ __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCHash *shared __attribute__((swift_name("shared")));
- (int32_t)combineObjects:(GNCKotlinArray<id> *)objects __attribute__((swift_name("combine(objects:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Identity")))
@interface GNCIdentity : GNCBase <GNCEncoder_>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)identity __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCIdentity *shared __attribute__((swift_name("shared")));
- (id<GNCByteReadChannel>)decode:(id<GNCCoroutineScope>)receiver source:(id<GNCByteReadChannel>)source __attribute__((swift_name("decode(_:source:)")));
- (id<GNCByteReadChannel>)encode:(id<GNCCoroutineScope>)receiver source:(id<GNCByteReadChannel>)source __attribute__((swift_name("encode(_:source:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PlatformUtils")))
@interface GNCPlatformUtils : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)platformUtils __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCPlatformUtils *shared __attribute__((swift_name("shared")));
@property (readonly) BOOL IS_BROWSER __attribute__((swift_name("IS_BROWSER")));
@property (readonly) BOOL IS_DEVELOPMENT_MODE __attribute__((swift_name("IS_DEVELOPMENT_MODE")));
@property (readonly) BOOL IS_JVM __attribute__((swift_name("IS_JVM")));
@property (readonly) BOOL IS_NATIVE __attribute__((swift_name("IS_NATIVE")));
@property (readonly) BOOL IS_NEW_MM_ENABLED __attribute__((swift_name("IS_NEW_MM_ENABLED")));
@property (readonly) BOOL IS_NODE __attribute__((swift_name("IS_NODE")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StringValuesCompanion")))
@interface GNCStringValuesCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCStringValuesCompanion *shared __attribute__((swift_name("shared")));
- (id<GNCStringValues>)buildCaseInsensitiveName:(BOOL)caseInsensitiveName builder:(void (^)(id<GNCStringValuesBuilder>))builder __attribute__((swift_name("build(caseInsensitiveName:builder:)")));
@property (readonly) id<GNCStringValues> Empty __attribute__((swift_name("Empty")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ThreadInfo")))
@interface GNCThreadInfo : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)threadInfo __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCThreadInfo *shared __attribute__((swift_name("shared")));
- (void)dropWorkerWorker:(int32_t)worker __attribute__((swift_name("dropWorker(worker:)")));
- (NSArray<GNCWorkerStacktrace *> *)getAllStackTraces __attribute__((swift_name("getAllStackTraces()")));
- (void)printAllStackTraces __attribute__((swift_name("printAllStackTraces()")));
- (void)registerCurrentThread __attribute__((swift_name("registerCurrentThread()")));
- (void)stopAllWorkers __attribute__((swift_name("stopAllWorkers()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WorkerStacktrace")))
@interface GNCWorkerStacktrace : GNCBase
- (instancetype)initWithWorker:(NSString *)worker stacktrace:(NSArray<NSString *> *)stacktrace __attribute__((swift_name("init(worker:stacktrace:)"))) __attribute__((objc_designated_initializer));
@property (readonly) NSArray<NSString *> *stacktrace __attribute__((swift_name("stacktrace")));
@property (readonly) NSString *worker __attribute__((swift_name("worker")));
@end

__attribute__((swift_name("Logger__")))
@protocol GNCLogger__
@required
- (void)debugMessage:(NSString *)message __attribute__((swift_name("debug(message:)")));
- (void)debugMessage:(NSString *)message cause:(GNCKotlinThrowable *)cause __attribute__((swift_name("debug(message:cause:)")));
- (void)errorMessage:(NSString *)message __attribute__((swift_name("error(message:)")));
- (void)errorMessage:(NSString *)message cause:(GNCKotlinThrowable *)cause __attribute__((swift_name("error(message:cause:)")));
- (void)infoMessage:(NSString *)message __attribute__((swift_name("info(message:)")));
- (void)infoMessage:(NSString *)message cause:(GNCKotlinThrowable *)cause __attribute__((swift_name("info(message:cause:)")));
- (void)traceMessage:(NSString *)message __attribute__((swift_name("trace(message:)")));
- (void)traceMessage:(NSString *)message cause:(GNCKotlinThrowable *)cause __attribute__((swift_name("trace(message:cause:)")));
- (void)warnMessage:(NSString *)message __attribute__((swift_name("warn(message:)")));
- (void)warnMessage:(NSString *)message cause:(GNCKotlinThrowable *)cause __attribute__((swift_name("warn(message:cause:)")));
@end

__attribute__((swift_name("AtomicDesc")))
@interface GNCAtomicDesc : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)completeOp:(GNCAtomicOp<id> *)op failure:(id _Nullable)failure __attribute__((swift_name("complete(op:failure:)")));
- (id _Nullable)prepareOp:(GNCAtomicOp<id> *)op __attribute__((swift_name("prepare(op:)")));
@end

__attribute__((swift_name("OpDescriptor")))
@interface GNCOpDescriptor : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (id _Nullable)performAffected:(id _Nullable)affected __attribute__((swift_name("perform(affected:)")));
@end

__attribute__((swift_name("AtomicOp")))
@interface GNCAtomicOp<__contravariant T> : GNCOpDescriptor
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)completeAffected:(T _Nullable)affected failure:(id _Nullable)failure __attribute__((swift_name("complete(affected:failure:)")));
- (id _Nullable)performAffected:(id _Nullable)affected __attribute__((swift_name("perform(affected:)")));
- (id _Nullable)prepareAffected:(T _Nullable)affected __attribute__((swift_name("prepare(affected:)")));
- (BOOL)tryDecideDecision:(id _Nullable)decision __attribute__((swift_name("tryDecide(decision:)")));
@property (readonly) BOOL isDecided __attribute__((swift_name("isDecided")));
@end

__attribute__((swift_name("LockFreeLinkedListNode")))
@interface GNCLockFreeLinkedListNode : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)addLastNode:(GNCLockFreeLinkedListNode *)node __attribute__((swift_name("addLast(node:)")));
- (BOOL)addLastIfNode:(GNCLockFreeLinkedListNode *)node condition:(GNCBoolean *(^)(void))condition __attribute__((swift_name("addLastIf(node:condition:)")));
- (BOOL)addLastIfPrevNode:(GNCLockFreeLinkedListNode *)node predicate:(GNCBoolean *(^)(GNCLockFreeLinkedListNode *))predicate __attribute__((swift_name("addLastIfPrev(node:predicate:)")));
- (BOOL)addLastIfPrevAndIfNode:(GNCLockFreeLinkedListNode *)node predicate:(GNCBoolean *(^)(GNCLockFreeLinkedListNode *))predicate condition:(GNCBoolean *(^)(void))condition __attribute__((swift_name("addLastIfPrevAndIf(node:predicate:condition:)")));
- (BOOL)addOneIfEmptyNode:(GNCLockFreeLinkedListNode *)node __attribute__((swift_name("addOneIfEmpty(node:)")));
- (GNCLockFreeLinkedListNodeAddLastDesc<GNCLockFreeLinkedListNode *> *)describeAddLastNode:(GNCLockFreeLinkedListNode *)node __attribute__((swift_name("describeAddLast(node:)")));
- (GNCAtomicDesc * _Nullable)describeRemove __attribute__((swift_name("describeRemove()")));
- (GNCLockFreeLinkedListNodeRemoveFirstDesc<GNCLockFreeLinkedListNode *> *)describeRemoveFirst __attribute__((swift_name("describeRemoveFirst()")));
- (void)helpRemove __attribute__((swift_name("helpRemove()")));
- (BOOL)remove __attribute__((swift_name("remove()")));
- (id _Nullable)removeFirstIfIsInstanceOf __attribute__((swift_name("removeFirstIfIsInstanceOf()")));
- (id _Nullable)removeFirstIfIsInstanceOfOrPeekIfPredicate:(GNCBoolean *(^)(id _Nullable))predicate __attribute__((swift_name("removeFirstIfIsInstanceOfOrPeekIf(predicate:)")));
- (GNCLockFreeLinkedListNode * _Nullable)removeFirstOrNull __attribute__((swift_name("removeFirstOrNull()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) BOOL isRemoved __attribute__((swift_name("isRemoved")));
@property (readonly, getter=next_) id next __attribute__((swift_name("next")));
@property (readonly) GNCLockFreeLinkedListNode *nextNode __attribute__((swift_name("nextNode")));
@property (readonly) id prev __attribute__((swift_name("prev")));
@property (readonly) GNCLockFreeLinkedListNode *prevNode __attribute__((swift_name("prevNode")));
@end

__attribute__((swift_name("LockFreeLinkedListHead")))
@interface GNCLockFreeLinkedListHead : GNCLockFreeLinkedListNode
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (GNCKotlinNothing *)describeRemove __attribute__((swift_name("describeRemove()")));
- (void)forEachBlock:(void (^)(GNCLockFreeLinkedListNode *))block __attribute__((swift_name("forEach(block:)")));
- (BOOL)remove __attribute__((swift_name("remove()")));
@property (readonly) BOOL isEmpty __attribute__((swift_name("isEmpty")));
@end

__attribute__((swift_name("LockFreeLinkedListNode.AbstractAtomicDesc")))
@interface GNCLockFreeLinkedListNodeAbstractAtomicDesc : GNCAtomicDesc
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)completeOp:(GNCAtomicOp<id> *)op failure:(id _Nullable)failure __attribute__((swift_name("complete(op:failure:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (id _Nullable)failureAffected:(GNCLockFreeLinkedListNode *)affected next:(id)next __attribute__((swift_name("failure(affected:next:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)finishOnSuccessAffected:(GNCLockFreeLinkedListNode *)affected next:(GNCLockFreeLinkedListNode *)next __attribute__((swift_name("finishOnSuccess(affected:next:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (id _Nullable)onPrepareAffected:(GNCLockFreeLinkedListNode *)affected next:(GNCLockFreeLinkedListNode *)next __attribute__((swift_name("onPrepare(affected:next:)")));
- (id _Nullable)prepareOp:(GNCAtomicOp<id> *)op __attribute__((swift_name("prepare(op:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (BOOL)retryAffected:(GNCLockFreeLinkedListNode *)affected next:(id)next __attribute__((swift_name("retry(affected:next:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (GNCLockFreeLinkedListNode *)takeAffectedNodeOp:(GNCOpDescriptor *)op __attribute__((swift_name("takeAffectedNode(op:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (id)updatedNextAffected:(GNCLockFreeLinkedListNode *)affected next:(GNCLockFreeLinkedListNode *)next __attribute__((swift_name("updatedNext(affected:next:)")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@property (readonly) GNCLockFreeLinkedListNode * _Nullable affectedNode __attribute__((swift_name("affectedNode")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@property (readonly) GNCLockFreeLinkedListNode * _Nullable originalNext __attribute__((swift_name("originalNext")));
@end

__attribute__((swift_name("LockFreeLinkedListNodeAddLastDesc")))
@interface GNCLockFreeLinkedListNodeAddLastDesc<T> : GNCLockFreeLinkedListNodeAbstractAtomicDesc
- (instancetype)initWithQueue:(GNCLockFreeLinkedListNode *)queue node:(T)node __attribute__((swift_name("init(queue:node:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)finishOnSuccessAffected:(GNCLockFreeLinkedListNode *)affected next:(GNCLockFreeLinkedListNode *)next __attribute__((swift_name("finishOnSuccess(affected:next:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (id _Nullable)onPrepareAffected:(GNCLockFreeLinkedListNode *)affected next:(GNCLockFreeLinkedListNode *)next __attribute__((swift_name("onPrepare(affected:next:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (BOOL)retryAffected:(GNCLockFreeLinkedListNode *)affected next:(id)next __attribute__((swift_name("retry(affected:next:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (GNCLockFreeLinkedListNode *)takeAffectedNodeOp:(GNCOpDescriptor *)op __attribute__((swift_name("takeAffectedNode(op:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (id)updatedNextAffected:(GNCLockFreeLinkedListNode *)affected next:(GNCLockFreeLinkedListNode *)next __attribute__((swift_name("updatedNext(affected:next:)")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@property (readonly) GNCLockFreeLinkedListNode * _Nullable affectedNode __attribute__((swift_name("affectedNode")));
@property (readonly) T node __attribute__((swift_name("node")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@property (readonly) GNCLockFreeLinkedListNode *originalNext __attribute__((swift_name("originalNext")));
@property (readonly) GNCLockFreeLinkedListNode *queue __attribute__((swift_name("queue")));
@end

__attribute__((swift_name("LockFreeLinkedListNodeRemoveFirstDesc")))
@interface GNCLockFreeLinkedListNodeRemoveFirstDesc<T> : GNCLockFreeLinkedListNodeAbstractAtomicDesc
- (instancetype)initWithQueue:(GNCLockFreeLinkedListNode *)queue __attribute__((swift_name("init(queue:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (id _Nullable)failureAffected:(GNCLockFreeLinkedListNode *)affected next:(id)next __attribute__((swift_name("failure(affected:next:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)finishOnSuccessAffected:(GNCLockFreeLinkedListNode *)affected next:(GNCLockFreeLinkedListNode *)next __attribute__((swift_name("finishOnSuccess(affected:next:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (id _Nullable)onPrepareAffected:(GNCLockFreeLinkedListNode *)affected next:(GNCLockFreeLinkedListNode *)next __attribute__((swift_name("onPrepare(affected:next:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (BOOL)retryAffected:(GNCLockFreeLinkedListNode *)affected next:(id)next __attribute__((swift_name("retry(affected:next:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (GNCLockFreeLinkedListNode *)takeAffectedNodeOp:(GNCOpDescriptor *)op __attribute__((swift_name("takeAffectedNode(op:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (id)updatedNextAffected:(GNCLockFreeLinkedListNode *)affected next:(GNCLockFreeLinkedListNode *)next __attribute__((swift_name("updatedNext(affected:next:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (BOOL)validatePreparedNode:(T _Nullable)node __attribute__((swift_name("validatePrepared(node:)")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@property (readonly) GNCLockFreeLinkedListNode * _Nullable affectedNode __attribute__((swift_name("affectedNode")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@property (readonly) GNCLockFreeLinkedListNode * _Nullable originalNext __attribute__((swift_name("originalNext")));
@property (readonly) GNCLockFreeLinkedListNode *queue __attribute__((swift_name("queue")));
@property (readonly) T _Nullable result __attribute__((swift_name("result")));
@end

__attribute__((swift_name("NetworkAddress")))
@interface GNCNetworkAddress : GNCBase
- (instancetype)initWithHostname:(NSString *)hostname port:(int32_t)port explicitAddress:(id _Nullable)explicitAddress __attribute__((swift_name("init(hostname:port:explicitAddress:)"))) __attribute__((objc_designated_initializer));
- (NSString *)description __attribute__((swift_name("description()")));
@property id explicitAddress __attribute__((swift_name("explicitAddress")));
@property (readonly) NSString *hostname __attribute__((swift_name("hostname")));
@property (readonly) int32_t port __attribute__((swift_name("port")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UnresolvedAddressException")))
@interface GNCUnresolvedAddressException : GNCKotlinIllegalArgumentException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((swift_name("ChannelIOException")))
@interface GNCChannelIOException : GNCIOException
- (instancetype)initWithMessage:(NSString *)message exception:(GNCKotlinThrowable *)exception __attribute__((swift_name("init(message:exception:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString *)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChannelReadException")))
@interface GNCChannelReadException : GNCChannelIOException
- (instancetype)initWithMessage:(NSString *)message exception:(GNCKotlinThrowable *)exception __attribute__((swift_name("init(message:exception:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChannelWriteException")))
@interface GNCChannelWriteException : GNCChannelIOException
- (instancetype)initWithMessage:(NSString *)message exception:(GNCKotlinThrowable *)exception __attribute__((swift_name("init(message:exception:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((swift_name("ConversionService")))
@protocol GNCConversionService
@required
- (id _Nullable)fromValuesValues:(NSArray<NSString *> *)values type:(GNCTypeInfo *)type __attribute__((swift_name("fromValues(values:type:)")));
- (NSArray<NSString *> *)toValuesValue:(id _Nullable)value __attribute__((swift_name("toValues(value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DataConversion_")))
@interface GNCDataConversion_ : GNCBase <GNCConversionService>
- (instancetype)initWithConfiguration:(GNCDataConversion_Configuration *)configuration __attribute__((swift_name("init(configuration:)"))) __attribute__((objc_designated_initializer));
- (id _Nullable)fromValuesValues:(NSArray<NSString *> *)values type:(GNCTypeInfo *)type __attribute__((swift_name("fromValues(values:type:)")));
- (NSArray<NSString *> *)toValuesValue:(id _Nullable)value __attribute__((swift_name("toValues(value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DataConversion_.Configuration")))
@interface GNCDataConversion_Configuration : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)convertConfigure:(void (^)(GNCDelegatingConversionServiceConfiguration<id> *))configure __attribute__((swift_name("convert(configure:)")));
- (void)convertType:(id<GNCKotlinKClass>)type convertor:(id<GNCConversionService>)convertor __attribute__((swift_name("convert(type:convertor:)")));
- (void)convertType:(id<GNCKotlinKType>)type configure:(void (^)(GNCDelegatingConversionServiceConfiguration<id> *))configure __attribute__((swift_name("convert(type:configure:)")));
@end

__attribute__((swift_name("DataConversionException")))
@interface GNCDataConversionException : GNCKotlinException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultConversionService")))
@interface GNCDefaultConversionService : GNCBase <GNCConversionService>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)defaultConversionService __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCDefaultConversionService *shared __attribute__((swift_name("shared")));
- (id)fromValueValue:(NSString *)value klass:(id<GNCKotlinKClass>)klass __attribute__((swift_name("fromValue(value:klass:)")));
- (id _Nullable)fromValuesValues:(NSArray<NSString *> *)values type:(GNCTypeInfo *)type __attribute__((swift_name("fromValues(values:type:)")));
- (NSArray<NSString *> *)toValuesValue:(id _Nullable)value __attribute__((swift_name("toValues(value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DelegatingConversionService")))
@interface GNCDelegatingConversionService : GNCBase <GNCConversionService>
- (instancetype)initWithKlass:(id<GNCKotlinKClass>)klass decoder:(id _Nullable (^ _Nullable)(NSArray<NSString *> *))decoder encoder:(NSArray<NSString *> *(^ _Nullable)(id _Nullable))encoder __attribute__((swift_name("init(klass:decoder:encoder:)"))) __attribute__((objc_designated_initializer));
- (id _Nullable)fromValuesValues:(NSArray<NSString *> *)values type:(GNCTypeInfo *)type __attribute__((swift_name("fromValues(values:type:)")));
- (NSArray<NSString *> *)toValuesValue:(id _Nullable)value __attribute__((swift_name("toValues(value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DelegatingConversionServiceConfiguration")))
@interface GNCDelegatingConversionServiceConfiguration<T> : GNCBase
- (void)decodeConverter:(T (^)(NSArray<NSString *> *))converter __attribute__((swift_name("decode(converter:)")));
- (void)encodeConverter:(NSArray<NSString *> *(^)(T))converter __attribute__((swift_name("encode(converter:)")));
@end


/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.3")
*/
__attribute__((swift_name("KotlinCoroutineContext")))
@protocol GNCKotlinCoroutineContext
@required
- (id _Nullable)foldInitial:(id _Nullable)initial operation:(id _Nullable (^)(id _Nullable, id<GNCKotlinCoroutineContextElement>))operation __attribute__((swift_name("fold(initial:operation:)")));
- (id<GNCKotlinCoroutineContextElement> _Nullable)getKey_:(id<GNCKotlinCoroutineContextKey>)key __attribute__((swift_name("get(key_:)")));
- (id<GNCKotlinCoroutineContext>)minusKeyKey:(id<GNCKotlinCoroutineContextKey>)key __attribute__((swift_name("minusKey(key:)")));
- (id<GNCKotlinCoroutineContext>)plusContext:(id<GNCKotlinCoroutineContext>)context __attribute__((swift_name("plus(context:)")));
@end

__attribute__((swift_name("KotlinCoroutineContextElement")))
@protocol GNCKotlinCoroutineContextElement <GNCKotlinCoroutineContext>
@required
@property (readonly) id<GNCKotlinCoroutineContextKey> key __attribute__((swift_name("key")));
@end


/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.3")
*/
__attribute__((swift_name("KotlinAbstractCoroutineContextElement")))
@interface GNCKotlinAbstractCoroutineContextElement : GNCBase <GNCKotlinCoroutineContextElement>
- (instancetype)initWithKey:(id<GNCKotlinCoroutineContextKey>)key __attribute__((swift_name("init(key:)"))) __attribute__((objc_designated_initializer));
@property (readonly) id<GNCKotlinCoroutineContextKey> key __attribute__((swift_name("key")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PluginName")))
@interface GNCPluginName : GNCKotlinAbstractCoroutineContextElement
- (instancetype)initWithPluginName:(NSString *)pluginName __attribute__((swift_name("init(pluginName:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithKey:(id<GNCKotlinCoroutineContextKey>)key __attribute__((swift_name("init(key:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCPluginNameKey *companion __attribute__((swift_name("companion")));
- (GNCPluginName *)doCopyPluginName:(NSString *)pluginName __attribute__((swift_name("doCopy(pluginName:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *pluginName __attribute__((swift_name("pluginName")));
@end

__attribute__((swift_name("KotlinCoroutineContextKey")))
@protocol GNCKotlinCoroutineContextKey
@required
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PluginName.Key")))
@interface GNCPluginNameKey : GNCBase <GNCKotlinCoroutineContextKey>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)key __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCPluginNameKey *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PluginTraceElement")))
@interface GNCPluginTraceElement : GNCBase
- (instancetype)initWithPluginName:(NSString *)pluginName handler:(NSString *)handler event:(GNCPluginTraceElementPluginEvent *)event __attribute__((swift_name("init(pluginName:handler:event:)"))) __attribute__((objc_designated_initializer));
- (GNCPluginTraceElement *)doCopyPluginName:(NSString *)pluginName handler:(NSString *)handler event:(GNCPluginTraceElementPluginEvent *)event __attribute__((swift_name("doCopy(pluginName:handler:event:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCPluginTraceElementPluginEvent *event __attribute__((swift_name("event")));
@property (readonly) NSString *handler __attribute__((swift_name("handler")));
@property (readonly) NSString *pluginName __attribute__((swift_name("pluginName")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PluginTraceElement.PluginEvent")))
@interface GNCPluginTraceElementPluginEvent : GNCKotlinEnum<GNCPluginTraceElementPluginEvent *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCPluginTraceElementPluginEvent *started __attribute__((swift_name("started")));
@property (class, readonly) GNCPluginTraceElementPluginEvent *finished __attribute__((swift_name("finished")));
+ (GNCKotlinArray<GNCPluginTraceElementPluginEvent *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PluginsTrace")))
@interface GNCPluginsTrace : GNCKotlinAbstractCoroutineContextElement
- (instancetype)initWithEventOrder:(NSMutableArray<GNCPluginTraceElement *> *)eventOrder __attribute__((swift_name("init(eventOrder:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithKey:(id<GNCKotlinCoroutineContextKey>)key __attribute__((swift_name("init(key:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCPluginsTraceKey *companion __attribute__((swift_name("companion")));
- (GNCPluginsTrace *)doCopyEventOrder:(NSMutableArray<GNCPluginTraceElement *> *)eventOrder __attribute__((swift_name("doCopy(eventOrder:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSMutableArray<GNCPluginTraceElement *> *eventOrder __attribute__((swift_name("eventOrder")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PluginsTrace.Key")))
@interface GNCPluginsTraceKey : GNCBase <GNCKotlinCoroutineContextKey>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)key __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCPluginsTraceKey *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GMTDate")))
@interface GNCGMTDate : GNCBase <GNCKotlinComparable>
@property (class, readonly, getter=companion) GNCGMTDateCompanion *companion __attribute__((swift_name("companion")));
- (int32_t)compareToOther:(GNCGMTDate *)other __attribute__((swift_name("compareTo(other:)")));
- (GNCGMTDate *)doCopySeconds:(int32_t)seconds minutes:(int32_t)minutes hours:(int32_t)hours dayOfWeek:(GNCWeekDay *)dayOfWeek dayOfMonth:(int32_t)dayOfMonth dayOfYear:(int32_t)dayOfYear month:(GNCMonth *)month year:(int32_t)year timestamp:(int64_t)timestamp __attribute__((swift_name("doCopy(seconds:minutes:hours:dayOfWeek:dayOfMonth:dayOfYear:month:year:timestamp:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t dayOfMonth __attribute__((swift_name("dayOfMonth")));
@property (readonly) GNCWeekDay *dayOfWeek __attribute__((swift_name("dayOfWeek")));
@property (readonly) int32_t dayOfYear __attribute__((swift_name("dayOfYear")));
@property (readonly) int32_t hours __attribute__((swift_name("hours")));
@property (readonly) int32_t minutes __attribute__((swift_name("minutes")));
@property (readonly) GNCMonth *month __attribute__((swift_name("month")));
@property (readonly) int32_t seconds __attribute__((swift_name("seconds")));
@property (readonly) int64_t timestamp __attribute__((swift_name("timestamp")));
@property (readonly) int32_t year __attribute__((swift_name("year")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GMTDate.Companion")))
@interface GNCGMTDateCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCGMTDateCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) GNCGMTDate *START __attribute__((swift_name("START")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GMTDateParser")))
@interface GNCGMTDateParser : GNCBase
- (instancetype)initWithPattern:(NSString *)pattern __attribute__((swift_name("init(pattern:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCGMTDateParserCompanion *companion __attribute__((swift_name("companion")));
- (GNCGMTDate *)parseDateString:(NSString *)dateString __attribute__((swift_name("parse(dateString:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GMTDateParser.Companion")))
@interface GNCGMTDateParserCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCGMTDateParserCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) unichar ANY __attribute__((swift_name("ANY")));
@property (readonly) unichar DAY_OF_MONTH __attribute__((swift_name("DAY_OF_MONTH")));
@property (readonly) unichar HOURS __attribute__((swift_name("HOURS")));
@property (readonly) unichar MINUTES __attribute__((swift_name("MINUTES")));
@property (readonly) unichar MONTH __attribute__((swift_name("MONTH")));
@property (readonly) unichar SECONDS __attribute__((swift_name("SECONDS")));
@property (readonly) unichar YEAR __attribute__((swift_name("YEAR")));
@property (readonly) unichar ZONE __attribute__((swift_name("ZONE")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InvalidDateStringException")))
@interface GNCInvalidDateStringException : GNCKotlinIllegalStateException
- (instancetype)initWithData:(NSString *)data at:(int32_t)at pattern:(NSString *)pattern __attribute__((swift_name("init(data:at:pattern:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Month")))
@interface GNCMonth : GNCKotlinEnum<GNCMonth *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCMonthCompanion *companion __attribute__((swift_name("companion")));
@property (class, readonly) GNCMonth *january __attribute__((swift_name("january")));
@property (class, readonly) GNCMonth *february __attribute__((swift_name("february")));
@property (class, readonly) GNCMonth *march __attribute__((swift_name("march")));
@property (class, readonly) GNCMonth *april __attribute__((swift_name("april")));
@property (class, readonly) GNCMonth *may __attribute__((swift_name("may")));
@property (class, readonly) GNCMonth *june __attribute__((swift_name("june")));
@property (class, readonly) GNCMonth *july __attribute__((swift_name("july")));
@property (class, readonly) GNCMonth *august __attribute__((swift_name("august")));
@property (class, readonly) GNCMonth *september __attribute__((swift_name("september")));
@property (class, readonly) GNCMonth *october __attribute__((swift_name("october")));
@property (class, readonly) GNCMonth *november __attribute__((swift_name("november")));
@property (class, readonly) GNCMonth *december __attribute__((swift_name("december")));
+ (GNCKotlinArray<GNCMonth *> *)values __attribute__((swift_name("values()")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Month.Companion")))
@interface GNCMonthCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCMonthCompanion *shared __attribute__((swift_name("shared")));
- (GNCMonth *)fromOrdinal:(int32_t)ordinal __attribute__((swift_name("from(ordinal:)")));
- (GNCMonth *)fromValue:(NSString *)value __attribute__((swift_name("from(value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WeekDay")))
@interface GNCWeekDay : GNCKotlinEnum<GNCWeekDay *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCWeekDayCompanion *companion __attribute__((swift_name("companion")));
@property (class, readonly) GNCWeekDay *monday __attribute__((swift_name("monday")));
@property (class, readonly) GNCWeekDay *tuesday __attribute__((swift_name("tuesday")));
@property (class, readonly) GNCWeekDay *wednesday __attribute__((swift_name("wednesday")));
@property (class, readonly) GNCWeekDay *thursday __attribute__((swift_name("thursday")));
@property (class, readonly) GNCWeekDay *friday __attribute__((swift_name("friday")));
@property (class, readonly) GNCWeekDay *saturday __attribute__((swift_name("saturday")));
@property (class, readonly) GNCWeekDay *sunday __attribute__((swift_name("sunday")));
+ (GNCKotlinArray<GNCWeekDay *> *)values __attribute__((swift_name("values()")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WeekDay.Companion")))
@interface GNCWeekDayCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCWeekDayCompanion *shared __attribute__((swift_name("shared")));
- (GNCWeekDay *)fromOrdinal:(int32_t)ordinal __attribute__((swift_name("from(ordinal:)")));
- (GNCWeekDay *)fromValue:(NSString *)value __attribute__((swift_name("from(value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InvalidPhaseException")))
@interface GNCInvalidPhaseException : GNCKotlinThrowable
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((swift_name("PipelineContext")))
@interface GNCPipelineContext<TSubject, TContext> : GNCBase <GNCCoroutineScope>
- (instancetype)initWithContext:(TContext)context __attribute__((swift_name("init(context:)"))) __attribute__((objc_designated_initializer));
- (void)finish __attribute__((swift_name("finish()")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)proceedWithCompletionHandler:(void (^)(TSubject _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("proceed(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)proceedWithSubject:(TSubject)subject completionHandler:(void (^)(TSubject _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("proceedWith(subject:completionHandler:)")));
@property (readonly) TContext context __attribute__((swift_name("context")));
@property TSubject subject __attribute__((swift_name("subject")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PipelinePhase")))
@interface GNCPipelinePhase : GNCBase
- (instancetype)initWithName:(NSString *)name __attribute__((swift_name("init(name:)"))) __attribute__((objc_designated_initializer));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TypeInfo")))
@interface GNCTypeInfo : GNCBase
- (instancetype)initWithType:(id<GNCKotlinKClass>)type reifiedType:(id<GNCKotlinKType>)reifiedType kotlinType:(id<GNCKotlinKType> _Nullable)kotlinType __attribute__((swift_name("init(type:reifiedType:kotlinType:)"))) __attribute__((objc_designated_initializer));
- (GNCTypeInfo *)doCopyType:(id<GNCKotlinKClass>)type reifiedType:(id<GNCKotlinKType>)reifiedType kotlinType:(id<GNCKotlinKType> _Nullable)kotlinType __attribute__((swift_name("doCopy(type:reifiedType:kotlinType:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<GNCKotlinKType> _Nullable kotlinType __attribute__((swift_name("kotlinType")));
@property (readonly) id<GNCKotlinKType> reifiedType __attribute__((swift_name("reifiedType")));
@property (readonly) id<GNCKotlinKClass> type __attribute__((swift_name("type")));
@end

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("ConcurrentMap")))
@interface GNCConcurrentMap : NSObject
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CopyOnWriteHashMap")))
@interface GNCCopyOnWriteHashMap<K, V> : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (V)computeIfAbsentKey:(K)key producer:(V (^)(K))producer __attribute__((swift_name("computeIfAbsent(key:producer:)")));
- (V _Nullable)getKey:(K)key __attribute__((swift_name("get(key:)")));
- (V _Nullable)putKey:(K)key value:(V)value __attribute__((swift_name("put(key:value:)")));
- (V _Nullable)removeKey:(K)key __attribute__((swift_name("remove(key:)")));
- (void)setKey:(K)key value:(V)value __attribute__((swift_name("set(key:value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LockFreeMPSCQueue")))
@interface GNCLockFreeMPSCQueue<E> : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (BOOL)addLastElement:(E)element __attribute__((swift_name("addLast(element:)")));
- (void)close __attribute__((swift_name("close()")));
- (E _Nullable)removeFirstOrNull __attribute__((swift_name("removeFirstOrNull()")));
@property (readonly) BOOL isClosed __attribute__((swift_name("isClosed")));
@property (readonly) BOOL isEmpty __attribute__((swift_name("isEmpty")));
@end

__attribute__((swift_name("ByteReadChannel")))
@protocol GNCByteReadChannel
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)awaitContentWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("awaitContent(completionHandler:)")));
- (BOOL)cancelCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("cancel(cause:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)discardMax:(int64_t)max completionHandler:(void (^)(GNCLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("discard(max:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)peekToDestination:(GNCMemory *)destination destinationOffset:(int64_t)destinationOffset offset:(int64_t)offset min:(int64_t)min max:(int64_t)max completionHandler:(void (^)(GNCLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("peekTo(destination:destinationOffset:offset:min:max:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readAvailableDst:(GNCChunkBuffer *)dst completionHandler:(void (^)(GNCInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAvailable(dst:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readAvailableDst:(GNCKotlinByteArray *)dst offset:(int32_t)offset length:(int32_t)length completionHandler:(void (^)(GNCInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAvailable(dst:offset:length:completionHandler:)")));
- (int32_t)readAvailableMin:(int32_t)min block:(void (^)(GNCBuffer *))block __attribute__((swift_name("readAvailable(min:block:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readAvailableDst:(void *)dst offset:(int32_t)offset length:(int32_t)length completionHandler_:(void (^)(GNCInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAvailable(dst:offset:length:completionHandler_:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readAvailableDst:(void *)dst offset:(int64_t)offset length:(int64_t)length completionHandler__:(void (^)(GNCInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAvailable(dst:offset:length:completionHandler__:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readBooleanWithCompletionHandler:(void (^)(GNCBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readBoolean(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readByteWithCompletionHandler:(void (^)(GNCByte * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readByte(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readDoubleWithCompletionHandler:(void (^)(GNCDouble * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readDouble(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFloatWithCompletionHandler:(void (^)(GNCFloat * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readFloat(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFullyDst:(GNCChunkBuffer *)dst n:(int32_t)n completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("readFully(dst:n:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFullyDst:(GNCKotlinByteArray *)dst offset:(int32_t)offset length:(int32_t)length completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("readFully(dst:offset:length:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFullyDst:(void *)dst offset:(int32_t)offset length:(int32_t)length completionHandler_:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("readFully(dst:offset:length:completionHandler_:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFullyDst:(void *)dst offset:(int64_t)offset length:(int64_t)length completionHandler__:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("readFully(dst:offset:length:completionHandler__:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readIntWithCompletionHandler:(void (^)(GNCInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readInt(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readLongWithCompletionHandler:(void (^)(GNCLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readLong(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readPacketSize:(int32_t)size completionHandler:(void (^)(GNCByteReadPacket * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readPacket(size:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readRemainingLimit:(int64_t)limit completionHandler:(void (^)(GNCByteReadPacket * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readRemaining(limit:completionHandler:)")));
- (void)readSessionConsumer:(void (^)(id<GNCReadSession>))consumer __attribute__((swift_name("readSession(consumer:)"))) __attribute__((deprecated("Use read { } instead.")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readShortWithCompletionHandler:(void (^)(GNCShort * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readShort(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readSuspendableSessionConsumer:(id<GNCKotlinSuspendFunction1>)consumer completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("readSuspendableSession(consumer:completionHandler:)"))) __attribute__((deprecated("Use read { } instead.")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readUTF8LineLimit:(int32_t)limit completionHandler:(void (^)(NSString * _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("readUTF8Line(limit:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readUTF8LineToOut:(id<GNCKotlinAppendable>)out limit:(int32_t)limit completionHandler:(void (^)(GNCBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readUTF8LineTo(out:limit:completionHandler:)")));
@property (readonly) int32_t availableForRead __attribute__((swift_name("availableForRead")));
@property (readonly) GNCKotlinThrowable * _Nullable closedCause __attribute__((swift_name("closedCause")));
@property (readonly) BOOL isClosedForRead __attribute__((swift_name("isClosedForRead")));
@property (readonly) BOOL isClosedForWrite __attribute__((swift_name("isClosedForWrite")));
@property (readonly) int64_t totalBytesRead __attribute__((swift_name("totalBytesRead")));
@end

__attribute__((swift_name("ByteWriteChannel")))
@protocol GNCByteWriteChannel
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)awaitFreeSpaceWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("awaitFreeSpace(completionHandler:)")));
- (BOOL)closeCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("close(cause:)")));
- (void)flush __attribute__((swift_name("flush()")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeAvailableSrc:(GNCChunkBuffer *)src completionHandler:(void (^)(GNCInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeAvailable(src:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeAvailableSrc:(GNCKotlinByteArray *)src offset:(int32_t)offset length:(int32_t)length completionHandler:(void (^)(GNCInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeAvailable(src:offset:length:completionHandler:)")));
- (int32_t)writeAvailableMin:(int32_t)min block:(void (^)(GNCBuffer *))block __attribute__((swift_name("writeAvailable(min:block:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeAvailableSrc:(void *)src offset:(int32_t)offset length:(int32_t)length completionHandler_:(void (^)(GNCInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeAvailable(src:offset:length:completionHandler_:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeAvailableSrc:(void *)src offset:(int64_t)offset length:(int64_t)length completionHandler__:(void (^)(GNCInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeAvailable(src:offset:length:completionHandler__:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeByteB:(int8_t)b completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeByte(b:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeDoubleD:(double)d completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeDouble(d:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFloatF:(float)f completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFloat(f:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullyMemory:(GNCMemory *)memory startIndex:(int32_t)startIndex endIndex:(int32_t)endIndex completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(memory:startIndex:endIndex:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullySrc:(GNCBuffer *)src completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(src:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullySrc:(GNCKotlinByteArray *)src offset:(int32_t)offset length:(int32_t)length completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(src:offset:length:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullySrc:(void *)src offset:(int32_t)offset length:(int32_t)length completionHandler_:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(src:offset:length:completionHandler_:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullySrc:(void *)src offset:(int64_t)offset length:(int64_t)length completionHandler__:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(src:offset:length:completionHandler__:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeIntI:(int32_t)i completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeInt(i:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeLongL:(int64_t)l completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeLong(l:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writePacketPacket:(GNCByteReadPacket *)packet completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writePacket(packet:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeShortS:(int16_t)s completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeShort(s:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeSuspendSessionVisitor:(id<GNCKotlinSuspendFunction1>)visitor completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeSuspendSession(visitor:completionHandler:)"))) __attribute__((deprecated("Use write { } instead.")));
@property (readonly) BOOL autoFlush __attribute__((swift_name("autoFlush")));
@property (readonly) int32_t availableForWrite __attribute__((swift_name("availableForWrite")));
@property (readonly) GNCKotlinThrowable * _Nullable closedCause __attribute__((swift_name("closedCause")));
@property (readonly) BOOL isClosedForWrite __attribute__((swift_name("isClosedForWrite")));
@property (readonly) int64_t totalBytesWritten __attribute__((swift_name("totalBytesWritten")));
@end

__attribute__((swift_name("ByteChannel")))
@protocol GNCByteChannel <GNCByteReadChannel, GNCByteWriteChannel>
@required
- (void)attachJobJob:(id<GNCJob>)job __attribute__((swift_name("attachJob(job:)")));
@end

__attribute__((swift_name("ReadSession")))
@protocol GNCReadSession
@required
- (int32_t)discardN:(int32_t)n __attribute__((swift_name("discard(n:)")));
- (GNCChunkBuffer * _Nullable)requestAtLeast:(int32_t)atLeast __attribute__((swift_name("request(atLeast:)")));
@property (readonly) int32_t availableForRead __attribute__((swift_name("availableForRead")));
@end

__attribute__((swift_name("SuspendableReadSession")))
@protocol GNCSuspendableReadSession <GNCReadSession>
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)awaitAtLeast:(int32_t)atLeast completionHandler:(void (^)(GNCBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("await(atLeast:completionHandler:)")));
@end

__attribute__((swift_name("ByteChannelSequentialBase")))
@interface GNCByteChannelSequentialBase : GNCBase <GNCByteChannel, GNCByteReadChannel, GNCByteWriteChannel, GNCSuspendableReadSession>
- (instancetype)initWithInitial:(GNCChunkBuffer *)initial autoFlush:(BOOL)autoFlush pool:(id<GNCObjectPool>)pool __attribute__((swift_name("init(initial:autoFlush:pool:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)afterReadCount:(int32_t)count __attribute__((swift_name("afterRead(count:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)afterWriteCount:(int32_t)count __attribute__((swift_name("afterWrite(count:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)awaitAtLeast:(int32_t)atLeast completionHandler:(void (^)(GNCBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("await(atLeast:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)awaitContentWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("awaitContent(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)awaitFreeSpaceWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("awaitFreeSpace(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)awaitSuspendAtLeast:(int32_t)atLeast completionHandler:(void (^)(GNCBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("awaitSuspend(atLeast:completionHandler:)")));
- (id<GNCWriterSuspendSession>)beginWriteSession __attribute__((swift_name("beginWriteSession()")));
- (BOOL)cancelCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("cancel(cause:)")));
- (BOOL)closeCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("close(cause:)")));
- (int32_t)discardN:(int32_t)n __attribute__((swift_name("discard(n:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)discardMax:(int64_t)max completionHandler:(void (^)(GNCLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("discard(max:completionHandler:)")));
- (void)endReadSession __attribute__((swift_name("endReadSession()")));
- (void)endWriteSessionWritten:(int32_t)written __attribute__((swift_name("endWriteSession(written:)")));
- (void)flush __attribute__((swift_name("flush()")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)peekToDestination:(GNCMemory *)destination destinationOffset:(int64_t)destinationOffset offset:(int64_t)offset min:(int64_t)min max:(int64_t)max completionHandler:(void (^)(GNCLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("peekTo(destination:destinationOffset:offset:min:max:completionHandler:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)prepareFlushedBytes __attribute__((swift_name("prepareFlushedBytes()")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readAvailableDst:(GNCChunkBuffer *)dst completionHandler:(void (^)(GNCInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAvailable(dst:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readAvailableDst:(GNCKotlinByteArray *)dst offset:(int32_t)offset length:(int32_t)length completionHandler:(void (^)(GNCInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAvailable(dst:offset:length:completionHandler:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (int32_t)readAvailableClosed __attribute__((swift_name("readAvailableClosed()")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readBooleanWithCompletionHandler:(void (^)(GNCBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readBoolean(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readByteWithCompletionHandler:(void (^)(GNCByte * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readByte(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readDoubleWithCompletionHandler:(void (^)(GNCDouble * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readDouble(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFloatWithCompletionHandler:(void (^)(GNCFloat * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readFloat(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFullyDst:(GNCChunkBuffer *)dst n:(int32_t)n completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("readFully(dst:n:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFullyDst:(GNCKotlinByteArray *)dst offset:(int32_t)offset length:(int32_t)length completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("readFully(dst:offset:length:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readIntWithCompletionHandler:(void (^)(GNCInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readInt(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readLongWithCompletionHandler:(void (^)(GNCLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readLong(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readPacketSize:(int32_t)size completionHandler:(void (^)(GNCByteReadPacket * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readPacket(size:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readRemainingLimit:(int64_t)limit completionHandler:(void (^)(GNCByteReadPacket * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readRemaining(limit:completionHandler:)")));
- (void)readSessionConsumer:(void (^)(id<GNCReadSession>))consumer __attribute__((swift_name("readSession(consumer:)"))) __attribute__((deprecated("Use read instead.")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readShortWithCompletionHandler:(void (^)(GNCShort * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readShort(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readSuspendableSessionConsumer:(id<GNCKotlinSuspendFunction1>)consumer completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("readSuspendableSession(consumer:completionHandler:)"))) __attribute__((deprecated("Use read instead.")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readUTF8LineLimit:(int32_t)limit completionHandler:(void (^)(NSString * _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("readUTF8Line(limit:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readUTF8LineToOut:(id<GNCKotlinAppendable>)out limit:(int32_t)limit completionHandler:(void (^)(GNCBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readUTF8LineTo(out:limit:completionHandler:)")));
- (GNCChunkBuffer * _Nullable)requestAtLeast:(int32_t)atLeast __attribute__((swift_name("request(atLeast:)")));
- (id<GNCSuspendableReadSession>)startReadSession __attribute__((swift_name("startReadSession()")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeAvailableSrc:(GNCChunkBuffer *)src completionHandler:(void (^)(GNCInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeAvailable(src:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeAvailableSrc:(GNCKotlinByteArray *)src offset:(int32_t)offset length:(int32_t)length completionHandler:(void (^)(GNCInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeAvailable(src:offset:length:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeByteB:(int8_t)b completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeByte(b:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeDoubleD:(double)d completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeDouble(d:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFloatF:(float)f completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFloat(f:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullyMemory:(GNCMemory *)memory startIndex:(int32_t)startIndex endIndex:(int32_t)endIndex completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(memory:startIndex:endIndex:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullySrc:(GNCBuffer *)src completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(src:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullySrc:(GNCKotlinByteArray *)src offset:(int32_t)offset length:(int32_t)length completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(src:offset:length:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeIntI:(int32_t)i completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeInt(i:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeLongL:(int64_t)l completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeLong(l:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writePacketPacket:(GNCByteReadPacket *)packet completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writePacket(packet:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeShortS:(int16_t)s completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeShort(s:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeSuspendSessionVisitor:(id<GNCKotlinSuspendFunction1>)visitor completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeSuspendSession(visitor:completionHandler:)"))) __attribute__((deprecated("Use write { } instead.")));
@property (readonly) BOOL autoFlush __attribute__((swift_name("autoFlush")));
@property (readonly) int32_t availableForRead __attribute__((swift_name("availableForRead")));
@property (readonly) int32_t availableForWrite __attribute__((swift_name("availableForWrite")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@property BOOL closed __attribute__((swift_name("closed")));
@property GNCKotlinThrowable * _Nullable closedCause __attribute__((swift_name("closedCause")));
@property (readonly) BOOL isClosedForRead __attribute__((swift_name("isClosedForRead")));
@property (readonly) BOOL isClosedForWrite __attribute__((swift_name("isClosedForWrite")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@property (readonly) GNCByteReadPacket *readable __attribute__((swift_name("readable")));
@property (readonly) int64_t totalBytesRead __attribute__((swift_name("totalBytesRead")));
@property (readonly) int64_t totalBytesWritten __attribute__((swift_name("totalBytesWritten")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@property (readonly) GNCBytePacketBuilder *writable __attribute__((swift_name("writable")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteReadChannelCompanion")))
@interface GNCByteReadChannelCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCByteReadChannelCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) id<GNCByteReadChannel> Empty __attribute__((swift_name("Empty")));
@end


/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.4")
*/
__attribute__((swift_name("KotlinCancellationException")))
@interface GNCKotlinCancellationException : GNCKotlinIllegalStateException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClosedWriteChannelException")))
@interface GNCClosedWriteChannelException : GNCKotlinCancellationException
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((swift_name("Job")))
@protocol GNCJob <GNCKotlinCoroutineContextElement>
@required
- (id<GNCChildHandle>)attachChildChild:(id<GNCChildJob>)child __attribute__((swift_name("attachChild(child:)")));
- (void)cancelCause_:(GNCKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(cause_:)")));
- (GNCKotlinCancellationException *)getCancellationException __attribute__((swift_name("getCancellationException()")));
- (id<GNCDisposableHandle>)invokeOnCompletionOnCancelling:(BOOL)onCancelling invokeImmediately:(BOOL)invokeImmediately handler:(void (^)(GNCKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnCompletion(onCancelling:invokeImmediately:handler:)")));
- (id<GNCDisposableHandle>)invokeOnCompletionHandler:(void (^)(GNCKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnCompletion(handler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)joinWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("join(completionHandler:)")));
- (id<GNCJob>)plusOther:(id<GNCJob>)other __attribute__((swift_name("plus(other:)"))) __attribute__((unavailable("Operator '+' on two Job objects is meaningless. Job is a coroutine context element and `+` is a set-sum operator for coroutine contexts. The job to the right of `+` just replaces the job the left of `+`.")));
- (BOOL)start_ __attribute__((swift_name("start_()")));
@property (readonly) id<GNCKotlinSequence> children __attribute__((swift_name("children")));
@property (readonly) BOOL isActive __attribute__((swift_name("isActive")));
@property (readonly) BOOL isCancelled __attribute__((swift_name("isCancelled")));
@property (readonly) BOOL isCompleted __attribute__((swift_name("isCompleted")));
@property (readonly) id<GNCSelectClause0> onJoin __attribute__((swift_name("onJoin")));

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
@property (readonly) id<GNCJob> _Nullable parent __attribute__((swift_name("parent")));
@end

__attribute__((swift_name("ReaderJob")))
@protocol GNCReaderJob <GNCJob>
@required
@property (readonly) id<GNCByteWriteChannel> channel __attribute__((swift_name("channel")));
@end

__attribute__((swift_name("ReaderScope")))
@protocol GNCReaderScope <GNCCoroutineScope>
@required
@property (readonly) id<GNCByteReadChannel> channel __attribute__((swift_name("channel")));
@end

__attribute__((swift_name("WriterJob")))
@protocol GNCWriterJob <GNCJob>
@required
@property (readonly) id<GNCByteReadChannel> channel __attribute__((swift_name("channel")));
@end

__attribute__((swift_name("WriterScope")))
@protocol GNCWriterScope <GNCCoroutineScope>
@required
@property (readonly) id<GNCByteWriteChannel> channel __attribute__((swift_name("channel")));
@end

__attribute__((swift_name("WriterSession")))
@protocol GNCWriterSession
@required
- (void)flush __attribute__((swift_name("flush()")));
- (GNCChunkBuffer * _Nullable)requestMin:(int32_t)min __attribute__((swift_name("request(min:)")));
- (void)writtenN:(int32_t)n __attribute__((swift_name("written(n:)")));
@end

__attribute__((swift_name("WriterSuspendSession")))
@protocol GNCWriterSuspendSession <GNCWriterSession>
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)tryAwaitN:(int32_t)n completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("tryAwait(n:completionHandler:)")));
@end

__attribute__((swift_name("Allocator")))
@protocol GNCAllocator
@required
- (GNCMemory *)doAllocSize:(int32_t)size __attribute__((swift_name("doAlloc(size:)")));
- (GNCMemory *)doAllocSize_:(int64_t)size __attribute__((swift_name("doAlloc(size_:)")));
- (void)freeInstance:(GNCMemory *)instance __attribute__((swift_name("free(instance:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Memory")))
@interface GNCMemory : GNCBase
- (instancetype)initWithPointer:(void *)pointer size:(int64_t)size __attribute__((swift_name("init(pointer:size:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCMemoryCompanion *companion __attribute__((swift_name("companion")));
- (void)doCopyToDestination:(GNCMemory *)destination offset:(int32_t)offset length:(int32_t)length destinationOffset:(int32_t)destinationOffset __attribute__((swift_name("doCopyTo(destination:offset:length:destinationOffset:)")));
- (void)doCopyToDestination:(GNCMemory *)destination offset:(int64_t)offset length:(int64_t)length destinationOffset_:(int64_t)destinationOffset __attribute__((swift_name("doCopyTo(destination:offset:length:destinationOffset_:)")));
- (int8_t)loadAtIndex:(int32_t)index __attribute__((swift_name("loadAt(index:)")));
- (int8_t)loadAtIndex_:(int64_t)index __attribute__((swift_name("loadAt(index_:)")));
- (GNCMemory *)sliceOffset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("slice(offset:length:)")));
- (GNCMemory *)sliceOffset:(int64_t)offset length_:(int64_t)length __attribute__((swift_name("slice(offset:length_:)")));
- (void)storeAtIndex:(int32_t)index value:(int8_t)value __attribute__((swift_name("storeAt(index:value:)")));
- (void)storeAtIndex:(int64_t)index value_:(int8_t)value __attribute__((swift_name("storeAt(index:value_:)")));
@property (readonly) void *pointer __attribute__((swift_name("pointer")));
@property (readonly) int64_t size __attribute__((swift_name("size")));
@property (readonly) int32_t size32 __attribute__((swift_name("size32")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Memory.Companion")))
@interface GNCMemoryCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCMemoryCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) GNCMemory *Empty __attribute__((swift_name("Empty")));
@end

__attribute__((swift_name("Buffer")))
@interface GNCBuffer : GNCBase
- (instancetype)initWithMemory:(GNCMemory *)memory __attribute__((swift_name("init(memory:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCBufferCompanion *companion __attribute__((swift_name("companion")));
- (void)commitWrittenCount:(int32_t)count __attribute__((swift_name("commitWritten(count:)")));
- (void)discardExactCount:(int32_t)count __attribute__((swift_name("discardExact(count:)")));
- (GNCBuffer *)duplicate __attribute__((swift_name("duplicate()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)duplicateToCopy:(GNCBuffer *)copy __attribute__((swift_name("duplicateTo(copy:)")));
- (int8_t)readByte __attribute__((swift_name("readByte()")));
- (void)reserveEndGapEndGap:(int32_t)endGap __attribute__((swift_name("reserveEndGap(endGap:)")));
- (void)reserveStartGapStartGap:(int32_t)startGap __attribute__((swift_name("reserveStartGap(startGap:)")));
- (void)reset __attribute__((swift_name("reset()")));
- (void)resetForRead __attribute__((swift_name("resetForRead()")));
- (void)resetForWrite __attribute__((swift_name("resetForWrite()")));
- (void)resetForWriteLimit:(int32_t)limit __attribute__((swift_name("resetForWrite(limit:)")));
- (void)rewindCount:(int32_t)count __attribute__((swift_name("rewind(count:)")));
- (NSString *)description __attribute__((swift_name("description()")));
- (int32_t)tryPeekByte __attribute__((swift_name("tryPeekByte()")));
- (int32_t)tryReadByte __attribute__((swift_name("tryReadByte()")));
- (void)writeByteValue:(int8_t)value __attribute__((swift_name("writeByte(value:)")));
@property (readonly) int32_t capacity __attribute__((swift_name("capacity")));
@property (readonly) int32_t endGap __attribute__((swift_name("endGap")));
@property (readonly) int32_t limit __attribute__((swift_name("limit")));
@property (readonly) GNCMemory *memory __attribute__((swift_name("memory")));
@property (readonly) int32_t readPosition __attribute__((swift_name("readPosition")));
@property (readonly) int32_t readRemaining __attribute__((swift_name("readRemaining")));
@property (readonly) int32_t startGap __attribute__((swift_name("startGap")));
@property (readonly) int32_t writePosition __attribute__((swift_name("writePosition")));
@property (readonly) int32_t writeRemaining __attribute__((swift_name("writeRemaining")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Buffer.Companion")))
@interface GNCBufferCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCBufferCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) GNCBuffer *Empty __attribute__((swift_name("Empty")));
@property (readonly) int32_t ReservedSize __attribute__((swift_name("ReservedSize")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BufferLimitExceededException")))
@interface GNCBufferLimitExceededException : GNCKotlinException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteOrder")))
@interface GNCByteOrder : GNCKotlinEnum<GNCByteOrder *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCByteOrderCompanion *companion __attribute__((swift_name("companion")));
@property (class, readonly) GNCByteOrder *bigEndian __attribute__((swift_name("bigEndian")));
@property (class, readonly) GNCByteOrder *littleEndian __attribute__((swift_name("littleEndian")));
+ (GNCKotlinArray<GNCByteOrder *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteOrder.Companion")))
@interface GNCByteOrderCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCByteOrderCompanion *shared __attribute__((swift_name("shared")));
- (GNCByteOrder *)nativeOrder __attribute__((swift_name("nativeOrder()")));
@end

__attribute__((swift_name("KotlinAppendable")))
@protocol GNCKotlinAppendable
@required
- (id<GNCKotlinAppendable>)appendValue:(unichar)value __attribute__((swift_name("append(value:)")));
- (id<GNCKotlinAppendable>)appendValue_:(id _Nullable)value __attribute__((swift_name("append(value_:)")));
- (id<GNCKotlinAppendable>)appendValue:(id _Nullable)value startIndex:(int32_t)startIndex endIndex:(int32_t)endIndex __attribute__((swift_name("append(value:startIndex:endIndex:)")));
@end

__attribute__((swift_name("Output")))
@interface GNCOutput : GNCBase <GNCKotlinAppendable, GNCCloseable>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithPool:(id<GNCObjectPool>)pool __attribute__((swift_name("init(pool:)"))) __attribute__((objc_designated_initializer));
- (GNCOutput *)appendValue:(unichar)value __attribute__((swift_name("append(value:)")));
- (id<GNCKotlinAppendable>)appendCsq:(GNCKotlinCharArray *)csq start:(int32_t)start end:(int32_t)end __attribute__((swift_name("append(csq:start:end:)")));
- (GNCOutput *)appendValue_:(id _Nullable)value __attribute__((swift_name("append(value_:)")));
- (GNCOutput *)appendValue:(id _Nullable)value startIndex:(int32_t)startIndex endIndex:(int32_t)endIndex __attribute__((swift_name("append(value:startIndex:endIndex:)")));
- (void)close __attribute__((swift_name("close()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)closeDestination __attribute__((swift_name("closeDestination()")));
- (void)flush __attribute__((swift_name("flush()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)flushSource:(GNCMemory *)source offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("flush(source:offset:length:)")));
- (void)release_ __attribute__((swift_name("release()")));
- (void)writeByteV:(int8_t)v __attribute__((swift_name("writeByte(v:)")));
- (void)writePacketPacket:(GNCByteReadPacket *)packet __attribute__((swift_name("writePacket(packet:)")));
- (void)writePacketP:(GNCByteReadPacket *)p n:(int32_t)n __attribute__((swift_name("writePacket(p:n:)")));
- (void)writePacketP:(GNCByteReadPacket *)p n_:(int64_t)n __attribute__((swift_name("writePacket(p:n_:)")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@property (readonly) int32_t _size __attribute__((swift_name("_size")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@property (readonly) id<GNCObjectPool> pool __attribute__((swift_name("pool")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BytePacketBuilder")))
@interface GNCBytePacketBuilder : GNCOutput
- (instancetype)initWithPool:(id<GNCObjectPool>)pool __attribute__((swift_name("init(pool:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (GNCBytePacketBuilder *)appendValue:(unichar)value __attribute__((swift_name("append(value:)")));
- (GNCBytePacketBuilder *)appendValue_:(id _Nullable)value __attribute__((swift_name("append(value_:)")));
- (GNCBytePacketBuilder *)appendValue:(id _Nullable)value startIndex:(int32_t)startIndex endIndex:(int32_t)endIndex __attribute__((swift_name("append(value:startIndex:endIndex:)")));
- (GNCByteReadPacket *)build __attribute__((swift_name("build()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)closeDestination __attribute__((swift_name("closeDestination()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)flushSource:(GNCMemory *)source offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("flush(source:offset:length:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) BOOL isEmpty __attribute__((swift_name("isEmpty")));
@property (readonly) BOOL isNotEmpty __attribute__((swift_name("isNotEmpty")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end

__attribute__((swift_name("Input")))
@interface GNCInput : GNCBase <GNCCloseable>
- (instancetype)initWithHead:(GNCChunkBuffer *)head remaining:(int64_t)remaining pool:(id<GNCObjectPool>)pool __attribute__((swift_name("init(head:remaining:pool:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCInputCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)canRead __attribute__((swift_name("canRead()")));
- (void)close __attribute__((swift_name("close()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)closeSource __attribute__((swift_name("closeSource()")));
- (int32_t)discardN:(int32_t)n __attribute__((swift_name("discard(n:)")));
- (int64_t)discardN_:(int64_t)n __attribute__((swift_name("discard(n_:)")));
- (void)discardExactN:(int32_t)n __attribute__((swift_name("discardExact(n:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (GNCChunkBuffer * _Nullable)fill __attribute__((swift_name("fill()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (int32_t)fillDestination:(GNCMemory *)destination offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("fill(destination:offset:length:)")));
- (BOOL)hasBytesN:(int32_t)n __attribute__((swift_name("hasBytes(n:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)markNoMoreChunksAvailable __attribute__((swift_name("markNoMoreChunksAvailable()")));
- (int64_t)peekToDestination:(GNCMemory *)destination destinationOffset:(int64_t)destinationOffset offset:(int64_t)offset min:(int64_t)min max:(int64_t)max __attribute__((swift_name("peekTo(destination:destinationOffset:offset:min:max:)")));
- (int32_t)peekToBuffer:(GNCChunkBuffer *)buffer __attribute__((swift_name("peekTo(buffer:)")));
- (int8_t)readByte __attribute__((swift_name("readByte()")));
- (NSString *)readTextMin:(int32_t)min max:(int32_t)max __attribute__((swift_name("readText(min:max:)")));
- (int32_t)readTextOut:(id<GNCKotlinAppendable>)out min:(int32_t)min max:(int32_t)max __attribute__((swift_name("readText(out:min:max:)")));
- (NSString *)readTextExactExactCharacters:(int32_t)exactCharacters __attribute__((swift_name("readTextExact(exactCharacters:)")));
- (void)readTextExactOut:(id<GNCKotlinAppendable>)out exactCharacters:(int32_t)exactCharacters __attribute__((swift_name("readTextExact(out:exactCharacters:)")));
- (void)release_ __attribute__((swift_name("release()")));
- (int32_t)tryPeek __attribute__((swift_name("tryPeek()")));
@property (readonly) BOOL endOfInput __attribute__((swift_name("endOfInput")));
@property (readonly) id<GNCObjectPool> pool __attribute__((swift_name("pool")));
@property (readonly) int64_t remaining __attribute__((swift_name("remaining")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteReadPacket")))
@interface GNCByteReadPacket : GNCInput
- (instancetype)initWithHead:(GNCChunkBuffer *)head pool:(id<GNCObjectPool>)pool __attribute__((swift_name("init(head:pool:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithHead:(GNCChunkBuffer *)head remaining:(int64_t)remaining pool:(id<GNCObjectPool>)pool __attribute__((swift_name("init(head:remaining:pool:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCByteReadPacketCompanion *companion __attribute__((swift_name("companion")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)closeSource __attribute__((swift_name("closeSource()")));
- (GNCByteReadPacket *)doCopy __attribute__((swift_name("doCopy()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (GNCChunkBuffer * _Nullable)fill __attribute__((swift_name("fill()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (int32_t)fillDestination:(GNCMemory *)destination offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("fill(destination:offset:length:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteReadPacket.Companion")))
@interface GNCByteReadPacketCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCByteReadPacketCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) GNCByteReadPacket *Empty __attribute__((swift_name("Empty")));
@end

__attribute__((swift_name("ObjectPool")))
@protocol GNCObjectPool <GNCCloseable>
@required
- (id)borrow __attribute__((swift_name("borrow()")));
- (void)dispose_ __attribute__((swift_name("dispose()")));
- (void)recycleInstance:(id)instance __attribute__((swift_name("recycle(instance:)")));
@property (readonly) int32_t capacity __attribute__((swift_name("capacity")));
@end

__attribute__((swift_name("DefaultPool")))
@interface GNCDefaultPool<T> : GNCBase <GNCObjectPool>
- (instancetype)initWithCapacity:(int32_t)capacity __attribute__((swift_name("init(capacity:)"))) __attribute__((objc_designated_initializer));
- (T)borrow __attribute__((swift_name("borrow()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (T)clearInstanceInstance:(T)instance __attribute__((swift_name("clearInstance(instance:)")));
- (void)dispose_ __attribute__((swift_name("dispose()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)disposeInstanceInstance:(T)instance __attribute__((swift_name("disposeInstance(instance:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (T)produceInstance __attribute__((swift_name("produceInstance()")));
- (void)recycleInstance:(T)instance __attribute__((swift_name("recycle(instance:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)validateInstanceInstance:(T)instance __attribute__((swift_name("validateInstance(instance:)")));
@property (readonly) int32_t capacity __attribute__((swift_name("capacity")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@property (readonly) GNCSynchronizedObject *lock __attribute__((swift_name("lock"))) __attribute__((deprecated("This API is implementation detail. Consider creating new SynchronizedObject instead")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultBufferPool")))
@interface GNCDefaultBufferPool : GNCDefaultPool<GNCChunkBuffer *>
- (instancetype)initWithBufferSize:(int32_t)bufferSize capacity:(int32_t)capacity allocator:(id<GNCAllocator>)allocator __attribute__((swift_name("init(bufferSize:capacity:allocator:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCapacity:(int32_t)capacity __attribute__((swift_name("init(capacity:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (GNCChunkBuffer *)clearInstanceInstance:(GNCChunkBuffer *)instance __attribute__((swift_name("clearInstance(instance:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)disposeInstanceInstance:(GNCChunkBuffer *)instance __attribute__((swift_name("disposeInstance(instance:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (GNCChunkBuffer *)produceInstance __attribute__((swift_name("produceInstance()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)validateInstanceInstance:(GNCChunkBuffer *)instance __attribute__((swift_name("validateInstance(instance:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Input.Companion")))
@interface GNCInputCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCInputCompanion *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InsufficientSpaceException")))
@interface GNCInsufficientSpaceException : GNCKotlinException
- (instancetype)initWithSize:(int32_t)size availableSpace:(int32_t)availableSpace __attribute__((swift_name("init(size:availableSpace:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithName:(NSString *)name size:(int32_t)size availableSpace:(int32_t)availableSpace __attribute__((swift_name("init(name:size:availableSpace:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithSize:(int64_t)size availableSpace_:(int64_t)availableSpace __attribute__((swift_name("init(size:availableSpace_:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((swift_name("ChunkBuffer")))
@interface GNCChunkBuffer : GNCBuffer
- (instancetype)initWithMemory:(GNCMemory *)memory origin:(GNCChunkBuffer * _Nullable)origin parentPool:(id<GNCObjectPool> _Nullable)parentPool __attribute__((swift_name("init(memory:origin:parentPool:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMemory:(GNCMemory *)memory __attribute__((swift_name("init(memory:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCChunkBufferCompanion *companion __attribute__((swift_name("companion")));
- (GNCChunkBuffer * _Nullable)cleanNext __attribute__((swift_name("cleanNext()")));
- (GNCChunkBuffer *)duplicate __attribute__((swift_name("duplicate()")));
- (void)releasePool:(id<GNCObjectPool>)pool __attribute__((swift_name("release(pool:)")));
- (void)reset __attribute__((swift_name("reset()")));
@property (getter=next_) GNCChunkBuffer * _Nullable next __attribute__((swift_name("next")));
@property (readonly) GNCChunkBuffer * _Nullable origin __attribute__((swift_name("origin")));
@property (readonly) int32_t referenceCount __attribute__((swift_name("referenceCount")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChunkBuffer.Companion")))
@interface GNCChunkBufferCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCChunkBufferCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) GNCChunkBuffer *Empty __attribute__((swift_name("Empty")));
@property (readonly) id<GNCObjectPool> EmptyPool __attribute__((swift_name("EmptyPool")));
@property (readonly) id<GNCObjectPool> Pool __attribute__((swift_name("Pool")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MalformedUTF8InputException")))
@interface GNCMalformedUTF8InputException : GNCKotlinException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((swift_name("NoPoolImpl")))
@interface GNCNoPoolImpl<T> : GNCBase <GNCObjectPool>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)dispose_ __attribute__((swift_name("dispose()")));
- (void)recycleInstance:(T)instance __attribute__((swift_name("recycle(instance:)")));
@property (readonly) int32_t capacity __attribute__((swift_name("capacity")));
@end

__attribute__((swift_name("SingleInstancePool")))
@interface GNCSingleInstancePool<T> : GNCBase <GNCObjectPool>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (T)borrow __attribute__((swift_name("borrow()")));
- (void)dispose_ __attribute__((swift_name("dispose()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)disposeInstanceInstance:(T)instance __attribute__((swift_name("disposeInstance(instance:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (T)produceInstance __attribute__((swift_name("produceInstance()")));
- (void)recycleInstance:(T)instance __attribute__((swift_name("recycle(instance:)")));
@property (readonly) int32_t capacity __attribute__((swift_name("capacity")));
@end

__attribute__((swift_name("Charset")))
@interface GNCCharset : GNCBase
- (instancetype)initWith_name:(NSString *)_name __attribute__((swift_name("init(_name:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCCharsetCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (GNCCharsetDecoder *)doNewDecoder __attribute__((swift_name("doNewDecoder()")));
- (GNCCharsetEncoder *)doNewEncoder __attribute__((swift_name("doNewEncoder()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Charset.Companion")))
@interface GNCCharsetCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCCharsetCompanion *shared __attribute__((swift_name("shared")));
- (GNCCharset *)forNameName:(NSString *)name __attribute__((swift_name("forName(name:)")));
- (BOOL)isSupportedCharset:(NSString *)charset __attribute__((swift_name("isSupported(charset:)")));
@end

__attribute__((swift_name("CharsetDecoder")))
@interface GNCCharsetDecoder : GNCBase
- (instancetype)initWith_charset:(GNCCharset *)_charset __attribute__((swift_name("init(_charset:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((swift_name("CharsetEncoder")))
@interface GNCCharsetEncoder : GNCBase
- (instancetype)initWith_charset:(GNCCharset *)_charset __attribute__((swift_name("init(_charset:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Charsets")))
@interface GNCCharsets : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)charsets __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCCharsets *shared __attribute__((swift_name("shared")));
@property (readonly) GNCCharset *ISO_8859_1 __attribute__((swift_name("ISO_8859_1")));
@property (readonly) GNCCharset *UTF_8 __attribute__((swift_name("UTF_8")));
@end

__attribute__((swift_name("MalformedInputException")))
@interface GNCMalformedInputException : GNCKotlinThrowable
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TooLongLineException")))
@interface GNCTooLongLineException : GNCMalformedInputException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((swift_name("EOFException")))
@interface GNCEOFException : GNCIOException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString *)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((swift_name("PosixException")))
@interface GNCPosixException : GNCKotlinException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCPosixExceptionCompanion *companion __attribute__((swift_name("companion")));
@property (readonly) int32_t errno __attribute__((swift_name("errno")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.AddressAlreadyInUseException")))
@interface GNCPosixExceptionAddressAlreadyInUseException : GNCPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.BadFileDescriptorException")))
@interface GNCPosixExceptionBadFileDescriptorException : GNCPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.BadMessageException")))
@interface GNCPosixExceptionBadMessageException : GNCPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.Companion")))
@interface GNCPosixExceptionCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCPosixExceptionCompanion *shared __attribute__((swift_name("shared")));
- (GNCPosixException *)forErrnoErrno:(int32_t)errno posixFunctionName:(NSString * _Nullable)posixFunctionName __attribute__((swift_name("forErrno(errno:posixFunctionName:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.ConnectionAbortedException")))
@interface GNCPosixExceptionConnectionAbortedException : GNCPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.ConnectionRefusedException")))
@interface GNCPosixExceptionConnectionRefusedException : GNCPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.ConnectionResetException")))
@interface GNCPosixExceptionConnectionResetException : GNCPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.InterruptedException")))
@interface GNCPosixExceptionInterruptedException : GNCPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.InvalidArgumentException")))
@interface GNCPosixExceptionInvalidArgumentException : GNCPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.NoMemoryException")))
@interface GNCPosixExceptionNoMemoryException : GNCPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.NoSuchFileException")))
@interface GNCPosixExceptionNoSuchFileException : GNCPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.NotConnectedException")))
@interface GNCPosixExceptionNotConnectedException : GNCPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.NotSocketException")))
@interface GNCPosixExceptionNotSocketException : GNCPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.OverflowException")))
@interface GNCPosixExceptionOverflowException : GNCPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.PosixErrnoException")))
@interface GNCPosixExceptionPosixErrnoException : GNCPosixException
- (instancetype)initWithErrno:(int32_t)errno message:(NSString *)message __attribute__((swift_name("init(errno:message:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.TimeoutIOException")))
@interface GNCPosixExceptionTimeoutIOException : GNCPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.TryAgainException")))
@interface GNCPosixExceptionTryAgainException : GNCPosixException
- (instancetype)initWithErrno:(int32_t)errno message:(NSString *)message __attribute__((swift_name("init(errno:message:)"))) __attribute__((objc_designated_initializer));
@end

__attribute__((swift_name("ChildJob")))
@protocol GNCChildJob <GNCJob>
@required
- (void)parentCancelledParentJob:(id<GNCParentJob>)parentJob __attribute__((swift_name("parentCancelled(parentJob:)")));
@end

__attribute__((swift_name("ParentJob")))
@protocol GNCParentJob <GNCJob>
@required
- (GNCKotlinCancellationException *)getChildJobCancellationCause __attribute__((swift_name("getChildJobCancellationCause()")));
@end

__attribute__((swift_name("JobSupport")))
@interface GNCJobSupport : GNCBase <GNCJob, GNCChildJob, GNCParentJob>
- (instancetype)initWithActive:(BOOL)active __attribute__((swift_name("init(active:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable("This is internal API and may be removed in the future releases")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)afterCompletionState:(id _Nullable)state __attribute__((swift_name("afterCompletion(state:)")));
- (id<GNCChildHandle>)attachChildChild:(id<GNCChildJob>)child __attribute__((swift_name("attachChild(child:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)awaitInternalWithCompletionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("awaitInternal(completionHandler:)")));
- (void)cancelCause_:(GNCKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(cause_:)")));
- (BOOL)cancelCoroutineCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("cancelCoroutine(cause:)")));
- (void)cancelInternalCause:(GNCKotlinThrowable *)cause __attribute__((swift_name("cancelInternal(cause:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (NSString *)cancellationExceptionMessage __attribute__((swift_name("cancellationExceptionMessage()")));
- (BOOL)childCancelledCause:(GNCKotlinThrowable *)cause __attribute__((swift_name("childCancelled(cause:)")));
- (GNCKotlinCancellationException *)getCancellationException __attribute__((swift_name("getCancellationException()")));
- (GNCKotlinCancellationException *)getChildJobCancellationCause __attribute__((swift_name("getChildJobCancellationCause()")));
- (GNCKotlinThrowable * _Nullable)getCompletionExceptionOrNull __attribute__((swift_name("getCompletionExceptionOrNull()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (BOOL)handleJobExceptionException:(GNCKotlinThrowable *)exception __attribute__((swift_name("handleJobException(exception:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)doInitParentJobParent:(id<GNCJob> _Nullable)parent __attribute__((swift_name("doInitParentJob(parent:)")));
- (id<GNCDisposableHandle>)invokeOnCompletionOnCancelling:(BOOL)onCancelling invokeImmediately:(BOOL)invokeImmediately handler:(void (^)(GNCKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnCompletion(onCancelling:invokeImmediately:handler:)")));
- (id<GNCDisposableHandle>)invokeOnCompletionHandler:(void (^)(GNCKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnCompletion(handler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)joinWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("join(completionHandler:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)onCancellingCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("onCancelling(cause:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)onCompletionInternalState:(id _Nullable)state __attribute__((swift_name("onCompletionInternal(state:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)onStart __attribute__((swift_name("onStart()")));
- (void)parentCancelledParentJob:(id<GNCParentJob>)parentJob __attribute__((swift_name("parentCancelled(parentJob:)")));
- (BOOL)start_ __attribute__((swift_name("start_()")));
- (NSString *)toDebugString __attribute__((swift_name("toDebugString()")));
- (NSString *)description __attribute__((swift_name("description()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (GNCKotlinCancellationException *)toCancellationException:(GNCKotlinThrowable *)receiver message:(NSString * _Nullable)message __attribute__((swift_name("toCancellationException(_:message:)")));
@property (readonly) id<GNCKotlinSequence> children __attribute__((swift_name("children")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@property (readonly) GNCKotlinThrowable * _Nullable completionCause __attribute__((swift_name("completionCause")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@property (readonly) BOOL completionCauseHandled __attribute__((swift_name("completionCauseHandled")));
@property (readonly) BOOL isActive __attribute__((swift_name("isActive")));
@property (readonly) BOOL isCancelled __attribute__((swift_name("isCancelled")));
@property (readonly) BOOL isCompleted __attribute__((swift_name("isCompleted")));
@property (readonly) BOOL isCompletedExceptionally __attribute__((swift_name("isCompletedExceptionally")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@property (readonly) BOOL isScopedCoroutine __attribute__((swift_name("isScopedCoroutine")));
@property (readonly) id<GNCKotlinCoroutineContextKey> key __attribute__((swift_name("key")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@property (readonly) id<GNCSelectClause1> onAwaitInternal __attribute__((swift_name("onAwaitInternal")));
@property (readonly) id<GNCSelectClause0> onJoin __attribute__((swift_name("onJoin")));
@property (readonly) id<GNCJob> _Nullable parent __attribute__((swift_name("parent")));
@end


/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.3")
*/
__attribute__((swift_name("KotlinContinuation")))
@protocol GNCKotlinContinuation
@required
- (void)resumeWithResult:(id _Nullable)result __attribute__((swift_name("resumeWith(result:)")));
@property (readonly) id<GNCKotlinCoroutineContext> context __attribute__((swift_name("context")));
@end

__attribute__((swift_name("AbstractCoroutine")))
@interface GNCAbstractCoroutine<__contravariant T> : GNCJobSupport <GNCJob, GNCKotlinContinuation, GNCCoroutineScope>
- (instancetype)initWithParentContext:(id<GNCKotlinCoroutineContext>)parentContext initParentJob:(BOOL)initParentJob active:(BOOL)active __attribute__((swift_name("init(parentContext:initParentJob:active:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithActive:(BOOL)active __attribute__((swift_name("init(active:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)afterResumeState:(id _Nullable)state __attribute__((swift_name("afterResume(state:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (NSString *)cancellationExceptionMessage __attribute__((swift_name("cancellationExceptionMessage()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)onCancelledCause:(GNCKotlinThrowable *)cause handled:(BOOL)handled __attribute__((swift_name("onCancelled(cause:handled:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)onCompletedValue:(T _Nullable)value __attribute__((swift_name("onCompleted(value:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)onCompletionInternalState:(id _Nullable)state __attribute__((swift_name("onCompletionInternal(state:)")));
- (void)resumeWithResult:(id _Nullable)result __attribute__((swift_name("resumeWith(result:)")));
- (void)startStart:(GNCCoroutineStart *)start receiver:(id _Nullable)receiver block:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("start(start:receiver:block:)")));
@property (readonly) id<GNCKotlinCoroutineContext> context __attribute__((swift_name("context")));
@property (readonly) id<GNCKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@property (readonly) BOOL isActive __attribute__((swift_name("isActive")));
@end

__attribute__((swift_name("CancellableContinuation")))
@protocol GNCCancellableContinuation <GNCKotlinContinuation>
@required
- (BOOL)cancelCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("cancel(cause:)")));
- (void)completeResumeToken:(id)token __attribute__((swift_name("completeResume(token:)")));
- (void)doInitCancellability __attribute__((swift_name("doInitCancellability()")));
- (void)invokeOnCancellationHandler:(void (^)(GNCKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnCancellation(handler:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
- (void)resumeValue:(id _Nullable)value onCancellation:(void (^ _Nullable)(GNCKotlinThrowable *))onCancellation __attribute__((swift_name("resume(value:onCancellation:)")));
- (id _Nullable)tryResumeValue:(id _Nullable)value idempotent:(id _Nullable)idempotent __attribute__((swift_name("tryResume(value:idempotent:)")));
- (id _Nullable)tryResumeValue:(id _Nullable)value idempotent:(id _Nullable)idempotent onCancellation:(void (^ _Nullable)(GNCKotlinThrowable *))onCancellation __attribute__((swift_name("tryResume(value:idempotent:onCancellation:)")));
- (id _Nullable)tryResumeWithExceptionException:(GNCKotlinThrowable *)exception __attribute__((swift_name("tryResumeWithException(exception:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
- (void)resumeUndispatched:(GNCCoroutineDispatcher *)receiver value:(id _Nullable)value __attribute__((swift_name("resumeUndispatched(_:value:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
- (void)resumeUndispatchedWithException:(GNCCoroutineDispatcher *)receiver exception:(GNCKotlinThrowable *)exception __attribute__((swift_name("resumeUndispatchedWithException(_:exception:)")));
@property (readonly) BOOL isActive __attribute__((swift_name("isActive")));
@property (readonly) BOOL isCancelled __attribute__((swift_name("isCancelled")));
@property (readonly) BOOL isCompleted __attribute__((swift_name("isCompleted")));
@end

__attribute__((swift_name("DisposableHandle")))
@protocol GNCDisposableHandle
@required
- (void)dispose_ __attribute__((swift_name("dispose()")));
@end

__attribute__((swift_name("ChildHandle")))
@protocol GNCChildHandle <GNCDisposableHandle>
@required
- (BOOL)childCancelledCause:(GNCKotlinThrowable *)cause __attribute__((swift_name("childCancelled(cause:)")));
@property (readonly) id<GNCJob> _Nullable parent __attribute__((swift_name("parent")));
@end


/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.3")
*/
__attribute__((swift_name("KotlinContinuationInterceptor")))
@protocol GNCKotlinContinuationInterceptor <GNCKotlinCoroutineContextElement>
@required
- (id<GNCKotlinContinuation>)interceptContinuationContinuation:(id<GNCKotlinContinuation>)continuation __attribute__((swift_name("interceptContinuation(continuation:)")));
- (void)releaseInterceptedContinuationContinuation:(id<GNCKotlinContinuation>)continuation __attribute__((swift_name("releaseInterceptedContinuation(continuation:)")));
@end

__attribute__((swift_name("CoroutineDispatcher")))
@interface GNCCoroutineDispatcher : GNCKotlinAbstractCoroutineContextElement <GNCKotlinContinuationInterceptor>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithKey:(id<GNCKotlinCoroutineContextKey>)key __attribute__((swift_name("init(key:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCCoroutineDispatcherKey *companion __attribute__((swift_name("companion")));
- (void)dispatchContext:(id<GNCKotlinCoroutineContext>)context block:(id<GNCRunnable>)block __attribute__((swift_name("dispatch(context:block:)")));
- (void)dispatchYieldContext:(id<GNCKotlinCoroutineContext>)context block:(id<GNCRunnable>)block __attribute__((swift_name("dispatchYield(context:block:)")));
- (id<GNCKotlinContinuation>)interceptContinuationContinuation:(id<GNCKotlinContinuation>)continuation __attribute__((swift_name("interceptContinuation(continuation:)")));
- (BOOL)isDispatchNeededContext:(id<GNCKotlinCoroutineContext>)context __attribute__((swift_name("isDispatchNeeded(context:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
- (GNCCoroutineDispatcher *)limitedParallelismParallelism:(int32_t)parallelism __attribute__((swift_name("limitedParallelism(parallelism:)")));
- (GNCCoroutineDispatcher *)plusOther_:(GNCCoroutineDispatcher *)other __attribute__((swift_name("plus(other_:)"))) __attribute__((unavailable("Operator '+' on two CoroutineDispatcher objects is meaningless. CoroutineDispatcher is a coroutine context element and `+` is a set-sum operator for coroutine contexts. The dispatcher to the right of `+` just replaces the dispatcher to the left.")));
- (void)releaseInterceptedContinuationContinuation:(id<GNCKotlinContinuation>)continuation __attribute__((swift_name("releaseInterceptedContinuation(continuation:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

__attribute__((swift_name("CloseableCoroutineDispatcher")))
@interface GNCCloseableCoroutineDispatcher : GNCCoroutineDispatcher
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)close __attribute__((swift_name("close()")));
@end

__attribute__((swift_name("Deferred")))
@protocol GNCDeferred <GNCJob>
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)awaitWithCompletionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("await(completionHandler:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
- (id _Nullable)getCompleted __attribute__((swift_name("getCompleted()")));

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
- (GNCKotlinThrowable * _Nullable)getCompletionExceptionOrNull __attribute__((swift_name("getCompletionExceptionOrNull()")));
@property (readonly) id<GNCSelectClause1> onAwait __attribute__((swift_name("onAwait")));
@end

__attribute__((swift_name("CompletableDeferred")))
@protocol GNCCompletableDeferred <GNCDeferred>
@required
- (BOOL)completeValue:(id _Nullable)value __attribute__((swift_name("complete(value:)")));
- (BOOL)completeExceptionallyException:(GNCKotlinThrowable *)exception __attribute__((swift_name("completeExceptionally(exception:)")));
@end

__attribute__((swift_name("CompletableJob")))
@protocol GNCCompletableJob <GNCJob>
@required
- (BOOL)complete __attribute__((swift_name("complete()")));
- (BOOL)completeExceptionallyException:(GNCKotlinThrowable *)exception __attribute__((swift_name("completeExceptionally(exception:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CompletionHandlerException")))
@interface GNCCompletionHandlerException : GNCKotlinRuntimeException
- (instancetype)initWithMessage:(NSString *)message cause:(GNCKotlinThrowable *)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end


/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.3")
 *   kotlin.ExperimentalStdlibApi
*/
__attribute__((swift_name("KotlinAbstractCoroutineContextKey")))
@interface GNCKotlinAbstractCoroutineContextKey<B, E> : GNCBase <GNCKotlinCoroutineContextKey>
- (instancetype)initWithBaseKey:(id<GNCKotlinCoroutineContextKey>)baseKey safeCast:(E _Nullable (^)(id<GNCKotlinCoroutineContextElement>))safeCast __attribute__((swift_name("init(baseKey:safeCast:)"))) __attribute__((objc_designated_initializer));
@end


/**
 * @note annotations
 *   kotlin.ExperimentalStdlibApi
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineDispatcher.Key")))
@interface GNCCoroutineDispatcherKey : GNCKotlinAbstractCoroutineContextKey<id<GNCKotlinContinuationInterceptor>, GNCCoroutineDispatcher *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithBaseKey:(id<GNCKotlinCoroutineContextKey>)baseKey safeCast:(id<GNCKotlinCoroutineContextElement> _Nullable (^)(id<GNCKotlinCoroutineContextElement>))safeCast __attribute__((swift_name("init(baseKey:safeCast:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)key __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCCoroutineDispatcherKey *shared __attribute__((swift_name("shared")));
@end

__attribute__((swift_name("CoroutineExceptionHandler")))
@protocol GNCCoroutineExceptionHandler <GNCKotlinCoroutineContextElement>
@required
- (void)handleExceptionContext:(id<GNCKotlinCoroutineContext>)context exception:(GNCKotlinThrowable *)exception __attribute__((swift_name("handleException(context:exception:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineExceptionHandlerKey")))
@interface GNCCoroutineExceptionHandlerKey : GNCBase <GNCKotlinCoroutineContextKey>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)key __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCCoroutineExceptionHandlerKey *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineName")))
@interface GNCCoroutineName : GNCKotlinAbstractCoroutineContextElement
- (instancetype)initWithName:(NSString *)name __attribute__((swift_name("init(name:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithKey:(id<GNCKotlinCoroutineContextKey>)key __attribute__((swift_name("init(key:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly, getter=companion) GNCCoroutineNameKey *companion __attribute__((swift_name("companion")));
- (GNCCoroutineName *)doCopyName:(NSString *)name __attribute__((swift_name("doCopy(name:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineName.Key")))
@interface GNCCoroutineNameKey : GNCBase <GNCKotlinCoroutineContextKey>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)key __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCCoroutineNameKey *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineStart")))
@interface GNCCoroutineStart : GNCKotlinEnum<GNCCoroutineStart *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCCoroutineStart *default_ __attribute__((swift_name("default_")));
@property (class, readonly) GNCCoroutineStart *lazy __attribute__((swift_name("lazy")));
@property (class, readonly) GNCCoroutineStart *atomic __attribute__((swift_name("atomic")));
@property (class, readonly) GNCCoroutineStart *undispatched __attribute__((swift_name("undispatched")));
+ (GNCKotlinArray<GNCCoroutineStart *> *)values __attribute__((swift_name("values()")));
- (void)invokeBlock:(id<GNCKotlinSuspendFunction0>)block completion:(id<GNCKotlinContinuation>)completion __attribute__((swift_name("invoke(block:completion:)")));
- (void)invokeBlock:(id<GNCKotlinSuspendFunction1>)block receiver:(id _Nullable)receiver completion:(id<GNCKotlinContinuation>)completion __attribute__((swift_name("invoke(block:receiver:completion:)")));
@property (readonly) BOOL isLazy __attribute__((swift_name("isLazy")));
@end

__attribute__((swift_name("Delay")))
@protocol GNCDelay
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)delayTime:(int64_t)time completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("delay(time:completionHandler:)"))) __attribute__((unavailable("Deprecated without replacement as an internal method never intended for public use")));
- (id<GNCDisposableHandle>)invokeOnTimeoutTimeMillis:(int64_t)timeMillis block:(id<GNCRunnable>)block context:(id<GNCKotlinCoroutineContext>)context __attribute__((swift_name("invokeOnTimeout(timeMillis:block:context:)")));
- (void)scheduleResumeAfterDelayTimeMillis:(int64_t)timeMillis continuation:(id<GNCCancellableContinuation>)continuation __attribute__((swift_name("scheduleResumeAfterDelay(timeMillis:continuation:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Dispatchers")))
@interface GNCDispatchers : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)dispatchers __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCDispatchers *shared __attribute__((swift_name("shared")));
@property (readonly) GNCCoroutineDispatcher *Default __attribute__((swift_name("Default")));
@property (readonly) GNCMainCoroutineDispatcher *Main __attribute__((swift_name("Main")));
@property (readonly) GNCCoroutineDispatcher *Unconfined __attribute__((swift_name("Unconfined")));
@end


/**
 * @note annotations
 *   kotlinx.coroutines.DelicateCoroutinesApi
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GlobalScope")))
@interface GNCGlobalScope : GNCBase <GNCCoroutineScope>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)globalScope __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCGlobalScope *shared __attribute__((swift_name("shared")));
@property (readonly) id<GNCKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JobKey")))
@interface GNCJobKey : GNCBase <GNCKotlinCoroutineContextKey>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)key __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCJobKey *shared __attribute__((swift_name("shared")));
@end

__attribute__((swift_name("MainCoroutineDispatcher")))
@interface GNCMainCoroutineDispatcher : GNCCoroutineDispatcher
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (GNCCoroutineDispatcher *)limitedParallelismParallelism:(int32_t)parallelism __attribute__((swift_name("limitedParallelism(parallelism:)")));
- (NSString *)description __attribute__((swift_name("description()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (NSString * _Nullable)toStringInternalImpl __attribute__((swift_name("toStringInternalImpl()")));
@property (readonly) GNCMainCoroutineDispatcher *immediate __attribute__((swift_name("immediate")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NonCancellable")))
@interface GNCNonCancellable : GNCKotlinAbstractCoroutineContextElement <GNCJob>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithKey:(id<GNCKotlinCoroutineContextKey>)key __attribute__((swift_name("init(key:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)nonCancellable __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCNonCancellable *shared __attribute__((swift_name("shared")));
- (id<GNCChildHandle>)attachChildChild:(id<GNCChildJob>)child __attribute__((swift_name("attachChild(child:)"))) __attribute__((deprecated("NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited")));
- (void)cancelCause_:(GNCKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(cause_:)"))) __attribute__((deprecated("NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited")));
- (GNCKotlinCancellationException *)getCancellationException __attribute__((swift_name("getCancellationException()"))) __attribute__((deprecated("NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited")));
- (id<GNCDisposableHandle>)invokeOnCompletionOnCancelling:(BOOL)onCancelling invokeImmediately:(BOOL)invokeImmediately handler:(void (^)(GNCKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnCompletion(onCancelling:invokeImmediately:handler:)"))) __attribute__((deprecated("NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited")));
- (id<GNCDisposableHandle>)invokeOnCompletionHandler:(void (^)(GNCKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnCompletion(handler:)"))) __attribute__((deprecated("NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)joinWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("join(completionHandler:)"))) __attribute__((deprecated("NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited")));
- (BOOL)start_ __attribute__((swift_name("start_()"))) __attribute__((deprecated("NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<GNCKotlinSequence> children __attribute__((swift_name("children"))) __attribute__((deprecated("NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited")));
@property (readonly) BOOL isActive __attribute__((swift_name("isActive"))) __attribute__((deprecated("NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited")));
@property (readonly) BOOL isCancelled __attribute__((swift_name("isCancelled"))) __attribute__((deprecated("NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited")));
@property (readonly) BOOL isCompleted __attribute__((swift_name("isCompleted"))) __attribute__((deprecated("NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited")));
@property (readonly) id<GNCSelectClause0> onJoin __attribute__((swift_name("onJoin"))) __attribute__((deprecated("NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited")));
@property (readonly) id<GNCJob> _Nullable parent __attribute__((swift_name("parent"))) __attribute__((deprecated("NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NonDisposableHandle")))
@interface GNCNonDisposableHandle : GNCBase <GNCDisposableHandle, GNCChildHandle>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)nonDisposableHandle __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCNonDisposableHandle *shared __attribute__((swift_name("shared")));
- (BOOL)childCancelledCause:(GNCKotlinThrowable *)cause __attribute__((swift_name("childCancelled(cause:)")));
- (void)dispose_ __attribute__((swift_name("dispose()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<GNCJob> _Nullable parent __attribute__((swift_name("parent")));
@end

__attribute__((swift_name("Runnable")))
@protocol GNCRunnable
@required
- (void)run __attribute__((swift_name("run()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TimeoutCancellationException")))
@interface GNCTimeoutCancellationException : GNCKotlinCancellationException <GNCCopyableThrowable>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (GNCTimeoutCancellationException *)createCopy __attribute__((swift_name("createCopy()")));
@end

__attribute__((swift_name("SendChannel")))
@protocol GNCSendChannel
@required
- (BOOL)closeCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("close(cause:)")));
- (void)invokeOnCloseHandler:(void (^)(GNCKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnClose(handler:)")));
- (BOOL)offerElement:(id _Nullable)element __attribute__((swift_name("offer(element:)"))) __attribute__((unavailable("Deprecated in the favour of 'trySend' method")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)sendElement:(id _Nullable)element completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("send(element:completionHandler:)")));
- (id _Nullable)trySendElement:(id _Nullable)element __attribute__((swift_name("trySend(element:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.DelicateCoroutinesApi
*/
@property (readonly) BOOL isClosedForSend __attribute__((swift_name("isClosedForSend")));
@property (readonly) id<GNCSelectClause2> onSend __attribute__((swift_name("onSend")));
@end


/**
 * @note annotations
 *   kotlinx.coroutines.ObsoleteCoroutinesApi
*/
__attribute__((swift_name("BroadcastChannel")))
@protocol GNCBroadcastChannel <GNCSendChannel>
@required
- (void)cancelCause_:(GNCKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(cause_:)")));
- (id<GNCReceiveChannel>)openSubscription __attribute__((swift_name("openSubscription()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BufferOverflow")))
@interface GNCBufferOverflow : GNCKotlinEnum<GNCBufferOverflow *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCBufferOverflow *suspend __attribute__((swift_name("suspend")));
@property (class, readonly) GNCBufferOverflow *dropOldest __attribute__((swift_name("dropOldest")));
@property (class, readonly) GNCBufferOverflow *dropLatest __attribute__((swift_name("dropLatest")));
+ (GNCKotlinArray<GNCBufferOverflow *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((swift_name("ReceiveChannel")))
@protocol GNCReceiveChannel
@required
- (void)cancelCause_:(GNCKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(cause_:)")));
- (id<GNCChannelIterator>)iterator __attribute__((swift_name("iterator()")));
- (id _Nullable)poll __attribute__((swift_name("poll()"))) __attribute__((unavailable("Deprecated in the favour of 'tryReceive'. Please note that the provided replacement does not rethrow channel's close cause as 'poll' did, for the precise replacement please refer to the 'poll' documentation")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveWithCompletionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("receive(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveCatchingWithCompletionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("receiveCatching(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveOrNullWithCompletionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("receiveOrNull(completionHandler:)"))) __attribute__((unavailable("Deprecated in favor of 'receiveCatching'. Please note that the provided replacement does not rethrow channel's close cause as 'receiveOrNull' did, for the detailed replacement please refer to the 'receiveOrNull' documentation")));
- (id _Nullable)tryReceive __attribute__((swift_name("tryReceive()")));

/**
 * @note annotations
 *   kotlinx.coroutines.DelicateCoroutinesApi
*/
@property (readonly) BOOL isClosedForReceive __attribute__((swift_name("isClosedForReceive")));

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
@property (readonly) BOOL isEmpty __attribute__((swift_name("isEmpty")));
@property (readonly) id<GNCSelectClause1> onReceive __attribute__((swift_name("onReceive")));
@property (readonly) id<GNCSelectClause1> onReceiveCatching __attribute__((swift_name("onReceiveCatching")));
@property (readonly) id<GNCSelectClause1> onReceiveOrNull __attribute__((swift_name("onReceiveOrNull"))) __attribute__((unavailable("Deprecated in favor of onReceiveCatching extension")));
@end

__attribute__((swift_name("Channel")))
@protocol GNCChannel <GNCSendChannel, GNCReceiveChannel>
@required
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChannelFactory")))
@interface GNCChannelFactory : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)factory __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCChannelFactory *shared __attribute__((swift_name("shared")));
@property (readonly) int32_t BUFFERED __attribute__((swift_name("BUFFERED")));
@property (readonly) int32_t CONFLATED __attribute__((swift_name("CONFLATED")));
@property (readonly) NSString *DEFAULT_BUFFER_PROPERTY_NAME __attribute__((swift_name("DEFAULT_BUFFER_PROPERTY_NAME")));
@property (readonly) int32_t RENDEZVOUS __attribute__((swift_name("RENDEZVOUS")));
@property (readonly) int32_t UNLIMITED __attribute__((swift_name("UNLIMITED")));
@end

__attribute__((swift_name("ChannelIterator")))
@protocol GNCChannelIterator
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)hasNextWithCompletionHandler:(void (^)(GNCBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("hasNext(completionHandler:)")));
- (id _Nullable)next __attribute__((swift_name("next()")));
@end

__attribute__((swift_name("KotlinNoSuchElementException")))
@interface GNCKotlinNoSuchElementException : GNCKotlinRuntimeException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClosedReceiveChannelException")))
@interface GNCClosedReceiveChannelException : GNCKotlinNoSuchElementException
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClosedSendChannelException")))
@interface GNCClosedSendChannelException : GNCKotlinIllegalStateException
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end


/**
 * @note annotations
 *   kotlinx.coroutines.ObsoleteCoroutinesApi
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ConflatedBroadcastChannel")))
@interface GNCConflatedBroadcastChannel<E> : GNCBase <GNCBroadcastChannel>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((deprecated("ConflatedBroadcastChannel is deprecated in the favour of SharedFlow and is no longer supported")));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithValue:(E _Nullable)value __attribute__((swift_name("init(value:)"))) __attribute__((objc_designated_initializer)) __attribute__((deprecated("ConflatedBroadcastChannel is deprecated in the favour of SharedFlow and is no longer supported")));
- (void)cancelCause_:(GNCKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(cause_:)")));
- (BOOL)closeCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("close(cause:)")));
- (void)invokeOnCloseHandler:(void (^)(GNCKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnClose(handler:)")));
- (BOOL)offerElement:(E _Nullable)element __attribute__((swift_name("offer(element:)"))) __attribute__((unavailable("Deprecated in the favour of 'trySend' method")));
- (id<GNCReceiveChannel>)openSubscription __attribute__((swift_name("openSubscription()")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)sendElement:(E _Nullable)element completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("send(element:completionHandler:)")));
- (id _Nullable)trySendElement:(E _Nullable)element __attribute__((swift_name("trySend(element:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.DelicateCoroutinesApi
*/
@property (readonly) BOOL isClosedForSend __attribute__((swift_name("isClosedForSend")));
@property (readonly) id<GNCSelectClause2> onSend __attribute__((swift_name("onSend")));
@property (readonly) E _Nullable value __attribute__((swift_name("value")));
@property (readonly) E _Nullable valueOrNull __attribute__((swift_name("valueOrNull")));
@end

__attribute__((swift_name("ProducerScope")))
@protocol GNCProducerScope <GNCCoroutineScope, GNCSendChannel>
@required
@property (readonly) id<GNCSendChannel> channel __attribute__((swift_name("channel")));
@end

__attribute__((swift_name("Flow")))
@protocol GNCFlow
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectCollector:(id<GNCFlowCollector>)collector completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collect(collector:completionHandler:)")));
@end


/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
__attribute__((swift_name("AbstractFlow")))
@interface GNCAbstractFlow<T> : GNCBase <GNCFlow>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectCollector:(id<GNCFlowCollector>)collector completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collect(collector:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectSafelyCollector:(id<GNCFlowCollector>)collector completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collectSafely(collector:completionHandler:)")));
@end

__attribute__((swift_name("FlowCollector")))
@protocol GNCFlowCollector
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)emitValue:(id _Nullable)value completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("emit(value:completionHandler:)")));
@end

__attribute__((swift_name("SharedFlow")))
@protocol GNCSharedFlow <GNCFlow>
@required
@property (readonly) NSArray<id> *replayCache __attribute__((swift_name("replayCache")));
@end

__attribute__((swift_name("MutableSharedFlow")))
@protocol GNCMutableSharedFlow <GNCSharedFlow, GNCFlowCollector>
@required

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
- (void)resetReplayCache __attribute__((swift_name("resetReplayCache()")));
- (BOOL)tryEmitValue:(id _Nullable)value __attribute__((swift_name("tryEmit(value:)")));
@property (readonly) id<GNCStateFlow> subscriptionCount __attribute__((swift_name("subscriptionCount")));
@end

__attribute__((swift_name("StateFlow")))
@protocol GNCStateFlow <GNCSharedFlow>
@required
@property (readonly) id _Nullable value_ __attribute__((swift_name("value_")));
@end

__attribute__((swift_name("MutableStateFlow")))
@protocol GNCMutableStateFlow <GNCStateFlow, GNCMutableSharedFlow>
@required
- (BOOL)compareAndSetExpect:(id _Nullable)expect update:(id _Nullable)update __attribute__((swift_name("compareAndSet(expect:update:)")));
- (void)setValue:(id _Nullable)value __attribute__((swift_name("setValue(_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SharingCommand")))
@interface GNCSharingCommand : GNCKotlinEnum<GNCSharingCommand *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCSharingCommand *start __attribute__((swift_name("start")));
@property (class, readonly) GNCSharingCommand *stop __attribute__((swift_name("stop")));
@property (class, readonly) GNCSharingCommand *stopAndResetReplayCache __attribute__((swift_name("stopAndResetReplayCache")));
+ (GNCKotlinArray<GNCSharingCommand *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((swift_name("SharingStarted")))
@protocol GNCSharingStarted
@required
- (id<GNCFlow>)commandSubscriptionCount:(id<GNCStateFlow>)subscriptionCount __attribute__((swift_name("command(subscriptionCount:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SharingStartedCompanion")))
@interface GNCSharingStartedCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCSharingStartedCompanion *shared __attribute__((swift_name("shared")));
- (id<GNCSharingStarted>)WhileSubscribedStopTimeoutMillis:(int64_t)stopTimeoutMillis replayExpirationMillis:(int64_t)replayExpirationMillis __attribute__((swift_name("WhileSubscribed(stopTimeoutMillis:replayExpirationMillis:)")));
@property (readonly) id<GNCSharingStarted> Eagerly __attribute__((swift_name("Eagerly")));
@property (readonly) id<GNCSharingStarted> Lazily __attribute__((swift_name("Lazily")));
@end

__attribute__((swift_name("FusibleFlow")))
@protocol GNCFusibleFlow <GNCFlow>
@required
- (id<GNCFlow>)fuseContext:(id<GNCKotlinCoroutineContext>)context capacity:(int32_t)capacity onBufferOverflow:(GNCBufferOverflow *)onBufferOverflow __attribute__((swift_name("fuse(context:capacity:onBufferOverflow:)")));
@end

__attribute__((swift_name("ChannelFlow")))
@interface GNCChannelFlow<T> : GNCBase <GNCFusibleFlow>
- (instancetype)initWithContext:(id<GNCKotlinCoroutineContext>)context capacity:(int32_t)capacity onBufferOverflow:(GNCBufferOverflow *)onBufferOverflow __attribute__((swift_name("init(context:capacity:onBufferOverflow:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (NSString * _Nullable)additionalToStringProps __attribute__((swift_name("additionalToStringProps()")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectCollector:(id<GNCFlowCollector>)collector completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collect(collector:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)collectToScope:(id<GNCProducerScope>)scope completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collectTo(scope:completionHandler:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (GNCChannelFlow<T> *)createContext:(id<GNCKotlinCoroutineContext>)context capacity:(int32_t)capacity onBufferOverflow:(GNCBufferOverflow *)onBufferOverflow __attribute__((swift_name("create(context:capacity:onBufferOverflow:)")));
- (id<GNCFlow> _Nullable)dropChannelOperators __attribute__((swift_name("dropChannelOperators()")));
- (id<GNCFlow>)fuseContext:(id<GNCKotlinCoroutineContext>)context capacity:(int32_t)capacity onBufferOverflow:(GNCBufferOverflow *)onBufferOverflow __attribute__((swift_name("fuse(context:capacity:onBufferOverflow:)")));
- (id<GNCReceiveChannel>)produceImplScope:(id<GNCCoroutineScope>)scope __attribute__((swift_name("produceImpl(scope:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t capacity __attribute__((swift_name("capacity")));
@property (readonly) id<GNCKotlinCoroutineContext> context __attribute__((swift_name("context")));
@property (readonly) GNCBufferOverflow *onBufferOverflow __attribute__((swift_name("onBufferOverflow")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SendingCollector")))
@interface GNCSendingCollector<T> : GNCBase <GNCFlowCollector>
- (instancetype)initWithChannel:(id<GNCSendChannel>)channel __attribute__((swift_name("init(channel:)"))) __attribute__((objc_designated_initializer));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)emitValue:(T _Nullable)value completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("emit(value:completionHandler:)")));
@end

__attribute__((swift_name("SelectBuilder")))
@protocol GNCSelectBuilder
@required

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
- (void)onTimeoutTimeMillis:(int64_t)timeMillis block:(id<GNCKotlinSuspendFunction0>)block __attribute__((swift_name("onTimeout(timeMillis:block:)"))) __attribute__((unavailable("Replaced with the same extension function")));
- (void)invoke:(id<GNCSelectClause0>)receiver block:(id<GNCKotlinSuspendFunction0>)block __attribute__((swift_name("invoke(_:block:)")));
- (void)invoke:(id<GNCSelectClause1>)receiver block_:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("invoke(_:block_:)")));
- (void)invoke:(id<GNCSelectClause2>)receiver param:(id _Nullable)param block:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("invoke(_:param:block:)")));
- (void)invoke:(id<GNCSelectClause2>)receiver block__:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("invoke(_:block__:)")));
@end

__attribute__((swift_name("SelectClause")))
@protocol GNCSelectClause
@required
@property (readonly) id clauseObject __attribute__((swift_name("clauseObject")));
@property (readonly) GNCKotlinUnit *(^(^ _Nullable onCancellationConstructor)(id<GNCSelectInstance>, id _Nullable, id _Nullable))(GNCKotlinThrowable *) __attribute__((swift_name("onCancellationConstructor")));
@property (readonly) id _Nullable (^processResFunc)(id, id _Nullable, id _Nullable) __attribute__((swift_name("processResFunc")));
@property (readonly) void (^regFunc)(id, id<GNCSelectInstance>, id _Nullable) __attribute__((swift_name("regFunc")));
@end

__attribute__((swift_name("SelectClause0")))
@protocol GNCSelectClause0 <GNCSelectClause>
@required
@end

__attribute__((swift_name("SelectClause1")))
@protocol GNCSelectClause1 <GNCSelectClause>
@required
@end

__attribute__((swift_name("SelectClause2")))
@protocol GNCSelectClause2 <GNCSelectClause>
@required
@end

__attribute__((swift_name("SelectInstance")))
@protocol GNCSelectInstance
@required
- (void)disposeOnCompletionDisposableHandle:(id<GNCDisposableHandle>)disposableHandle __attribute__((swift_name("disposeOnCompletion(disposableHandle:)")));
- (void)selectInRegistrationPhaseInternalResult:(id _Nullable)internalResult __attribute__((swift_name("selectInRegistrationPhase(internalResult:)")));
- (BOOL)trySelectClauseObject:(id)clauseObject result:(id _Nullable)result __attribute__((swift_name("trySelect(clauseObject:result:)")));
@property (readonly) id<GNCKotlinCoroutineContext> context __attribute__((swift_name("context")));
@end

__attribute__((swift_name("OpDescriptor_")))
@interface GNCOpDescriptor_ : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (id _Nullable)performAffected:(id _Nullable)affected __attribute__((swift_name("perform(affected:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) GNCAtomicOp_<id> * _Nullable atomicOp __attribute__((swift_name("atomicOp")));
@end

__attribute__((swift_name("AtomicOp_")))
@interface GNCAtomicOp_<__contravariant T> : GNCOpDescriptor_
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)completeAffected:(T _Nullable)affected failure:(id _Nullable)failure __attribute__((swift_name("complete(affected:failure:)")));
- (id _Nullable)performAffected:(id _Nullable)affected __attribute__((swift_name("perform(affected:)")));
- (id _Nullable)prepareAffected:(T _Nullable)affected __attribute__((swift_name("prepare(affected:)")));
@property (readonly) GNCAtomicOp_<id> *atomicOp __attribute__((swift_name("atomicOp")));
@end

__attribute__((swift_name("LockFreeLinkedListNode_")))
@interface GNCLockFreeLinkedListNode_ : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)addLastNode:(GNCLockFreeLinkedListNode_ *)node __attribute__((swift_name("addLast(node:)")));
- (BOOL)addLastIfNode:(GNCLockFreeLinkedListNode_ *)node condition:(GNCBoolean *(^)(void))condition __attribute__((swift_name("addLastIf(node:condition:)")));
- (BOOL)addOneIfEmptyNode:(GNCLockFreeLinkedListNode_ *)node __attribute__((swift_name("addOneIfEmpty(node:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (GNCLockFreeLinkedListNode_ * _Nullable)nextIfRemoved __attribute__((swift_name("nextIfRemoved()")));
- (BOOL)remove __attribute__((swift_name("remove()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) BOOL isRemoved __attribute__((swift_name("isRemoved")));
@property (readonly, getter=next_) id next __attribute__((swift_name("next")));
@property (readonly) GNCLockFreeLinkedListNode_ *nextNode __attribute__((swift_name("nextNode")));
@property (readonly) GNCLockFreeLinkedListNode_ *prevNode __attribute__((swift_name("prevNode")));
@end

__attribute__((swift_name("LockFreeLinkedListHead_")))
@interface GNCLockFreeLinkedListHead_ : GNCLockFreeLinkedListNode_
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)forEachBlock:(void (^)(GNCLockFreeLinkedListNode_ *))block __attribute__((swift_name("forEach(block:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (GNCLockFreeLinkedListNode_ * _Nullable)nextIfRemoved __attribute__((swift_name("nextIfRemoved()")));
- (BOOL)remove __attribute__((swift_name("remove()")));
@property (readonly) BOOL isEmpty __attribute__((swift_name("isEmpty")));
@property (readonly) BOOL isRemoved __attribute__((swift_name("isRemoved")));
@end

__attribute__((swift_name("MainDispatcherFactory")))
@protocol GNCMainDispatcherFactory
@required
- (GNCMainCoroutineDispatcher *)createDispatcherAllFactories:(NSArray<id<GNCMainDispatcherFactory>> *)allFactories __attribute__((swift_name("createDispatcher(allFactories:)")));
- (NSString * _Nullable)hintOnError __attribute__((swift_name("hintOnError()")));
@property (readonly) int32_t loadPriority __attribute__((swift_name("loadPriority")));
@end

__attribute__((swift_name("SynchronizedObject")))
@interface GNCSynchronizedObject : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)lock __attribute__((swift_name("lock()")));
- (BOOL)tryLock __attribute__((swift_name("tryLock()")));
- (void)unlock __attribute__((swift_name("unlock()")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@property (readonly, getter=lock_) GNCKotlinAtomicReference<GNCSynchronizedObjectLockState *> *lock __attribute__((swift_name("lock")));
@end

__attribute__((swift_name("ThreadSafeHeap")))
@interface GNCThreadSafeHeap<T> : GNCSynchronizedObject
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)addLastNode:(T)node __attribute__((swift_name("addLast(node:)")));
- (BOOL)addLastIfNode:(T)node cond:(GNCBoolean *(^)(T _Nullable))cond __attribute__((swift_name("addLastIf(node:cond:)")));
- (void)clear __attribute__((swift_name("clear()")));
- (T _Nullable)findPredicate:(GNCBoolean *(^)(T))predicate __attribute__((swift_name("find(predicate:)")));
- (T _Nullable)peek __attribute__((swift_name("peek()")));
- (BOOL)removeNode:(T)node __attribute__((swift_name("remove(node:)")));
- (T _Nullable)removeFirstIfPredicate:(GNCBoolean *(^)(T))predicate __attribute__((swift_name("removeFirstIf(predicate:)")));
- (T _Nullable)removeFirstOrNull __attribute__((swift_name("removeFirstOrNull()")));
@property (readonly) BOOL isEmpty __attribute__((swift_name("isEmpty")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end

__attribute__((swift_name("ThreadSafeHeapNode")))
@protocol GNCThreadSafeHeapNode
@required
@property GNCThreadSafeHeap<id> * _Nullable heap __attribute__((swift_name("heap")));
@property int32_t index __attribute__((swift_name("index")));
@end

__attribute__((swift_name("Mutex")))
@protocol GNCMutex
@required
- (BOOL)holdsLockOwner:(id)owner __attribute__((swift_name("holdsLock(owner:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)lockOwner:(id _Nullable)owner completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("lock(owner:completionHandler:)")));
- (BOOL)tryLockOwner:(id _Nullable)owner __attribute__((swift_name("tryLock(owner:)")));
- (void)unlockOwner:(id _Nullable)owner __attribute__((swift_name("unlock(owner:)")));
@property (readonly) BOOL isLocked __attribute__((swift_name("isLocked")));
@property (readonly) id<GNCSelectClause2> onLock __attribute__((swift_name("onLock"))) __attribute__((deprecated("Mutex.onLock deprecated without replacement. For additional details please refer to #2794")));
@end

__attribute__((swift_name("Semaphore")))
@protocol GNCSemaphore
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)acquireWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("acquire(completionHandler:)")));
- (void)release_ __attribute__((swift_name("release()")));
- (BOOL)tryAcquire __attribute__((swift_name("tryAcquire()")));
@property (readonly) int32_t availablePermits __attribute__((swift_name("availablePermits")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DecodeSequenceMode")))
@interface GNCDecodeSequenceMode : GNCKotlinEnum<GNCDecodeSequenceMode *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCDecodeSequenceMode *whitespaceSeparated __attribute__((swift_name("whitespaceSeparated")));
@property (class, readonly) GNCDecodeSequenceMode *arrayWrapped __attribute__((swift_name("arrayWrapped")));
@property (class, readonly) GNCDecodeSequenceMode *autoDetect __attribute__((swift_name("autoDetect")));
+ (GNCKotlinArray<GNCDecodeSequenceMode *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((swift_name("SerialFormat")))
@protocol GNCSerialFormat
@required
@property (readonly) GNCSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end

__attribute__((swift_name("StringFormat")))
@protocol GNCStringFormat <GNCSerialFormat>
@required
- (id _Nullable)decodeFromStringDeserializer:(id<GNCDeserializationStrategy>)deserializer string:(NSString *)string __attribute__((swift_name("decodeFromString(deserializer:string:)")));
- (NSString *)encodeToStringSerializer:(id<GNCSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeToString(serializer:value:)")));
@end

__attribute__((swift_name("Json")))
@interface GNCJson : GNCBase <GNCStringFormat>
@property (class, readonly, getter=companion) GNCJsonDefault *companion __attribute__((swift_name("companion")));
- (id _Nullable)decodeFromJsonElementDeserializer:(id<GNCDeserializationStrategy>)deserializer element:(GNCJsonElement *)element __attribute__((swift_name("decodeFromJsonElement(deserializer:element:)")));
- (id _Nullable)decodeFromStringDeserializer:(id<GNCDeserializationStrategy>)deserializer string:(NSString *)string __attribute__((swift_name("decodeFromString(deserializer:string:)")));
- (GNCJsonElement *)encodeToJsonElementSerializer:(id<GNCSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeToJsonElement(serializer:value:)")));
- (NSString *)encodeToStringSerializer:(id<GNCSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeToString(serializer:value:)")));
- (GNCJsonElement *)parseToJsonElementString:(NSString *)string __attribute__((swift_name("parseToJsonElement(string:)")));
@property (readonly) GNCJsonConfiguration *configuration __attribute__((swift_name("configuration")));
@property (readonly) GNCSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Json.Default")))
@interface GNCJsonDefault : GNCJson
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)default_ __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCJsonDefault *shared __attribute__((swift_name("shared")));
@end

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("JsonArray")))
@interface GNCJsonArray : NSObject
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonArrayBuilder")))
@interface GNCJsonArrayBuilder : GNCBase
- (BOOL)addElement:(GNCJsonElement *)element __attribute__((swift_name("add(element:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonBuilder")))
@interface GNCJsonBuilder : GNCBase
@property BOOL allowSpecialFloatingPointValues __attribute__((swift_name("allowSpecialFloatingPointValues")));
@property BOOL allowStructuredMapKeys __attribute__((swift_name("allowStructuredMapKeys")));
@property NSString *classDiscriminator __attribute__((swift_name("classDiscriminator")));
@property BOOL coerceInputValues __attribute__((swift_name("coerceInputValues")));
@property BOOL encodeDefaults __attribute__((swift_name("encodeDefaults")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
@property BOOL explicitNulls __attribute__((swift_name("explicitNulls")));
@property BOOL ignoreUnknownKeys __attribute__((swift_name("ignoreUnknownKeys")));
@property BOOL isLenient __attribute__((swift_name("isLenient")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
@property id<GNCJsonNamingStrategy> _Nullable namingStrategy __attribute__((swift_name("namingStrategy")));
@property BOOL prettyPrint __attribute__((swift_name("prettyPrint")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
@property NSString *prettyPrintIndent __attribute__((swift_name("prettyPrintIndent")));
@property GNCSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@property BOOL useAlternativeNames __attribute__((swift_name("useAlternativeNames")));
@property BOOL useArrayPolymorphism __attribute__((swift_name("useArrayPolymorphism")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonConfiguration")))
@interface GNCJsonConfiguration : GNCBase
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) BOOL allowSpecialFloatingPointValues __attribute__((swift_name("allowSpecialFloatingPointValues")));
@property (readonly) BOOL allowStructuredMapKeys __attribute__((swift_name("allowStructuredMapKeys")));
@property (readonly) NSString *classDiscriminator __attribute__((swift_name("classDiscriminator")));
@property (readonly) BOOL coerceInputValues __attribute__((swift_name("coerceInputValues")));
@property (readonly) BOOL encodeDefaults __attribute__((swift_name("encodeDefaults")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
@property (readonly) BOOL explicitNulls __attribute__((swift_name("explicitNulls")));
@property (readonly) BOOL ignoreUnknownKeys __attribute__((swift_name("ignoreUnknownKeys")));
@property (readonly) BOOL isLenient __attribute__((swift_name("isLenient")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
@property (readonly) id<GNCJsonNamingStrategy> _Nullable namingStrategy __attribute__((swift_name("namingStrategy")));
@property (readonly) BOOL prettyPrint __attribute__((swift_name("prettyPrint")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
@property (readonly) NSString *prettyPrintIndent __attribute__((swift_name("prettyPrintIndent")));
@property (readonly) BOOL useAlternativeNames __attribute__((swift_name("useAlternativeNames")));
@property (readonly) BOOL useArrayPolymorphism __attribute__((swift_name("useArrayPolymorphism")));
@end

__attribute__((swift_name("JsonContentPolymorphicSerializer")))
@interface GNCJsonContentPolymorphicSerializer<T> : GNCBase <GNCKSerializer>
- (instancetype)initWithBaseClass:(id<GNCKotlinKClass>)baseClass __attribute__((swift_name("init(baseClass:)"))) __attribute__((objc_designated_initializer));
- (T)deserializeDecoder:(id<GNCDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (id<GNCDeserializationStrategy>)selectDeserializerElement:(GNCJsonElement *)element __attribute__((swift_name("selectDeserializer(element:)")));
- (void)serializeEncoder:(id<GNCEncoder>)encoder value:(T)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<GNCSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end

__attribute__((swift_name("Decoder")))
@protocol GNCDecoder
@required
- (id<GNCCompositeDecoder>)beginStructureDescriptor:(id<GNCSerialDescriptor>)descriptor __attribute__((swift_name("beginStructure(descriptor:)")));
- (BOOL)decodeBoolean __attribute__((swift_name("decodeBoolean()")));
- (int8_t)decodeByte __attribute__((swift_name("decodeByte()")));
- (unichar)decodeChar __attribute__((swift_name("decodeChar()")));
- (double)decodeDouble __attribute__((swift_name("decodeDouble()")));
- (int32_t)decodeEnumEnumDescriptor:(id<GNCSerialDescriptor>)enumDescriptor __attribute__((swift_name("decodeEnum(enumDescriptor:)")));
- (float)decodeFloat __attribute__((swift_name("decodeFloat()")));
- (id<GNCDecoder>)decodeInlineDescriptor:(id<GNCSerialDescriptor>)descriptor __attribute__((swift_name("decodeInline(descriptor:)")));
- (int32_t)decodeInt __attribute__((swift_name("decodeInt()")));
- (int64_t)decodeLong __attribute__((swift_name("decodeLong()")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (BOOL)decodeNotNullMark __attribute__((swift_name("decodeNotNullMark()")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (GNCKotlinNothing * _Nullable)decodeNull __attribute__((swift_name("decodeNull()")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (id _Nullable)decodeNullableSerializableValueDeserializer:(id<GNCDeserializationStrategy>)deserializer __attribute__((swift_name("decodeNullableSerializableValue(deserializer:)")));
- (id _Nullable)decodeSerializableValueDeserializer:(id<GNCDeserializationStrategy>)deserializer __attribute__((swift_name("decodeSerializableValue(deserializer:)")));
- (int16_t)decodeShort __attribute__((swift_name("decodeShort()")));
- (NSString *)decodeString __attribute__((swift_name("decodeString()")));
@property (readonly) GNCSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end

__attribute__((swift_name("CompositeDecoder")))
@protocol GNCCompositeDecoder
@required
- (BOOL)decodeBooleanElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeBooleanElement(descriptor:index:)")));
- (int8_t)decodeByteElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeByteElement(descriptor:index:)")));
- (unichar)decodeCharElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeCharElement(descriptor:index:)")));
- (int32_t)decodeCollectionSizeDescriptor:(id<GNCSerialDescriptor>)descriptor __attribute__((swift_name("decodeCollectionSize(descriptor:)")));
- (double)decodeDoubleElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeDoubleElement(descriptor:index:)")));
- (int32_t)decodeElementIndexDescriptor:(id<GNCSerialDescriptor>)descriptor __attribute__((swift_name("decodeElementIndex(descriptor:)")));
- (float)decodeFloatElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeFloatElement(descriptor:index:)")));
- (id<GNCDecoder>)decodeInlineElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeInlineElement(descriptor:index:)")));
- (int32_t)decodeIntElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeIntElement(descriptor:index:)")));
- (int64_t)decodeLongElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeLongElement(descriptor:index:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (id _Nullable)decodeNullableSerializableElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index deserializer:(id<GNCDeserializationStrategy>)deserializer previousValue:(id _Nullable)previousValue __attribute__((swift_name("decodeNullableSerializableElement(descriptor:index:deserializer:previousValue:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (BOOL)decodeSequentially __attribute__((swift_name("decodeSequentially()")));
- (id _Nullable)decodeSerializableElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index deserializer:(id<GNCDeserializationStrategy>)deserializer previousValue:(id _Nullable)previousValue __attribute__((swift_name("decodeSerializableElement(descriptor:index:deserializer:previousValue:)")));
- (int16_t)decodeShortElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeShortElement(descriptor:index:)")));
- (NSString *)decodeStringElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeStringElement(descriptor:index:)")));
- (void)endStructureDescriptor:(id<GNCSerialDescriptor>)descriptor __attribute__((swift_name("endStructure(descriptor:)")));
@property (readonly) GNCSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end

__attribute__((swift_name("JsonDecoder")))
@protocol GNCJsonDecoder <GNCDecoder, GNCCompositeDecoder>
@required
- (GNCJsonElement *)decodeJsonElement __attribute__((swift_name("decodeJsonElement()")));
@property (readonly) GNCJson *json __attribute__((swift_name("json")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable(with=NormalClass(value=kotlinx/serialization/json/JsonElementSerializer))
*/
__attribute__((swift_name("JsonElement")))
@interface GNCJsonElement : GNCBase
@property (class, readonly, getter=companion) GNCJsonElementCompanion *companion __attribute__((swift_name("companion")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonElement.Companion")))
@interface GNCJsonElementCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCJsonElementCompanion *shared __attribute__((swift_name("shared")));
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end

__attribute__((swift_name("Encoder")))
@protocol GNCEncoder
@required
- (id<GNCCompositeEncoder>)beginCollectionDescriptor:(id<GNCSerialDescriptor>)descriptor collectionSize:(int32_t)collectionSize __attribute__((swift_name("beginCollection(descriptor:collectionSize:)")));
- (id<GNCCompositeEncoder>)beginStructureDescriptor:(id<GNCSerialDescriptor>)descriptor __attribute__((swift_name("beginStructure(descriptor:)")));
- (void)encodeBooleanValue:(BOOL)value __attribute__((swift_name("encodeBoolean(value:)")));
- (void)encodeByteValue:(int8_t)value __attribute__((swift_name("encodeByte(value:)")));
- (void)encodeCharValue:(unichar)value __attribute__((swift_name("encodeChar(value:)")));
- (void)encodeDoubleValue:(double)value __attribute__((swift_name("encodeDouble(value:)")));
- (void)encodeEnumEnumDescriptor:(id<GNCSerialDescriptor>)enumDescriptor index:(int32_t)index __attribute__((swift_name("encodeEnum(enumDescriptor:index:)")));
- (void)encodeFloatValue:(float)value __attribute__((swift_name("encodeFloat(value:)")));
- (id<GNCEncoder>)encodeInlineDescriptor:(id<GNCSerialDescriptor>)descriptor __attribute__((swift_name("encodeInline(descriptor:)")));
- (void)encodeIntValue:(int32_t)value __attribute__((swift_name("encodeInt(value:)")));
- (void)encodeLongValue:(int64_t)value __attribute__((swift_name("encodeLong(value:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (void)encodeNotNullMark __attribute__((swift_name("encodeNotNullMark()")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (void)encodeNull __attribute__((swift_name("encodeNull()")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (void)encodeNullableSerializableValueSerializer:(id<GNCSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeNullableSerializableValue(serializer:value:)")));
- (void)encodeSerializableValueSerializer:(id<GNCSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeSerializableValue(serializer:value:)")));
- (void)encodeShortValue:(int16_t)value __attribute__((swift_name("encodeShort(value:)")));
- (void)encodeStringValue:(NSString *)value __attribute__((swift_name("encodeString(value:)")));
@property (readonly) GNCSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end

__attribute__((swift_name("CompositeEncoder")))
@protocol GNCCompositeEncoder
@required
- (void)encodeBooleanElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(BOOL)value __attribute__((swift_name("encodeBooleanElement(descriptor:index:value:)")));
- (void)encodeByteElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(int8_t)value __attribute__((swift_name("encodeByteElement(descriptor:index:value:)")));
- (void)encodeCharElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(unichar)value __attribute__((swift_name("encodeCharElement(descriptor:index:value:)")));
- (void)encodeDoubleElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(double)value __attribute__((swift_name("encodeDoubleElement(descriptor:index:value:)")));
- (void)encodeFloatElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(float)value __attribute__((swift_name("encodeFloatElement(descriptor:index:value:)")));
- (id<GNCEncoder>)encodeInlineElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("encodeInlineElement(descriptor:index:)")));
- (void)encodeIntElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(int32_t)value __attribute__((swift_name("encodeIntElement(descriptor:index:value:)")));
- (void)encodeLongElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(int64_t)value __attribute__((swift_name("encodeLongElement(descriptor:index:value:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (void)encodeNullableSerializableElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index serializer:(id<GNCSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeNullableSerializableElement(descriptor:index:serializer:value:)")));
- (void)encodeSerializableElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index serializer:(id<GNCSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeSerializableElement(descriptor:index:serializer:value:)")));
- (void)encodeShortElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(int16_t)value __attribute__((swift_name("encodeShortElement(descriptor:index:value:)")));
- (void)encodeStringElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(NSString *)value __attribute__((swift_name("encodeStringElement(descriptor:index:value:)")));
- (void)endStructureDescriptor:(id<GNCSerialDescriptor>)descriptor __attribute__((swift_name("endStructure(descriptor:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (BOOL)shouldEncodeElementDefaultDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("shouldEncodeElementDefault(descriptor:index:)")));
@property (readonly) GNCSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end

__attribute__((swift_name("JsonEncoder")))
@protocol GNCJsonEncoder <GNCEncoder, GNCCompositeEncoder>
@required
- (void)encodeJsonElementElement:(GNCJsonElement *)element __attribute__((swift_name("encodeJsonElement(element:)")));
@property (readonly) GNCJson *json __attribute__((swift_name("json")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
__attribute__((swift_name("JsonNamingStrategy")))
@protocol GNCJsonNamingStrategy
@required
- (NSString *)serialNameForJsonDescriptor:(id<GNCSerialDescriptor>)descriptor elementIndex:(int32_t)elementIndex serialName:(NSString *)serialName __attribute__((swift_name("serialNameForJson(descriptor:elementIndex:serialName:)")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonNamingStrategyBuiltins")))
@interface GNCJsonNamingStrategyBuiltins : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)builtins __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCJsonNamingStrategyBuiltins *shared __attribute__((swift_name("shared")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
@property (readonly) id<GNCJsonNamingStrategy> SnakeCase __attribute__((swift_name("SnakeCase")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable(with=NormalClass(value=kotlinx/serialization/json/JsonPrimitiveSerializer))
*/
__attribute__((swift_name("JsonPrimitive")))
@interface GNCJsonPrimitive : GNCJsonElement
@property (class, readonly, getter=companion) GNCJsonPrimitiveCompanion *companion __attribute__((swift_name("companion")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *content __attribute__((swift_name("content")));
@property (readonly) BOOL isString __attribute__((swift_name("isString")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.Serializable(with=NormalClass(value=kotlinx/serialization/json/JsonNullSerializer))
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonNull")))
@interface GNCJsonNull : GNCJsonPrimitive
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)jsonNull __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCJsonNull *shared __attribute__((swift_name("shared")));
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
- (id<GNCKSerializer>)serializerTypeParamsSerializers:(GNCKotlinArray<id<GNCKSerializer>> *)typeParamsSerializers __attribute__((swift_name("serializer(typeParamsSerializers:)")));
@property (readonly) NSString *content __attribute__((swift_name("content")));
@property (readonly) BOOL isString __attribute__((swift_name("isString")));
@end

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("JsonObject")))
@interface GNCJsonObject : NSObject
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonObjectBuilder")))
@interface GNCJsonObjectBuilder : GNCBase
- (GNCJsonElement * _Nullable)putKey:(NSString *)key element:(GNCJsonElement *)element __attribute__((swift_name("put(key:element:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonPrimitive.Companion")))
@interface GNCJsonPrimitiveCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCJsonPrimitiveCompanion *shared __attribute__((swift_name("shared")));
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end

__attribute__((swift_name("JsonTransformingSerializer")))
@interface GNCJsonTransformingSerializer<T> : GNCBase <GNCKSerializer>
- (instancetype)initWithTSerializer:(id<GNCKSerializer>)tSerializer __attribute__((swift_name("init(tSerializer:)"))) __attribute__((objc_designated_initializer));
- (T)deserializeDecoder:(id<GNCDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<GNCEncoder>)encoder value:(T)value __attribute__((swift_name("serialize(encoder:value:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (GNCJsonElement *)transformDeserializeElement:(GNCJsonElement *)element __attribute__((swift_name("transformDeserialize(element:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (GNCJsonElement *)transformSerializeElement:(GNCJsonElement *)element __attribute__((swift_name("transformSerialize(element:)")));
@property (readonly) id<GNCSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AtomicArray")))
@interface GNCAtomicArray<T> : GNCBase
- (id)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AtomicBooleanArray")))
@interface GNCAtomicBooleanArray : GNCBase
- (instancetype)initWithSize:(int32_t)size __attribute__((swift_name("init(size:)"))) __attribute__((objc_designated_initializer));
- (id)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AtomicIntArray")))
@interface GNCAtomicIntArray : GNCBase
- (instancetype)initWithSize:(int32_t)size __attribute__((swift_name("init(size:)"))) __attribute__((objc_designated_initializer));
- (id)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AtomicLongArray")))
@interface GNCAtomicLongArray : GNCBase
- (instancetype)initWithSize:(int32_t)size __attribute__((swift_name("init(size:)"))) __attribute__((objc_designated_initializer));
- (id)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end

__attribute__((swift_name("TraceBase")))
@interface GNCTraceBase : GNCBase
- (void)appendEvent:(id)event __attribute__((swift_name("append(event:)")));
- (void)appendEvent1:(id)event1 event2:(id)event2 __attribute__((swift_name("append(event1:event2:)")));
- (void)appendEvent1:(id)event1 event2:(id)event2 event3:(id)event3 __attribute__((swift_name("append(event1:event2:event3:)")));
- (void)appendEvent1:(id)event1 event2:(id)event2 event3:(id)event3 event4:(id)event4 __attribute__((swift_name("append(event1:event2:event3:event4:)")));
- (void)invokeEvent:(id (^)(void))event __attribute__((swift_name("invoke(event:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TraceBase.None")))
@interface GNCTraceBaseNone : GNCTraceBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)none __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCTraceBaseNone *shared __attribute__((swift_name("shared")));
@end

__attribute__((swift_name("TraceFormat")))
@interface GNCTraceFormat : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString *)formatIndex:(int32_t)index event:(id)event __attribute__((swift_name("format(index:event:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MutexPool")))
@interface GNCMutexPool : GNCBase
- (instancetype)initWithCapacity:(int32_t)capacity __attribute__((swift_name("init(capacity:)"))) __attribute__((objc_designated_initializer));
- (void *)allocate __attribute__((swift_name("allocate()")));
- (void)releaseMutexNode:(void *)mutexNode __attribute__((swift_name("release(mutexNode:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SynchronizedObject.LockState")))
@interface GNCSynchronizedObjectLockState : GNCBase
- (instancetype)initWithStatus:(GNCSynchronizedObjectStatus *)status nestedLocks:(int32_t)nestedLocks waiters:(int32_t)waiters ownerThreadId:(void * _Nullable)ownerThreadId mutex:(void * _Nullable)mutex __attribute__((swift_name("init(status:nestedLocks:waiters:ownerThreadId:mutex:)"))) __attribute__((objc_designated_initializer));
@property (readonly) void * _Nullable mutex __attribute__((swift_name("mutex")));
@property (readonly) int32_t nestedLocks __attribute__((swift_name("nestedLocks")));
@property (readonly) void * _Nullable ownerThreadId __attribute__((swift_name("ownerThreadId")));
@property (readonly) GNCSynchronizedObjectStatus *status __attribute__((swift_name("status")));
@property (readonly) int32_t waiters __attribute__((swift_name("waiters")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SynchronizedObject.Status")))
@interface GNCSynchronizedObjectStatus : GNCKotlinEnum<GNCSynchronizedObjectStatus *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCSynchronizedObjectStatus *unlocked __attribute__((swift_name("unlocked")));
@property (class, readonly) GNCSynchronizedObjectStatus *thin __attribute__((swift_name("thin")));
@property (class, readonly) GNCSynchronizedObjectStatus *fat __attribute__((swift_name("fat")));
+ (GNCKotlinArray<GNCSynchronizedObjectStatus *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((swift_name("BinaryFormat")))
@protocol GNCBinaryFormat <GNCSerialFormat>
@required
- (id _Nullable)decodeFromByteArrayDeserializer:(id<GNCDeserializationStrategy>)deserializer bytes:(GNCKotlinByteArray *)bytes __attribute__((swift_name("decodeFromByteArray(deserializer:bytes:)")));
- (GNCKotlinByteArray *)encodeToByteArraySerializer:(id<GNCSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeToByteArray(serializer:value:)")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContextualSerializer")))
@interface GNCContextualSerializer<T> : GNCBase <GNCKSerializer>
- (instancetype)initWithSerializableClass:(id<GNCKotlinKClass>)serializableClass __attribute__((swift_name("init(serializableClass:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithSerializableClass:(id<GNCKotlinKClass>)serializableClass fallbackSerializer:(id<GNCKSerializer> _Nullable)fallbackSerializer typeArgumentsSerializers:(GNCKotlinArray<id<GNCKSerializer>> *)typeArgumentsSerializers __attribute__((swift_name("init(serializableClass:fallbackSerializer:typeArgumentsSerializers:)"))) __attribute__((objc_designated_initializer));
- (T)deserializeDecoder:(id<GNCDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<GNCEncoder>)encoder value:(T)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<GNCSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end

__attribute__((swift_name("SerializationException")))
@interface GNCSerializationException : GNCKotlinIllegalArgumentException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
@end


/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MissingFieldException")))
@interface GNCMissingFieldException : GNCSerializationException
- (instancetype)initWithMissingFields:(NSArray<NSString *> *)missingFields serialName:(NSString *)serialName __attribute__((swift_name("init(missingFields:serialName:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMissingField:(NSString *)missingField serialName:(NSString *)serialName __attribute__((swift_name("init(missingField:serialName:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMissingFields:(NSArray<NSString *> *)missingFields message:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(missingFields:message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) NSArray<NSString *> *missingFields __attribute__((swift_name("missingFields")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.InternalSerializationApi
*/
__attribute__((swift_name("AbstractPolymorphicSerializer")))
@interface GNCAbstractPolymorphicSerializer<T> : GNCBase <GNCKSerializer>
- (T)deserializeDecoder:(id<GNCDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));

/**
 * @note annotations
 *   kotlinx.serialization.InternalSerializationApi
*/
- (id<GNCDeserializationStrategy> _Nullable)findPolymorphicSerializerOrNullDecoder:(id<GNCCompositeDecoder>)decoder klassName:(NSString * _Nullable)klassName __attribute__((swift_name("findPolymorphicSerializerOrNull(decoder:klassName:)")));

/**
 * @note annotations
 *   kotlinx.serialization.InternalSerializationApi
*/
- (id<GNCSerializationStrategy> _Nullable)findPolymorphicSerializerOrNullEncoder:(id<GNCEncoder>)encoder value:(T)value __attribute__((swift_name("findPolymorphicSerializerOrNull(encoder:value:)")));
- (void)serializeEncoder:(id<GNCEncoder>)encoder value:(T)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<GNCKotlinKClass> baseClass __attribute__((swift_name("baseClass")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PolymorphicSerializer")))
@interface GNCPolymorphicSerializer<T> : GNCAbstractPolymorphicSerializer<T>
- (instancetype)initWithBaseClass:(id<GNCKotlinKClass>)baseClass __attribute__((swift_name("init(baseClass:)"))) __attribute__((objc_designated_initializer));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<GNCKotlinKClass> baseClass __attribute__((swift_name("baseClass")));
@property (readonly) id<GNCSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.InternalSerializationApi
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SealedClassSerializer")))
@interface GNCSealedClassSerializer<T> : GNCAbstractPolymorphicSerializer<T>
- (instancetype)initWithSerialName:(NSString *)serialName baseClass:(id<GNCKotlinKClass>)baseClass subclasses:(GNCKotlinArray<id<GNCKotlinKClass>> *)subclasses subclassSerializers:(GNCKotlinArray<id<GNCKSerializer>> *)subclassSerializers __attribute__((swift_name("init(serialName:baseClass:subclasses:subclassSerializers:)"))) __attribute__((objc_designated_initializer));
- (id<GNCDeserializationStrategy> _Nullable)findPolymorphicSerializerOrNullDecoder:(id<GNCCompositeDecoder>)decoder klassName:(NSString * _Nullable)klassName __attribute__((swift_name("findPolymorphicSerializerOrNull(decoder:klassName:)")));
- (id<GNCSerializationStrategy> _Nullable)findPolymorphicSerializerOrNullEncoder:(id<GNCEncoder>)encoder value:(T)value __attribute__((swift_name("findPolymorphicSerializerOrNull(encoder:value:)")));
@property (readonly) id<GNCKotlinKClass> baseClass __attribute__((swift_name("baseClass")));
@property (readonly) id<GNCSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.InternalSerializationApi
*/
__attribute__((swift_name("AbstractCollectionSerializer")))
@interface GNCAbstractCollectionSerializer<Element, Collection, Builder> : GNCBase <GNCKSerializer>

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (Builder _Nullable)builder __attribute__((swift_name("builder()")));
- (Collection _Nullable)deserializeDecoder:(id<GNCDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));

/**
 * @note annotations
 *   kotlinx.serialization.InternalSerializationApi
*/
- (Collection _Nullable)mergeDecoder:(id<GNCDecoder>)decoder previous:(Collection _Nullable)previous __attribute__((swift_name("merge(decoder:previous:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)readAllDecoder:(id<GNCCompositeDecoder>)decoder builder:(Builder _Nullable)builder startIndex:(int32_t)startIndex size:(int32_t)size __attribute__((swift_name("readAll(decoder:builder:startIndex:size:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)readElementDecoder:(id<GNCCompositeDecoder>)decoder index:(int32_t)index builder:(Builder _Nullable)builder checkIndex:(BOOL)checkIndex __attribute__((swift_name("readElement(decoder:index:builder:checkIndex:)")));
- (void)serializeEncoder:(id<GNCEncoder>)encoder value:(Collection _Nullable)value __attribute__((swift_name("serialize(encoder:value:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (int32_t)builderSize:(Builder _Nullable)receiver __attribute__((swift_name("builderSize(_:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)checkCapacity:(Builder _Nullable)receiver size:(int32_t)size __attribute__((swift_name("checkCapacity(_:size:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (id<GNCKotlinIterator>)collectionIterator:(Collection _Nullable)receiver __attribute__((swift_name("collectionIterator(_:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (int32_t)collectionSize:(Collection _Nullable)receiver __attribute__((swift_name("collectionSize(_:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (Builder _Nullable)toBuilder:(Collection _Nullable)receiver __attribute__((swift_name("toBuilder(_:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (Collection _Nullable)toResult:(Builder _Nullable)receiver __attribute__((swift_name("toResult(_:)")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.InternalSerializationApi
*/
__attribute__((swift_name("GeneratedSerializer")))
@protocol GNCGeneratedSerializer <GNCKSerializer>
@required
- (GNCKotlinArray<id<GNCKSerializer>> *)childSerializers __attribute__((swift_name("childSerializers()")));
- (GNCKotlinArray<id<GNCKSerializer>> *)typeParametersSerializers __attribute__((swift_name("typeParametersSerializers()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.InternalSerializationApi
*/
__attribute__((swift_name("MapLikeSerializer")))
@interface GNCMapLikeSerializer<Key, Value, Collection, Builder> : GNCAbstractCollectionSerializer<id<GNCKotlinMapEntry>, Collection, GNCMutableDictionary<id, id> *>

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)readAllDecoder:(id<GNCCompositeDecoder>)decoder builder:(GNCMutableDictionary<id, id> *)builder startIndex:(int32_t)startIndex size:(int32_t)size __attribute__((swift_name("readAll(decoder:builder:startIndex:size:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)readElementDecoder:(id<GNCCompositeDecoder>)decoder index:(int32_t)index builder:(GNCMutableDictionary<id, id> *)builder checkIndex:(BOOL)checkIndex __attribute__((swift_name("readElement(decoder:index:builder:checkIndex:)")));
- (void)serializeEncoder:(id<GNCEncoder>)encoder value:(Collection _Nullable)value __attribute__((swift_name("serialize(encoder:value:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)insertKeyValuePair:(GNCMutableDictionary<id, id> *)receiver index:(int32_t)index key:(Key _Nullable)key value:(Value _Nullable)value __attribute__((swift_name("insertKeyValuePair(_:index:key:value:)")));
@property (readonly) id<GNCSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@property (readonly) id<GNCKSerializer> keySerializer __attribute__((swift_name("keySerializer")));
@property (readonly) id<GNCKSerializer> valueSerializer __attribute__((swift_name("valueSerializer")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.InternalSerializationApi
*/
__attribute__((swift_name("TaggedDecoder")))
@interface GNCTaggedDecoder<Tag> : GNCBase <GNCDecoder, GNCCompositeDecoder>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (id<GNCCompositeDecoder>)beginStructureDescriptor:(id<GNCSerialDescriptor>)descriptor __attribute__((swift_name("beginStructure(descriptor:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)doCopyTagsToOther:(GNCTaggedDecoder<Tag> *)other __attribute__((swift_name("doCopyTagsTo(other:)")));
- (BOOL)decodeBoolean __attribute__((swift_name("decodeBoolean()")));
- (BOOL)decodeBooleanElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeBooleanElement(descriptor:index:)")));
- (int8_t)decodeByte __attribute__((swift_name("decodeByte()")));
- (int8_t)decodeByteElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeByteElement(descriptor:index:)")));
- (unichar)decodeChar __attribute__((swift_name("decodeChar()")));
- (unichar)decodeCharElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeCharElement(descriptor:index:)")));
- (double)decodeDouble __attribute__((swift_name("decodeDouble()")));
- (double)decodeDoubleElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeDoubleElement(descriptor:index:)")));
- (int32_t)decodeEnumEnumDescriptor:(id<GNCSerialDescriptor>)enumDescriptor __attribute__((swift_name("decodeEnum(enumDescriptor:)")));
- (float)decodeFloat __attribute__((swift_name("decodeFloat()")));
- (float)decodeFloatElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeFloatElement(descriptor:index:)")));
- (id<GNCDecoder>)decodeInlineDescriptor:(id<GNCSerialDescriptor>)descriptor __attribute__((swift_name("decodeInline(descriptor:)")));
- (id<GNCDecoder>)decodeInlineElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeInlineElement(descriptor:index:)")));
- (int32_t)decodeInt __attribute__((swift_name("decodeInt()")));
- (int32_t)decodeIntElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeIntElement(descriptor:index:)")));
- (int64_t)decodeLong __attribute__((swift_name("decodeLong()")));
- (int64_t)decodeLongElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeLongElement(descriptor:index:)")));
- (BOOL)decodeNotNullMark __attribute__((swift_name("decodeNotNullMark()")));
- (GNCKotlinNothing * _Nullable)decodeNull __attribute__((swift_name("decodeNull()")));
- (id _Nullable)decodeNullableSerializableElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index deserializer:(id<GNCDeserializationStrategy>)deserializer previousValue:(id _Nullable)previousValue __attribute__((swift_name("decodeNullableSerializableElement(descriptor:index:deserializer:previousValue:)")));
- (id _Nullable)decodeSerializableElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index deserializer:(id<GNCDeserializationStrategy>)deserializer previousValue:(id _Nullable)previousValue __attribute__((swift_name("decodeSerializableElement(descriptor:index:deserializer:previousValue:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (id _Nullable)decodeSerializableValueDeserializer:(id<GNCDeserializationStrategy>)deserializer previousValue:(id _Nullable)previousValue __attribute__((swift_name("decodeSerializableValue(deserializer:previousValue:)")));
- (int16_t)decodeShort __attribute__((swift_name("decodeShort()")));
- (int16_t)decodeShortElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeShortElement(descriptor:index:)")));
- (NSString *)decodeString __attribute__((swift_name("decodeString()")));
- (NSString *)decodeStringElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeStringElement(descriptor:index:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (BOOL)decodeTaggedBooleanTag:(Tag _Nullable)tag __attribute__((swift_name("decodeTaggedBoolean(tag:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (int8_t)decodeTaggedByteTag:(Tag _Nullable)tag __attribute__((swift_name("decodeTaggedByte(tag:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (unichar)decodeTaggedCharTag:(Tag _Nullable)tag __attribute__((swift_name("decodeTaggedChar(tag:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (double)decodeTaggedDoubleTag:(Tag _Nullable)tag __attribute__((swift_name("decodeTaggedDouble(tag:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (int32_t)decodeTaggedEnumTag:(Tag _Nullable)tag enumDescriptor:(id<GNCSerialDescriptor>)enumDescriptor __attribute__((swift_name("decodeTaggedEnum(tag:enumDescriptor:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (float)decodeTaggedFloatTag:(Tag _Nullable)tag __attribute__((swift_name("decodeTaggedFloat(tag:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (id<GNCDecoder>)decodeTaggedInlineTag:(Tag _Nullable)tag inlineDescriptor:(id<GNCSerialDescriptor>)inlineDescriptor __attribute__((swift_name("decodeTaggedInline(tag:inlineDescriptor:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (int32_t)decodeTaggedIntTag:(Tag _Nullable)tag __attribute__((swift_name("decodeTaggedInt(tag:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (int64_t)decodeTaggedLongTag:(Tag _Nullable)tag __attribute__((swift_name("decodeTaggedLong(tag:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (BOOL)decodeTaggedNotNullMarkTag:(Tag _Nullable)tag __attribute__((swift_name("decodeTaggedNotNullMark(tag:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (GNCKotlinNothing * _Nullable)decodeTaggedNullTag:(Tag _Nullable)tag __attribute__((swift_name("decodeTaggedNull(tag:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (int16_t)decodeTaggedShortTag:(Tag _Nullable)tag __attribute__((swift_name("decodeTaggedShort(tag:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (NSString *)decodeTaggedStringTag:(Tag _Nullable)tag __attribute__((swift_name("decodeTaggedString(tag:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (id)decodeTaggedValueTag:(Tag _Nullable)tag __attribute__((swift_name("decodeTaggedValue(tag:)")));
- (void)endStructureDescriptor:(id<GNCSerialDescriptor>)descriptor __attribute__((swift_name("endStructure(descriptor:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (Tag _Nullable)popTag __attribute__((swift_name("popTag()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)pushTagName:(Tag _Nullable)name __attribute__((swift_name("pushTag(name:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (Tag _Nullable)getTag:(id<GNCSerialDescriptor>)receiver index:(int32_t)index __attribute__((swift_name("getTag(_:index:)")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@property (readonly) Tag _Nullable currentTag __attribute__((swift_name("currentTag")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@property (readonly) Tag _Nullable currentTagOrNull __attribute__((swift_name("currentTagOrNull")));
@property (readonly) GNCSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.InternalSerializationApi
*/
__attribute__((swift_name("NamedValueDecoder")))
@interface GNCNamedValueDecoder : GNCTaggedDecoder<NSString *>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (NSString *)composeNameParentName:(NSString *)parentName childName:(NSString *)childName __attribute__((swift_name("composeName(parentName:childName:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (NSString *)elementNameDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("elementName(descriptor:index:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (NSString *)nestedNestedName:(NSString *)nestedName __attribute__((swift_name("nested(nestedName:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (NSString *)getTag:(id<GNCSerialDescriptor>)receiver index:(int32_t)index __attribute__((swift_name("getTag(_:index:)")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.InternalSerializationApi
*/
__attribute__((swift_name("TaggedEncoder")))
@interface GNCTaggedEncoder<Tag> : GNCBase <GNCEncoder, GNCCompositeEncoder>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (id<GNCCompositeEncoder>)beginStructureDescriptor:(id<GNCSerialDescriptor>)descriptor __attribute__((swift_name("beginStructure(descriptor:)")));
- (void)encodeBooleanValue:(BOOL)value __attribute__((swift_name("encodeBoolean(value:)")));
- (void)encodeBooleanElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(BOOL)value __attribute__((swift_name("encodeBooleanElement(descriptor:index:value:)")));
- (void)encodeByteValue:(int8_t)value __attribute__((swift_name("encodeByte(value:)")));
- (void)encodeByteElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(int8_t)value __attribute__((swift_name("encodeByteElement(descriptor:index:value:)")));
- (void)encodeCharValue:(unichar)value __attribute__((swift_name("encodeChar(value:)")));
- (void)encodeCharElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(unichar)value __attribute__((swift_name("encodeCharElement(descriptor:index:value:)")));
- (void)encodeDoubleValue:(double)value __attribute__((swift_name("encodeDouble(value:)")));
- (void)encodeDoubleElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(double)value __attribute__((swift_name("encodeDoubleElement(descriptor:index:value:)")));
- (void)encodeEnumEnumDescriptor:(id<GNCSerialDescriptor>)enumDescriptor index:(int32_t)index __attribute__((swift_name("encodeEnum(enumDescriptor:index:)")));
- (void)encodeFloatValue:(float)value __attribute__((swift_name("encodeFloat(value:)")));
- (void)encodeFloatElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(float)value __attribute__((swift_name("encodeFloatElement(descriptor:index:value:)")));
- (id<GNCEncoder>)encodeInlineDescriptor:(id<GNCSerialDescriptor>)descriptor __attribute__((swift_name("encodeInline(descriptor:)")));
- (id<GNCEncoder>)encodeInlineElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("encodeInlineElement(descriptor:index:)")));
- (void)encodeIntValue:(int32_t)value __attribute__((swift_name("encodeInt(value:)")));
- (void)encodeIntElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(int32_t)value __attribute__((swift_name("encodeIntElement(descriptor:index:value:)")));
- (void)encodeLongValue:(int64_t)value __attribute__((swift_name("encodeLong(value:)")));
- (void)encodeLongElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(int64_t)value __attribute__((swift_name("encodeLongElement(descriptor:index:value:)")));
- (void)encodeNotNullMark __attribute__((swift_name("encodeNotNullMark()")));
- (void)encodeNull __attribute__((swift_name("encodeNull()")));
- (void)encodeNullableSerializableElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index serializer:(id<GNCSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeNullableSerializableElement(descriptor:index:serializer:value:)")));
- (void)encodeSerializableElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index serializer:(id<GNCSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeSerializableElement(descriptor:index:serializer:value:)")));
- (void)encodeShortValue:(int16_t)value __attribute__((swift_name("encodeShort(value:)")));
- (void)encodeShortElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(int16_t)value __attribute__((swift_name("encodeShortElement(descriptor:index:value:)")));
- (void)encodeStringValue:(NSString *)value __attribute__((swift_name("encodeString(value:)")));
- (void)encodeStringElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(NSString *)value __attribute__((swift_name("encodeStringElement(descriptor:index:value:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)encodeTaggedBooleanTag:(Tag _Nullable)tag value:(BOOL)value __attribute__((swift_name("encodeTaggedBoolean(tag:value:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)encodeTaggedByteTag:(Tag _Nullable)tag value:(int8_t)value __attribute__((swift_name("encodeTaggedByte(tag:value:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)encodeTaggedCharTag:(Tag _Nullable)tag value:(unichar)value __attribute__((swift_name("encodeTaggedChar(tag:value:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)encodeTaggedDoubleTag:(Tag _Nullable)tag value:(double)value __attribute__((swift_name("encodeTaggedDouble(tag:value:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)encodeTaggedEnumTag:(Tag _Nullable)tag enumDescriptor:(id<GNCSerialDescriptor>)enumDescriptor ordinal:(int32_t)ordinal __attribute__((swift_name("encodeTaggedEnum(tag:enumDescriptor:ordinal:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)encodeTaggedFloatTag:(Tag _Nullable)tag value:(float)value __attribute__((swift_name("encodeTaggedFloat(tag:value:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (id<GNCEncoder>)encodeTaggedInlineTag:(Tag _Nullable)tag inlineDescriptor:(id<GNCSerialDescriptor>)inlineDescriptor __attribute__((swift_name("encodeTaggedInline(tag:inlineDescriptor:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)encodeTaggedIntTag:(Tag _Nullable)tag value:(int32_t)value __attribute__((swift_name("encodeTaggedInt(tag:value:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)encodeTaggedLongTag:(Tag _Nullable)tag value:(int64_t)value __attribute__((swift_name("encodeTaggedLong(tag:value:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)encodeTaggedNonNullMarkTag:(Tag _Nullable)tag __attribute__((swift_name("encodeTaggedNonNullMark(tag:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)encodeTaggedNullTag:(Tag _Nullable)tag __attribute__((swift_name("encodeTaggedNull(tag:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)encodeTaggedShortTag:(Tag _Nullable)tag value:(int16_t)value __attribute__((swift_name("encodeTaggedShort(tag:value:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)encodeTaggedStringTag:(Tag _Nullable)tag value:(NSString *)value __attribute__((swift_name("encodeTaggedString(tag:value:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)encodeTaggedValueTag:(Tag _Nullable)tag value:(id)value __attribute__((swift_name("encodeTaggedValue(tag:value:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)endEncodeDescriptor:(id<GNCSerialDescriptor>)descriptor __attribute__((swift_name("endEncode(descriptor:)")));
- (void)endStructureDescriptor:(id<GNCSerialDescriptor>)descriptor __attribute__((swift_name("endStructure(descriptor:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (Tag _Nullable)popTag __attribute__((swift_name("popTag()")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (void)pushTagName:(Tag _Nullable)name __attribute__((swift_name("pushTag(name:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (Tag _Nullable)getTag:(id<GNCSerialDescriptor>)receiver index:(int32_t)index __attribute__((swift_name("getTag(_:index:)")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@property (readonly) Tag _Nullable currentTag __attribute__((swift_name("currentTag")));

/**
 * @note This property has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
@property (readonly) Tag _Nullable currentTagOrNull __attribute__((swift_name("currentTagOrNull")));
@property (readonly) GNCSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.InternalSerializationApi
*/
__attribute__((swift_name("NamedValueEncoder")))
@interface GNCNamedValueEncoder : GNCTaggedEncoder<NSString *>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (NSString *)composeNameParentName:(NSString *)parentName childName:(NSString *)childName __attribute__((swift_name("composeName(parentName:childName:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (NSString *)elementNameDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("elementName(descriptor:index:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (NSString *)nestedNestedName:(NSString *)nestedName __attribute__((swift_name("nested(nestedName:)")));

/**
 * @note This method has protected visibility in Kotlin source and is intended only for use by subclasses.
*/
- (NSString *)getTag:(id<GNCSerialDescriptor>)receiver index:(int32_t)index __attribute__((swift_name("getTag(_:index:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PolymorphicModuleBuilder")))
@interface GNCPolymorphicModuleBuilder<__contravariant Base> : GNCBase
- (void)defaultDefaultSerializerProvider:(id<GNCDeserializationStrategy> _Nullable (^)(NSString * _Nullable))defaultSerializerProvider __attribute__((swift_name("default(defaultSerializerProvider:)"))) __attribute__((deprecated("Deprecated in favor of function with more precise name: defaultDeserializer")));
- (void)defaultDeserializerDefaultDeserializerProvider:(id<GNCDeserializationStrategy> _Nullable (^)(NSString * _Nullable))defaultDeserializerProvider __attribute__((swift_name("defaultDeserializer(defaultDeserializerProvider:)")));
- (void)subclassSubclass:(id<GNCKotlinKClass>)subclass serializer:(id<GNCKSerializer>)serializer __attribute__((swift_name("subclass(subclass:serializer:)")));
@end

__attribute__((swift_name("SerializersModule")))
@interface GNCSerializersModule : GNCBase

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (void)dumpToCollector:(id<GNCSerializersModuleCollector>)collector __attribute__((swift_name("dumpTo(collector:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (id<GNCKSerializer> _Nullable)getContextualKClass:(id<GNCKotlinKClass>)kClass typeArgumentsSerializers:(NSArray<id<GNCKSerializer>> *)typeArgumentsSerializers __attribute__((swift_name("getContextual(kClass:typeArgumentsSerializers:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (id<GNCSerializationStrategy> _Nullable)getPolymorphicBaseClass:(id<GNCKotlinKClass>)baseClass value:(id)value __attribute__((swift_name("getPolymorphic(baseClass:value:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (id<GNCDeserializationStrategy> _Nullable)getPolymorphicBaseClass:(id<GNCKotlinKClass>)baseClass serializedClassName:(NSString * _Nullable)serializedClassName __attribute__((swift_name("getPolymorphic(baseClass:serializedClassName:)")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
__attribute__((swift_name("SerializersModuleCollector")))
@protocol GNCSerializersModuleCollector
@required
- (void)contextualKClass:(id<GNCKotlinKClass>)kClass provider:(id<GNCKSerializer> (^)(NSArray<id<GNCKSerializer>> *))provider __attribute__((swift_name("contextual(kClass:provider:)")));
- (void)contextualKClass:(id<GNCKotlinKClass>)kClass serializer:(id<GNCKSerializer>)serializer __attribute__((swift_name("contextual(kClass:serializer:)")));
- (void)polymorphicBaseClass:(id<GNCKotlinKClass>)baseClass actualClass:(id<GNCKotlinKClass>)actualClass actualSerializer:(id<GNCKSerializer>)actualSerializer __attribute__((swift_name("polymorphic(baseClass:actualClass:actualSerializer:)")));
- (void)polymorphicDefaultBaseClass:(id<GNCKotlinKClass>)baseClass defaultDeserializerProvider:(id<GNCDeserializationStrategy> _Nullable (^)(NSString * _Nullable))defaultDeserializerProvider __attribute__((swift_name("polymorphicDefault(baseClass:defaultDeserializerProvider:)"))) __attribute__((deprecated("Deprecated in favor of function with more precise name: polymorphicDefaultDeserializer")));
- (void)polymorphicDefaultDeserializerBaseClass:(id<GNCKotlinKClass>)baseClass defaultDeserializerProvider:(id<GNCDeserializationStrategy> _Nullable (^)(NSString * _Nullable))defaultDeserializerProvider __attribute__((swift_name("polymorphicDefaultDeserializer(baseClass:defaultDeserializerProvider:)")));
- (void)polymorphicDefaultSerializerBaseClass:(id<GNCKotlinKClass>)baseClass defaultSerializerProvider:(id<GNCSerializationStrategy> _Nullable (^)(id))defaultSerializerProvider __attribute__((swift_name("polymorphicDefaultSerializer(baseClass:defaultSerializerProvider:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SerializersModuleBuilder")))
@interface GNCSerializersModuleBuilder : GNCBase <GNCSerializersModuleCollector>
- (void)contextualKClass:(id<GNCKotlinKClass>)kClass provider:(id<GNCKSerializer> (^)(NSArray<id<GNCKSerializer>> *))provider __attribute__((swift_name("contextual(kClass:provider:)")));
- (void)contextualKClass:(id<GNCKotlinKClass>)kClass serializer:(id<GNCKSerializer>)serializer __attribute__((swift_name("contextual(kClass:serializer:)")));
- (void)includeModule:(GNCSerializersModule *)module __attribute__((swift_name("include(module:)")));
- (void)polymorphicBaseClass:(id<GNCKotlinKClass>)baseClass actualClass:(id<GNCKotlinKClass>)actualClass actualSerializer:(id<GNCKSerializer>)actualSerializer __attribute__((swift_name("polymorphic(baseClass:actualClass:actualSerializer:)")));
- (void)polymorphicDefaultDeserializerBaseClass:(id<GNCKotlinKClass>)baseClass defaultDeserializerProvider:(id<GNCDeserializationStrategy> _Nullable (^)(NSString * _Nullable))defaultDeserializerProvider __attribute__((swift_name("polymorphicDefaultDeserializer(baseClass:defaultDeserializerProvider:)")));
- (void)polymorphicDefaultSerializerBaseClass:(id<GNCKotlinKClass>)baseClass defaultSerializerProvider:(id<GNCSerializationStrategy> _Nullable (^)(id))defaultSerializerProvider __attribute__((swift_name("polymorphicDefaultSerializer(baseClass:defaultSerializerProvider:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClassSerialDescriptorBuilder")))
@interface GNCClassSerialDescriptorBuilder : GNCBase
- (void)elementElementName:(NSString *)elementName descriptor:(id<GNCSerialDescriptor>)descriptor annotations:(NSArray<id<GNCKotlinAnnotation>> *)annotations isOptional:(BOOL)isOptional __attribute__((swift_name("element(elementName:descriptor:annotations:isOptional:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
@property NSArray<id<GNCKotlinAnnotation>> *annotations __attribute__((swift_name("annotations")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
@property BOOL isNullable __attribute__((swift_name("isNullable"))) __attribute__((unavailable("isNullable inside buildSerialDescriptor is deprecated. Please use SerialDescriptor.nullable extension on a builder result.")));
@property (readonly) NSString *serialName __attribute__((swift_name("serialName")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
__attribute__((swift_name("SerialKind")))
@interface GNCSerialKind : GNCBase
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
__attribute__((swift_name("PolymorphicKind")))
@interface GNCPolymorphicKind : GNCSerialKind
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PolymorphicKind.OPEN")))
@interface GNCPolymorphicKindOPEN : GNCPolymorphicKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)oPEN __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCPolymorphicKindOPEN *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PolymorphicKind.SEALED")))
@interface GNCPolymorphicKindSEALED : GNCPolymorphicKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)sEALED __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCPolymorphicKindSEALED *shared __attribute__((swift_name("shared")));
@end

__attribute__((swift_name("PrimitiveKind")))
@interface GNCPrimitiveKind : GNCSerialKind
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PrimitiveKind.BOOLEAN")))
@interface GNCPrimitiveKindBOOLEAN : GNCPrimitiveKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)bOOLEAN __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCPrimitiveKindBOOLEAN *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PrimitiveKind.BYTE")))
@interface GNCPrimitiveKindBYTE : GNCPrimitiveKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)bYTE __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCPrimitiveKindBYTE *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PrimitiveKind.CHAR")))
@interface GNCPrimitiveKindCHAR : GNCPrimitiveKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)cHAR __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCPrimitiveKindCHAR *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PrimitiveKind.DOUBLE")))
@interface GNCPrimitiveKindDOUBLE : GNCPrimitiveKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)dOUBLE __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCPrimitiveKindDOUBLE *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PrimitiveKind.FLOAT")))
@interface GNCPrimitiveKindFLOAT : GNCPrimitiveKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)fLOAT __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCPrimitiveKindFLOAT *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PrimitiveKind.INT")))
@interface GNCPrimitiveKindINT : GNCPrimitiveKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)iNT __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCPrimitiveKindINT *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PrimitiveKind.LONG")))
@interface GNCPrimitiveKindLONG : GNCPrimitiveKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)lONG __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCPrimitiveKindLONG *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PrimitiveKind.SHORT")))
@interface GNCPrimitiveKindSHORT : GNCPrimitiveKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)sHORT __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCPrimitiveKindSHORT *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PrimitiveKind.STRING")))
@interface GNCPrimitiveKindSTRING : GNCPrimitiveKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)sTRING __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCPrimitiveKindSTRING *shared __attribute__((swift_name("shared")));
@end

__attribute__((swift_name("SerialDescriptor")))
@protocol GNCSerialDescriptor
@required

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (NSArray<id<GNCKotlinAnnotation>> *)getElementAnnotationsIndex:(int32_t)index __attribute__((swift_name("getElementAnnotations(index:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (id<GNCSerialDescriptor>)getElementDescriptorIndex:(int32_t)index __attribute__((swift_name("getElementDescriptor(index:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (int32_t)getElementIndexName:(NSString *)name __attribute__((swift_name("getElementIndex(name:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (NSString *)getElementNameIndex:(int32_t)index __attribute__((swift_name("getElementName(index:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (BOOL)isElementOptionalIndex:(int32_t)index __attribute__((swift_name("isElementOptional(index:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
@property (readonly) NSArray<id<GNCKotlinAnnotation>> *annotations __attribute__((swift_name("annotations")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
@property (readonly) int32_t elementsCount __attribute__((swift_name("elementsCount")));
@property (readonly) BOOL isInline __attribute__((swift_name("isInline")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
@property (readonly) BOOL isNullable __attribute__((swift_name("isNullable")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
@property (readonly) GNCSerialKind *kind __attribute__((swift_name("kind")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
@property (readonly) NSString *serialName __attribute__((swift_name("serialName")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SerialKind.CONTEXTUAL")))
@interface GNCSerialKindCONTEXTUAL : GNCSerialKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)cONTEXTUAL __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCSerialKindCONTEXTUAL *shared __attribute__((swift_name("shared")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SerialKind.ENUM")))
@interface GNCSerialKindENUM : GNCSerialKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)eNUM __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCSerialKindENUM *shared __attribute__((swift_name("shared")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
__attribute__((swift_name("StructureKind")))
@interface GNCStructureKind : GNCSerialKind
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StructureKind.CLASS")))
@interface GNCStructureKindCLASS : GNCStructureKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)cLASS __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCStructureKindCLASS *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StructureKind.LIST")))
@interface GNCStructureKindLIST : GNCStructureKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)lIST __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCStructureKindLIST *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StructureKind.MAP")))
@interface GNCStructureKindMAP : GNCStructureKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)mAP __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCStructureKindMAP *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StructureKind.OBJECT")))
@interface GNCStructureKindOBJECT : GNCStructureKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)oBJECT __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCStructureKindOBJECT *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LongAsStringSerializer")))
@interface GNCLongAsStringSerializer : GNCBase <GNCKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)longAsStringSerializer __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCLongAsStringSerializer *shared __attribute__((swift_name("shared")));
- (GNCLong *)deserializeDecoder:(id<GNCDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<GNCEncoder>)encoder value:(GNCLong *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<GNCSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
__attribute__((swift_name("AbstractDecoder")))
@interface GNCAbstractDecoder : GNCBase <GNCDecoder, GNCCompositeDecoder>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (id<GNCCompositeDecoder>)beginStructureDescriptor:(id<GNCSerialDescriptor>)descriptor __attribute__((swift_name("beginStructure(descriptor:)")));
- (BOOL)decodeBoolean __attribute__((swift_name("decodeBoolean()")));
- (BOOL)decodeBooleanElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeBooleanElement(descriptor:index:)")));
- (int8_t)decodeByte __attribute__((swift_name("decodeByte()")));
- (int8_t)decodeByteElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeByteElement(descriptor:index:)")));
- (unichar)decodeChar __attribute__((swift_name("decodeChar()")));
- (unichar)decodeCharElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeCharElement(descriptor:index:)")));
- (double)decodeDouble __attribute__((swift_name("decodeDouble()")));
- (double)decodeDoubleElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeDoubleElement(descriptor:index:)")));
- (int32_t)decodeEnumEnumDescriptor:(id<GNCSerialDescriptor>)enumDescriptor __attribute__((swift_name("decodeEnum(enumDescriptor:)")));
- (float)decodeFloat __attribute__((swift_name("decodeFloat()")));
- (float)decodeFloatElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeFloatElement(descriptor:index:)")));
- (id<GNCDecoder>)decodeInlineDescriptor:(id<GNCSerialDescriptor>)descriptor __attribute__((swift_name("decodeInline(descriptor:)")));
- (id<GNCDecoder>)decodeInlineElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeInlineElement(descriptor:index:)")));
- (int32_t)decodeInt __attribute__((swift_name("decodeInt()")));
- (int32_t)decodeIntElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeIntElement(descriptor:index:)")));
- (int64_t)decodeLong __attribute__((swift_name("decodeLong()")));
- (int64_t)decodeLongElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeLongElement(descriptor:index:)")));
- (BOOL)decodeNotNullMark __attribute__((swift_name("decodeNotNullMark()")));
- (GNCKotlinNothing * _Nullable)decodeNull __attribute__((swift_name("decodeNull()")));
- (id _Nullable)decodeNullableSerializableElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index deserializer:(id<GNCDeserializationStrategy>)deserializer previousValue:(id _Nullable)previousValue __attribute__((swift_name("decodeNullableSerializableElement(descriptor:index:deserializer:previousValue:)")));
- (id _Nullable)decodeSerializableElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index deserializer:(id<GNCDeserializationStrategy>)deserializer previousValue:(id _Nullable)previousValue __attribute__((swift_name("decodeSerializableElement(descriptor:index:deserializer:previousValue:)")));
- (id _Nullable)decodeSerializableValueDeserializer:(id<GNCDeserializationStrategy>)deserializer previousValue:(id _Nullable)previousValue __attribute__((swift_name("decodeSerializableValue(deserializer:previousValue:)")));
- (int16_t)decodeShort __attribute__((swift_name("decodeShort()")));
- (int16_t)decodeShortElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeShortElement(descriptor:index:)")));
- (NSString *)decodeString __attribute__((swift_name("decodeString()")));
- (NSString *)decodeStringElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeStringElement(descriptor:index:)")));
- (id)decodeValue __attribute__((swift_name("decodeValue()")));
- (void)endStructureDescriptor:(id<GNCSerialDescriptor>)descriptor __attribute__((swift_name("endStructure(descriptor:)")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
__attribute__((swift_name("AbstractEncoder")))
@interface GNCAbstractEncoder : GNCBase <GNCEncoder, GNCCompositeEncoder>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (id<GNCCompositeEncoder>)beginStructureDescriptor:(id<GNCSerialDescriptor>)descriptor __attribute__((swift_name("beginStructure(descriptor:)")));
- (void)encodeBooleanValue:(BOOL)value __attribute__((swift_name("encodeBoolean(value:)")));
- (void)encodeBooleanElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(BOOL)value __attribute__((swift_name("encodeBooleanElement(descriptor:index:value:)")));
- (void)encodeByteValue:(int8_t)value __attribute__((swift_name("encodeByte(value:)")));
- (void)encodeByteElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(int8_t)value __attribute__((swift_name("encodeByteElement(descriptor:index:value:)")));
- (void)encodeCharValue:(unichar)value __attribute__((swift_name("encodeChar(value:)")));
- (void)encodeCharElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(unichar)value __attribute__((swift_name("encodeCharElement(descriptor:index:value:)")));
- (void)encodeDoubleValue:(double)value __attribute__((swift_name("encodeDouble(value:)")));
- (void)encodeDoubleElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(double)value __attribute__((swift_name("encodeDoubleElement(descriptor:index:value:)")));
- (BOOL)encodeElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("encodeElement(descriptor:index:)")));
- (void)encodeEnumEnumDescriptor:(id<GNCSerialDescriptor>)enumDescriptor index:(int32_t)index __attribute__((swift_name("encodeEnum(enumDescriptor:index:)")));
- (void)encodeFloatValue:(float)value __attribute__((swift_name("encodeFloat(value:)")));
- (void)encodeFloatElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(float)value __attribute__((swift_name("encodeFloatElement(descriptor:index:value:)")));
- (id<GNCEncoder>)encodeInlineDescriptor:(id<GNCSerialDescriptor>)descriptor __attribute__((swift_name("encodeInline(descriptor:)")));
- (id<GNCEncoder>)encodeInlineElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("encodeInlineElement(descriptor:index:)")));
- (void)encodeIntValue:(int32_t)value __attribute__((swift_name("encodeInt(value:)")));
- (void)encodeIntElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(int32_t)value __attribute__((swift_name("encodeIntElement(descriptor:index:value:)")));
- (void)encodeLongValue:(int64_t)value __attribute__((swift_name("encodeLong(value:)")));
- (void)encodeLongElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(int64_t)value __attribute__((swift_name("encodeLongElement(descriptor:index:value:)")));
- (void)encodeNull __attribute__((swift_name("encodeNull()")));
- (void)encodeNullableSerializableElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index serializer:(id<GNCSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeNullableSerializableElement(descriptor:index:serializer:value:)")));
- (void)encodeSerializableElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index serializer:(id<GNCSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeSerializableElement(descriptor:index:serializer:value:)")));
- (void)encodeShortValue:(int16_t)value __attribute__((swift_name("encodeShort(value:)")));
- (void)encodeShortElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(int16_t)value __attribute__((swift_name("encodeShortElement(descriptor:index:value:)")));
- (void)encodeStringValue:(NSString *)value __attribute__((swift_name("encodeString(value:)")));
- (void)encodeStringElementDescriptor:(id<GNCSerialDescriptor>)descriptor index:(int32_t)index value:(NSString *)value __attribute__((swift_name("encodeStringElement(descriptor:index:value:)")));
- (void)encodeValueValue:(id)value __attribute__((swift_name("encodeValue(value:)")));
- (void)endStructureDescriptor:(id<GNCSerialDescriptor>)descriptor __attribute__((swift_name("endStructure(descriptor:)")));
@end


/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
__attribute__((swift_name("ChunkedDecoder")))
@protocol GNCChunkedDecoder
@required

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (void)decodeStringChunkedConsumeChunk:(void (^)(NSString *))consumeChunk __attribute__((swift_name("decodeStringChunked(consumeChunk:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CompositeDecoderCompanion")))
@interface GNCCompositeDecoderCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCCompositeDecoderCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) int32_t DECODE_DONE __attribute__((swift_name("DECODE_DONE")));
@property (readonly) int32_t UNKNOWN_NAME __attribute__((swift_name("UNKNOWN_NAME")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GraphmastersNavigationCore")))
@interface GNCGraphmastersNavigationCore : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)graphmastersNavigationCore __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCGraphmastersNavigationCore *shared __attribute__((swift_name("shared")));
@property (readonly) NSString *frameworkName __attribute__((swift_name("frameworkName")));
@end

@interface GNCBaseNavigationSdk (Extensions)
- (GNCKotlinUnit *(^(^)(GNCKotlinUnit *(^)(GNCRouteData *, GNCKotlinUnit *), GNCKotlinUnit *(^)(NSError *, GNCKotlinUnit *), GNCKotlinUnit *(^)(NSError *, GNCKotlinUnit *)))(void))requestStaticRouteDataOrigin:(GNCLocation *)origin destination:(id<GNCRoutable>)destination vehicleConfig:(id<GNCVehicleConfig> _Nullable)vehicleConfig __attribute__((swift_name("requestStaticRouteData(origin:destination:vehicleConfig:)")));
- (GNCKotlinUnit *(^(^)(GNCKotlinUnit *(^)(GNCRoute *, GNCKotlinUnit *), GNCKotlinUnit *(^)(NSError *, GNCKotlinUnit *), GNCKotlinUnit *(^)(NSError *, GNCKotlinUnit *)))(void))requestStaticRouteOrigin:(GNCLocation *)origin destination:(id<GNCRoutable>)destination vehicleConfig:(id<GNCVehicleConfig> _Nullable)vehicleConfig __attribute__((swift_name("requestStaticRoute(origin:destination:vehicleConfig:)")));
- (void)updateLocationClLocation:(CLLocation *)clLocation __attribute__((swift_name("updateLocation(clLocation:)")));
@end

@interface GNCOnRouteProjectorProjectedLocation (Extensions)
- (NSArray<GNCRouteWaypoint *> *)remainingWaypoints __attribute__((swift_name("remainingWaypoints()")));
@end

@interface GNCRoute (Extensions)
- (BOOL)isFullRoute __attribute__((swift_name("isFullRoute()")));
@end

@interface GNCRouteWaypoint (Extensions)
- (BOOL)isTurnCommand __attribute__((swift_name("isTurnCommand()")));
@end

@interface GNCLocation (Extensions)
- (GNCLength *)distanceFromLocation:(GNCLocation *)location __attribute__((swift_name("distanceFrom(location:)"))) __attribute__((deprecated("Use `Geodesy` instead.")));
@property (readonly) CLLocation *clLocation __attribute__((swift_name("clLocation"))) __attribute__((deprecated("Use `CLLocationConverter` instead.")));
@end

@interface GNCLocationCompanion (Extensions)
- (GNCLocation *)fromLatLng:(GNCLatLng *)latLng __attribute__((swift_name("from(latLng:)"))) __attribute__((deprecated("Use initializer instead")));
- (GNCLocation *)fromClLocation:(CLLocation *)clLocation __attribute__((swift_name("from(clLocation:)"))) __attribute__((deprecated("Use `CLLocationConverter` instead.")));
@end

@interface GNCGMLog (Extensions)
- (void)eTag:(NSString * _Nullable)tag error:(NSError *)error __attribute__((swift_name("e(tag:error:)")));
- (void)eError:(NSError *)error __attribute__((swift_name("e(error:)")));
@end

@interface GNCDuration (Extensions)
- (GNCDuration *)fromTimeInterval:(double)timeInterval __attribute__((swift_name("from(timeInterval:)")));
@property (readonly) double timeInterval __attribute__((swift_name("timeInterval")));
@end

@interface GNCLength (Extensions)
- (GNCSpeed *)divDuration:(GNCDuration *)duration __attribute__((swift_name("div(duration:)")));
- (GNCDuration *)divSpeed:(GNCSpeed *)speed __attribute__((swift_name("div(speed:)")));
@end

@interface GNCTimestamp (Extensions)
- (BOOL)isOlderThanDuration:(GNCDuration *)duration __attribute__((swift_name("isOlderThan(duration:)")));
@end

@interface GNCSpeed (Extensions)
- (GNCLength *)timesOther:(GNCDuration *)other __attribute__((swift_name("times(other:)")));
@end

@interface GNCGMAnalytics (Extensions)
- (void)postErrorError:(NSError *)error __attribute__((swift_name("postError(error:)")));
- (void)postErrorError:(NSError *)error properties:(NSDictionary<NSString *, id> *)properties __attribute__((swift_name("postError(error:properties:)")));
@end

@interface GNCLatLng (Extensions)
- (GNCLength *)distanceFromLatLng:(GNCLatLng *)latLng __attribute__((swift_name("distanceFrom(latLng:)"))) __attribute__((deprecated("Use `Geodesy` instead.")));
@property (readonly) GNCKotlinCValue<id> *clLocationCoordinate2DCValue __attribute__((swift_name("clLocationCoordinate2DCValue")));
@property (readonly) BOOL isValid __attribute__((swift_name("isValid")));
@end

@interface GNCLatLngCompanion (Extensions)
- (GNCLatLng *)fromCoordinate:(void *)coordinate __attribute__((swift_name("from(coordinate:)")));
@property (readonly) GNCLatLng *graphmastersOfficeHanover __attribute__((swift_name("graphmastersOfficeHanover")));
@property (readonly) GNCLatLng *graphmastersOfficeVienna __attribute__((swift_name("graphmastersOfficeVienna")));
@property (readonly) GNCLatLng *invalid __attribute__((swift_name("invalid")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinDelegates")))
@interface GNCKotlinDelegates : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)delegates __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCKotlinDelegates *shared __attribute__((swift_name("shared")));
- (id<GNCKotlinReadWriteProperty>)notNull __attribute__((swift_name("notNull()")));
- (id<GNCKotlinReadWriteProperty>)observableInitialValue:(id _Nullable)initialValue onChange:(void (^)(id<GNCKotlinKProperty>, id _Nullable, id _Nullable))onChange __attribute__((swift_name("observable(initialValue:onChange:)")));
- (id<GNCKotlinReadWriteProperty>)vetoableInitialValue:(id _Nullable)initialValue onChange:(GNCBoolean *(^)(id<GNCKotlinKProperty>, id _Nullable, id _Nullable))onChange __attribute__((swift_name("vetoable(initialValue:onChange:)")));
@end

@interface GNCKotlinDelegates (Extensions)
- (id<GNCKotlinReadWriteProperty>)onChangeInitialValue:(id _Nullable)initialValue onChange:(void (^)(id _Nullable))onChange __attribute__((swift_name("onChange(initialValue:onChange:)")));
@end

@interface GNCLogger_Companion (Extensions)
@property (readonly) id<GNCLogger_> DEFAULT __attribute__((swift_name("DEFAULT")));
@property (readonly) id<GNCLogger_> EMPTY __attribute__((swift_name("EMPTY")));
@property (readonly) id<GNCLogger_> SIMPLE __attribute__((swift_name("SIMPLE")));
@end

@interface GNCHttpClientConfig (Extensions)
- (void)LoggingBlock:(void (^)(GNCLoggingConfig *))block __attribute__((swift_name("Logging(block:)")));
- (void)AuthBlock:(void (^)(GNCAuth *))block __attribute__((swift_name("Auth(block:)")));
- (void)BrowserUserAgent __attribute__((swift_name("BrowserUserAgent()")));
- (void)CharsetsBlock:(void (^)(GNCHttpPlainTextConfig *))block __attribute__((swift_name("Charsets(block:)")));
- (void)CurlUserAgent __attribute__((swift_name("CurlUserAgent()")));
- (void)HttpResponseValidatorBlock:(void (^)(GNCHttpCallValidatorConfig *))block __attribute__((swift_name("HttpResponseValidator(block:)")));
- (void)addDefaultResponseValidation __attribute__((swift_name("addDefaultResponseValidation()")));
- (void)defaultRequestBlock:(void (^)(GNCDefaultRequestDefaultRequestBuilder *))block __attribute__((swift_name("defaultRequest(block:)")));
- (void)WebSocketsConfig:(void (^)(GNCWebSocketsConfig *))config __attribute__((swift_name("WebSockets(config:)")));
- (void)ResponseObserverBlock:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("ResponseObserver(block:)")));
@end

@interface GNCAuth (Extensions)
- (void)basicBlock:(void (^)(GNCBasicAuthConfig *))block __attribute__((swift_name("basic(block:)")));
- (void)bearerBlock:(void (^)(GNCBearerAuthConfig *))block __attribute__((swift_name("bearer(block:)")));
- (void)digestBlock:(void (^)(GNCDigestAuthConfig *))block __attribute__((swift_name("digest(block:)")));
@end

@interface GNCHttpClientCall (Extensions)

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)bodyWithCompletionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("body(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveWithCompletionHandler_:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("receive(completionHandler_:)"))) __attribute__((unavailable("Use `body` method instead")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveInfo:(GNCTypeInfo *)info completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("receive(info:completionHandler:)"))) __attribute__((unavailable("Use `body` method instead")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)saveWithCompletionHandler:(void (^)(GNCHttpClientCall * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("save(completionHandler:)")));
- (GNCHttpClientCall *)wrapWithContentContent:(id<GNCByteReadChannel>)content __attribute__((swift_name("wrapWithContent(content:)")));
- (GNCHttpClientCall *)wrapWithContentContent:(id<GNCByteReadChannel>)content shouldCloseOrigin:(BOOL)shouldCloseOrigin __attribute__((swift_name("wrapWithContent(content:shouldCloseOrigin:)"))) __attribute__((unavailable("Parameter [shouldCloseOrigin] is deprecated")));
@end

@interface GNCHttpResponse (Extensions)

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)bodyWithCompletionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("body(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)bodyTypeInfo:(GNCTypeInfo *)typeInfo completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("body(typeInfo:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveWithCompletionHandler_:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("receive(completionHandler_:)"))) __attribute__((unavailable("Use `body` method instead")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)bodyAsChannelWithCompletionHandler:(void (^)(id<GNCByteReadChannel> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("bodyAsChannel(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)bodyAsTextFallbackCharset:(GNCCharset *)fallbackCharset completionHandler:(void (^)(NSString * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("bodyAsText(fallbackCharset:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)discardRemainingWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("discardRemaining(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readBytesWithCompletionHandler:(void (^)(GNCKotlinByteArray * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readBytes(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readBytesCount:(int32_t)count completionHandler:(void (^)(GNCKotlinByteArray * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readBytes(count:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)readTextFallbackCharset:(GNCCharset * _Nullable)fallbackCharset completionHandler:(void (^)(NSString * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readText(fallbackCharset:completionHandler:)"))) __attribute__((unavailable("Use `bodyAsText` method instead")));
@property (readonly) id<GNCHttpRequest> request __attribute__((swift_name("request")));
@end

@interface GNCDispatchers (Extensions)
- (GNCCoroutineDispatcher *)clientDispatcherThreadCount:(int32_t)threadCount dispatcherName:(NSString *)dispatcherName __attribute__((swift_name("clientDispatcher(threadCount:dispatcherName:)")));
- (GNCCloseableCoroutineDispatcher *)createFixedThreadDispatcherName:(NSString *)name threads:(int32_t)threads __attribute__((swift_name("createFixedThreadDispatcher(name:threads:)")));
@property (readonly) GNCCoroutineDispatcher *IO __attribute__((swift_name("IO")));
@end

@interface GNCKotlinThrowable (Extensions)
- (GNCKotlinThrowable *)unwrapCancellationException __attribute__((swift_name("unwrapCancellationException()")));
- (void)doInitCauseBridgeCause:(GNCKotlinThrowable *)cause __attribute__((swift_name("doInitCauseBridge(cause:)")));
- (void)printStack __attribute__((swift_name("printStack()")));
@property (readonly) GNCKotlinThrowable * _Nullable rootCause __attribute__((swift_name("rootCause")));
@end

@interface GNCOutgoingContent (Extensions)
- (GNCOutgoingContent *)wrapHeadersBlock:(id<GNCHeaders> (^)(id<GNCHeaders>))block __attribute__((swift_name("wrapHeaders(block:)")));
@property GNCCachingOptions * _Nullable caching __attribute__((swift_name("caching")));
@property NSArray<id<GNCVersion>> *versions __attribute__((swift_name("versions")));
@end

@interface GNCHttpRequestBuilder (Extensions)
- (void)parameterKey:(NSString *)key value:(id _Nullable)value __attribute__((swift_name("parameter(key:value:)")));
- (void)setBodyBody:(id _Nullable)body __attribute__((swift_name("setBody(body:)")));
- (void)setBodyBody:(id _Nullable)body bodyType:(GNCTypeInfo *)bodyType __attribute__((swift_name("setBody(body:bodyType:)")));
- (GNCHttpRequestBuilder *)takeFromRequest:(id<GNCHttpRequest>)request __attribute__((swift_name("takeFrom(request:)")));
- (GNCHttpRequestBuilder *)takeFromRequest_:(GNCHttpRequestData *)request __attribute__((swift_name("takeFrom(request_:)")));
- (void)urlBlock_:(void (^)(GNCURLBuilder *))block __attribute__((swift_name("url(block_:)")));
- (void)urlUrl:(GNCUrl *)url __attribute__((swift_name("url(url:)")));
- (void)urlUrlString:(NSString *)urlString __attribute__((swift_name("url(urlString:)")));
- (void)urlScheme:(NSString * _Nullable)scheme host:(NSString * _Nullable)host port:(GNCInt * _Nullable)port path:(NSString * _Nullable)path block:(void (^)(GNCURLBuilder *))block __attribute__((swift_name("url(scheme:host:port:path:block:)")));
- (void)onDownloadListener:(id<GNCKotlinSuspendFunction2> _Nullable)listener __attribute__((swift_name("onDownload(listener:)")));
- (void)onUploadListener:(id<GNCKotlinSuspendFunction2> _Nullable)listener __attribute__((swift_name("onUpload(listener:)")));
- (void)retryBlock:(void (^)(GNCHttpRequestRetryConfiguration *))block __attribute__((swift_name("retry(block:)")));
- (void)timeoutBlock:(void (^)(GNCHttpTimeoutHttpTimeoutCapabilityConfiguration *))block __attribute__((swift_name("timeout(block:)")));
@property NSString *host __attribute__((swift_name("host")));
@property int32_t port __attribute__((swift_name("port")));
@property BOOL expectSuccess __attribute__((swift_name("expectSuccess")));
@end

@interface GNCHttpClient (Extensions)

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)deleteBuilder:(GNCHttpRequestBuilder *)builder completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("delete(builder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)deleteBlock:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("delete(block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)deleteUrl:(GNCUrl *)url block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("delete(url:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)deleteUrlString:(NSString *)urlString block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("delete(urlString:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)getBuilder:(GNCHttpRequestBuilder *)builder completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("get(builder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)getBlock:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("get(block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)getUrl:(GNCUrl *)url block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("get(url:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)getUrlString:(NSString *)urlString block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("get(urlString:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)headBuilder:(GNCHttpRequestBuilder *)builder completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("head(builder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)headBlock:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("head(block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)headUrl:(GNCUrl *)url block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("head(url:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)headUrlString:(NSString *)urlString block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("head(urlString:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)optionsBuilder:(GNCHttpRequestBuilder *)builder completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("options(builder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)optionsBlock:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("options(block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)optionsUrl:(GNCUrl *)url block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("options(url:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)optionsUrlString:(NSString *)urlString block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("options(urlString:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)patchBuilder:(GNCHttpRequestBuilder *)builder completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("patch(builder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)patchBlock:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("patch(block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)patchUrl:(GNCUrl *)url block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("patch(url:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)patchUrlString:(NSString *)urlString block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("patch(urlString:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)postBuilder:(GNCHttpRequestBuilder *)builder completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("post(builder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)postBlock:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("post(block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)postUrl:(GNCUrl *)url block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("post(url:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)postUrlString:(NSString *)urlString block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("post(urlString:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareDeleteBuilder:(GNCHttpRequestBuilder *)builder completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareDelete(builder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareDeleteBlock:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareDelete(block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareDeleteUrl:(GNCUrl *)url block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareDelete(url:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareDeleteUrlString:(NSString *)urlString block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareDelete(urlString:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareGetBuilder:(GNCHttpRequestBuilder *)builder completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareGet(builder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareGetBlock:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareGet(block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareGetUrl:(GNCUrl *)url block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareGet(url:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareGetUrlString:(NSString *)urlString block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareGet(urlString:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareHeadBuilder:(GNCHttpRequestBuilder *)builder completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareHead(builder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareHeadBlock:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareHead(block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareHeadUrl:(GNCUrl *)url block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareHead(url:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareHeadUrlString:(NSString *)urlString block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareHead(urlString:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareOptionsBuilder:(GNCHttpRequestBuilder *)builder completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareOptions(builder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareOptionsBlock:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareOptions(block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareOptionsUrl:(GNCUrl *)url block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareOptions(url:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareOptionsUrlString:(NSString *)urlString block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareOptions(urlString:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)preparePatchBuilder:(GNCHttpRequestBuilder *)builder completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("preparePatch(builder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)preparePatchBlock:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("preparePatch(block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)preparePatchUrl:(GNCUrl *)url block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("preparePatch(url:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)preparePatchUrlString:(NSString *)urlString block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("preparePatch(urlString:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)preparePostBuilder:(GNCHttpRequestBuilder *)builder completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("preparePost(builder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)preparePostBlock:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("preparePost(block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)preparePostUrl:(GNCUrl *)url block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("preparePost(url:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)preparePostUrlString:(NSString *)urlString block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("preparePost(urlString:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)preparePutBuilder:(GNCHttpRequestBuilder *)builder completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("preparePut(builder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)preparePutBlock:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("preparePut(block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)preparePutUrl:(GNCUrl *)url block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("preparePut(url:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)preparePutUrlString:(NSString *)urlString block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("preparePut(urlString:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareRequestBuilder:(GNCHttpRequestBuilder *)builder completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareRequest(builder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareRequestBlock:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareRequest(block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareRequestUrl:(GNCUrl *)url block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareRequest(url:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareRequestUrlString:(NSString *)urlString block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareRequest(urlString:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)putBuilder:(GNCHttpRequestBuilder *)builder completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("put(builder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)putBlock:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("put(block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)putUrl:(GNCUrl *)url block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("put(url:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)putUrlString:(NSString *)urlString block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("put(urlString:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)requestBuilder:(GNCHttpRequestBuilder *)builder completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("request(builder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)requestBlock:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("request(block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)requestUrl:(GNCUrl *)url block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("request(url:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)requestUrlString:(NSString *)urlString block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("request(urlString:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareFormFormParameters:(id<GNCParameters>)formParameters encodeInQuery:(BOOL)encodeInQuery block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareForm(formParameters:encodeInQuery:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareFormUrl:(NSString *)url formParameters:(id<GNCParameters>)formParameters encodeInQuery:(BOOL)encodeInQuery block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareForm(url:formParameters:encodeInQuery:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareFormWithBinaryDataUrl:(NSString *)url formData:(NSArray<GNCPartData *> *)formData block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareFormWithBinaryData(url:formData:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)prepareFormWithBinaryDataFormData:(NSArray<GNCPartData *> *)formData block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpStatement * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("prepareFormWithBinaryData(formData:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)submitFormFormParameters:(id<GNCParameters>)formParameters encodeInQuery:(BOOL)encodeInQuery block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("submitForm(formParameters:encodeInQuery:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)submitFormUrl:(NSString *)url formParameters:(id<GNCParameters>)formParameters encodeInQuery:(BOOL)encodeInQuery block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("submitForm(url:formParameters:encodeInQuery:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)submitFormWithBinaryDataUrl:(NSString *)url formData:(NSArray<GNCPartData *> *)formData block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("submitFormWithBinaryData(url:formData:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)submitFormWithBinaryDataFormData:(NSArray<GNCPartData *> *)formData block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("submitFormWithBinaryData(formData:block:completionHandler:)")));
- (void)defaultTransformers __attribute__((swift_name("defaultTransformers()")));
- (id)pluginPlugin:(id<GNCHttpClientPlugin>)plugin __attribute__((swift_name("plugin(plugin:)")));
- (id _Nullable)pluginOrNullPlugin:(id<GNCHttpClientPlugin>)plugin __attribute__((swift_name("pluginOrNull(plugin:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)webSocketRequest:(void (^)(GNCHttpRequestBuilder *))request block:(id<GNCKotlinSuspendFunction1>)block completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("webSocket(request:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)webSocketMethod:(GNCHttpMethod *)method host:(NSString * _Nullable)host port:(GNCInt * _Nullable)port path:(NSString * _Nullable)path request:(void (^)(GNCHttpRequestBuilder *))request block:(id<GNCKotlinSuspendFunction1>)block completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("webSocket(method:host:port:path:request:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)webSocketUrlString:(NSString *)urlString request:(void (^)(GNCHttpRequestBuilder *))request block:(id<GNCKotlinSuspendFunction1>)block completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("webSocket(urlString:request:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)webSocketSessionBlock:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCDefaultClientWebSocketSession * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("webSocketSession(block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)webSocketSessionMethod:(GNCHttpMethod *)method host:(NSString * _Nullable)host port:(GNCInt * _Nullable)port path:(NSString * _Nullable)path block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCDefaultClientWebSocketSession * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("webSocketSession(method:host:port:path:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)webSocketSessionUrlString:(NSString *)urlString block:(void (^)(GNCHttpRequestBuilder *))block completionHandler:(void (^)(GNCDefaultClientWebSocketSession * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("webSocketSession(urlString:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)wsRequest:(void (^)(GNCHttpRequestBuilder *))request block:(id<GNCKotlinSuspendFunction1>)block completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("ws(request:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)wsMethod:(GNCHttpMethod *)method host:(NSString * _Nullable)host port:(GNCInt * _Nullable)port path:(NSString * _Nullable)path request:(void (^)(GNCHttpRequestBuilder *))request block:(id<GNCKotlinSuspendFunction1>)block completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("ws(method:host:port:path:request:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)wsUrlString:(NSString *)urlString request:(void (^)(GNCHttpRequestBuilder *))request block:(id<GNCKotlinSuspendFunction1>)block completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("ws(urlString:request:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)wssRequest:(void (^)(GNCHttpRequestBuilder *))request block:(id<GNCKotlinSuspendFunction1>)block completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("wss(request:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)wssMethod:(GNCHttpMethod *)method host:(NSString * _Nullable)host port:(GNCInt * _Nullable)port path:(NSString * _Nullable)path request:(void (^)(GNCHttpRequestBuilder *))request block:(id<GNCKotlinSuspendFunction1>)block completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("wss(method:host:port:path:request:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)wssUrlString:(NSString *)urlString request:(void (^)(GNCHttpRequestBuilder *))request block:(id<GNCKotlinSuspendFunction1>)block completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("wss(urlString:request:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)cookiesUrl:(GNCUrl *)url completionHandler:(void (^)(NSArray<GNCCookie *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("cookies(url:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)cookiesUrlString:(NSString *)urlString completionHandler:(void (^)(NSArray<GNCCookie *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("cookies(urlString:completionHandler:)")));
@end

@interface GNCHttpRequestBuilderCompanion (Extensions)
- (GNCHttpRequestBuilder *)invokeBlock:(void (^)(GNCURLBuilder *))block __attribute__((swift_name("invoke(block:)")));
- (GNCHttpRequestBuilder *)invokeScheme:(NSString * _Nullable)scheme host:(NSString * _Nullable)host port:(GNCInt * _Nullable)port path:(NSString * _Nullable)path block:(void (^)(GNCURLBuilder *))block __attribute__((swift_name("invoke(scheme:host:port:path:block:)")));
@end

@interface GNCHttpRequestData (Extensions)
- (BOOL)isUpgradeRequest __attribute__((swift_name("isUpgradeRequest()")));
@end

@interface GNCFormBuilder (Extensions)
- (void)appendKey:(NSString *)key headers:(id<GNCHeaders>)headers size:(GNCLong * _Nullable)size bodyBuilder:(void (^)(GNCBytePacketBuilder *))bodyBuilder __attribute__((swift_name("append(key:headers:size:bodyBuilder:)")));
- (void)appendKey:(NSString *)key filename:(NSString *)filename contentType:(GNCContentType * _Nullable)contentType size:(GNCLong * _Nullable)size bodyBuilder:(void (^)(GNCBytePacketBuilder *))bodyBuilder __attribute__((swift_name("append(key:filename:contentType:size:bodyBuilder:)")));
@end

@interface GNCHttpStatement (Extensions)

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveWithCompletionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("receive(completionHandler:)"))) __attribute__((unavailable("Use `body` method instead")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveBlock:(id<GNCKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("receive(block:completionHandler:)"))) __attribute__((unavailable("Use `body` method instead")));
@end

@interface GNCProxyConfig (Extensions)
- (GNCNetworkAddress *)resolveAddress __attribute__((swift_name("resolveAddress()")));
@property (readonly) GNCProxyType *type __attribute__((swift_name("type")));
@end

@interface GNCProxyBuilder (Extensions)
- (GNCProxyConfig *)httpUrlString:(NSString *)urlString __attribute__((swift_name("http(urlString:)")));
@end

@interface GNCDefaultClientWebSocketSession (Extensions)

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveDeserializedWithCompletionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("receiveDeserialized(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)sendSerializedData:(id _Nullable)data completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("sendSerialized(data:completionHandler:)")));
@property (readonly) id<GNCWebsocketContentConverter> _Nullable converter __attribute__((swift_name("converter")));
@end

@interface GNCFrame (Extensions)
- (GNCKotlinByteArray *)readBytes __attribute__((swift_name("readBytes()")));
@end

@interface GNCFrameClose (Extensions)
- (GNCCloseReason * _Nullable)readReason __attribute__((swift_name("readReason()")));
@end

@interface GNCFrameText (Extensions)
- (NSString *)readText __attribute__((swift_name("readText()")));
@end

@interface GNCHttpStatusCodeCompanion (Extensions)
@property (readonly) GNCHttpStatusCode *ExceptionFailed __attribute__((swift_name("ExceptionFailed"))) __attribute__((unavailable("Use ExpectationFailed instead")));
@end

@interface GNCURLBuilder (Extensions)
- (GNCURLBuilder *)appendEncodedPathSegmentsComponents:(GNCKotlinArray<NSString *> *)components __attribute__((swift_name("appendEncodedPathSegments(components:)")));
- (GNCURLBuilder *)appendEncodedPathSegmentsSegments:(NSArray<NSString *> *)segments __attribute__((swift_name("appendEncodedPathSegments(segments:)")));
- (GNCURLBuilder *)appendPathSegmentsComponents:(GNCKotlinArray<NSString *> *)components encodeSlash:(BOOL)encodeSlash __attribute__((swift_name("appendPathSegments(components:encodeSlash:)")));
- (GNCURLBuilder *)appendPathSegmentsSegments:(NSArray<NSString *> *)segments encodeSlash:(BOOL)encodeSlash __attribute__((swift_name("appendPathSegments(segments:encodeSlash:)")));
- (GNCURLBuilder *)clone __attribute__((swift_name("clone()")));
- (void)pathPath:(GNCKotlinArray<NSString *> *)path __attribute__((swift_name("path(path:)")));
- (GNCURLBuilder *)pathComponentsComponents:(GNCKotlinArray<NSString *> *)components __attribute__((swift_name("pathComponents(components:)"))) __attribute__((deprecated("Please use appendPathSegments method")));
- (GNCURLBuilder *)pathComponentsComponents_:(NSArray<NSString *> *)components __attribute__((swift_name("pathComponents(components_:)"))) __attribute__((deprecated("Please use appendPathSegments method")));
- (void)setScheme:(NSString * _Nullable)scheme host:(NSString * _Nullable)host port:(GNCInt * _Nullable)port path:(NSString * _Nullable)path block:(void (^)(GNCURLBuilder *))block __attribute__((swift_name("set(scheme:host:port:path:block:)")));
- (GNCURLBuilder *)takeFromUrl:(GNCURLBuilder *)url __attribute__((swift_name("takeFrom(url:)")));
- (GNCURLBuilder *)takeFromUrl_:(GNCUrl *)url __attribute__((swift_name("takeFrom(url_:)")));
- (GNCURLBuilder *)takeFromUrlString:(NSString *)urlString __attribute__((swift_name("takeFrom(urlString:)")));
@property (readonly) NSString *authority __attribute__((swift_name("authority")));
@property NSString *encodedPath __attribute__((swift_name("encodedPath")));
@end

@interface GNCUrl (Extensions)
- (GNCUrl *)doCopyProtocol:(GNCURLProtocol *)protocol host:(NSString *)host specifiedPort:(int32_t)specifiedPort encodedPath:(NSString *)encodedPath parameters:(id<GNCParameters>)parameters fragment:(NSString *)fragment user:(NSString * _Nullable)user password:(NSString * _Nullable)password trailingQuery:(BOOL)trailingQuery __attribute__((swift_name("doCopy(protocol:host:specifiedPort:encodedPath:parameters:fragment:user:password:trailingQuery:)"))) __attribute__((unavailable("Url is not a data class anymore. Please use URLBuilder(url)")));
@property (readonly) NSString *authority __attribute__((swift_name("authority")));
@property (readonly) NSString *fullPath __attribute__((swift_name("fullPath")));
@property (readonly) NSString *hostWithPort __attribute__((swift_name("hostWithPort")));
@property (readonly) NSString *protocolWithAuthority __attribute__((swift_name("protocolWithAuthority")));
@end

@interface GNCURLBuilderCompanion (Extensions)
@property (readonly) NSString *origin __attribute__((swift_name("origin")));
@end

@interface GNCHeaderValueWithParameters (Extensions)
- (GNCCharset * _Nullable)charset __attribute__((swift_name("charset()")));
@end

@interface GNCContentTypeCompanion (Extensions)
- (GNCContentType *)defaultForFileExtensionExtension:(NSString *)extension __attribute__((swift_name("defaultForFileExtension(extension:)")));
- (GNCContentType *)defaultForFilePathPath:(NSString *)path __attribute__((swift_name("defaultForFilePath(path:)")));
- (NSArray<GNCContentType *> *)fromFileExtensionExt:(NSString *)ext __attribute__((swift_name("fromFileExtension(ext:)")));
- (NSArray<GNCContentType *> *)fromFilePathPath:(NSString *)path __attribute__((swift_name("fromFilePath(path:)")));
@end

@interface GNCHeadersBuilder (Extensions)
- (void)etagEntityTag:(NSString *)entityTag __attribute__((swift_name("etag(entityTag:)")));
@end

@interface GNCContentType (Extensions)
- (NSArray<NSString *> *)fileExtensions __attribute__((swift_name("fileExtensions()")));
- (GNCContentType *)withCharsetCharset:(GNCCharset *)charset __attribute__((swift_name("withCharset(charset:)")));
- (GNCContentType *)withCharsetIfNeededCharset:(GNCCharset *)charset __attribute__((swift_name("withCharsetIfNeeded(charset:)")));
@end

@interface GNCURLProtocol (Extensions)
- (BOOL)isSecure __attribute__((swift_name("isSecure()")));
- (BOOL)isWebsocket __attribute__((swift_name("isWebsocket()")));
@end

@interface GNCHttpStatusCode (Extensions)
- (BOOL)isSuccess __attribute__((swift_name("isSuccess()")));
@end

@interface GNCGMTDate (Extensions)
- (NSString *)toHttpDate __attribute__((swift_name("toHttpDate()")));
- (GNCGMTDate *)minusMilliseconds:(int64_t)milliseconds __attribute__((swift_name("minus(milliseconds:)")));
- (GNCGMTDate *)minusDuration:(int64_t)duration __attribute__((swift_name("minus(duration:)")));
- (GNCGMTDate *)plusMilliseconds:(int64_t)milliseconds __attribute__((swift_name("plus(milliseconds:)")));
- (GNCGMTDate *)plusDuration:(int64_t)duration __attribute__((swift_name("plus(duration:)")));
- (GNCGMTDate *)truncateToSeconds __attribute__((swift_name("truncateToSeconds()")));
@end

__attribute__((swift_name("KotlinLongProgression")))
@interface GNCKotlinLongProgression : GNCBase <GNCKotlinIterable>
@property (class, readonly, getter=companion) GNCKotlinLongProgressionCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (GNCKotlinLongIterator *)iterator __attribute__((swift_name("iterator()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t first __attribute__((swift_name("first")));
@property (readonly) int64_t last __attribute__((swift_name("last")));
@property (readonly) int64_t step __attribute__((swift_name("step")));
@end

__attribute__((swift_name("KotlinClosedRange")))
@protocol GNCKotlinClosedRange
@required
- (BOOL)containsValue:(id)value __attribute__((swift_name("contains(value:)")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
@property (readonly) id endInclusive __attribute__((swift_name("endInclusive")));
@property (readonly, getter=start__) id start __attribute__((swift_name("start")));
@end


/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.7")
 *   kotlin.ExperimentalStdlibApi
*/
__attribute__((swift_name("KotlinOpenEndRange")))
@protocol GNCKotlinOpenEndRange
@required
- (BOOL)containsValue_:(id)value __attribute__((swift_name("contains(value_:)")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
@property (readonly) id endExclusive __attribute__((swift_name("endExclusive")));
@property (readonly, getter=start__) id start __attribute__((swift_name("start")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinLongRange")))
@interface GNCKotlinLongRange : GNCKotlinLongProgression <GNCKotlinClosedRange, GNCKotlinOpenEndRange>
- (instancetype)initWithStart:(int64_t)start endInclusive:(int64_t)endInclusive __attribute__((swift_name("init(start:endInclusive:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCKotlinLongRangeCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)containsValue:(GNCLong *)value __attribute__((swift_name("contains(value:)")));
- (BOOL)containsValue_:(GNCLong *)value __attribute__((swift_name("contains(value_:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (NSString *)description __attribute__((swift_name("description()")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.7")
 *   kotlin.ExperimentalStdlibApi
*/
@property (readonly) GNCLong *endExclusive __attribute__((swift_name("endExclusive"))) __attribute__((deprecated("Can throw an exception when it's impossible to represent the value with Long type, for example, when the range includes MAX_VALUE. It's recommended to use 'endInclusive' property that doesn't throw.")));
@property (readonly) GNCLong *endInclusive __attribute__((swift_name("endInclusive")));
@property (readonly, getter=start__) GNCLong *start __attribute__((swift_name("start")));
@end

@interface GNCKotlinLongRange (Extensions)
- (BOOL)containsOther:(GNCKotlinLongRange *)other __attribute__((swift_name("contains(other:)")));
- (id<GNCFlow>)asFlow __attribute__((swift_name("asFlow()")));
@property (readonly) int64_t length __attribute__((swift_name("length"))) __attribute__((unavailable("Not supported anymore.")));
@end

@interface GNCByteReadPacket (Extensions)
- (GNCInput *)decodeBase64Bytes __attribute__((swift_name("decodeBase64Bytes()")));
- (NSString *)encodeBase64 __attribute__((swift_name("encodeBase64()")));
- (int32_t)readAvailableDst:(void *)dst limit:(int32_t)limit __attribute__((swift_name("readAvailable(dst:limit:)")));
- (int64_t)readAvailableDst:(void *)dst limit_:(int64_t)limit __attribute__((swift_name("readAvailable(dst:limit_:)")));
- (GNCKotlinByteArray *)readBytesN:(int32_t)n __attribute__((swift_name("readBytes(n:)")));
- (int32_t)readFullyDst:(void *)dst size:(int32_t)size __attribute__((swift_name("readFully(dst:size:)")));
- (int64_t)readFullyDst:(void *)dst size_:(int64_t)size __attribute__((swift_name("readFully(dst:size_:)")));
- (NSString * _Nullable)readUTF8LineEstimate:(int32_t)estimate limit:(int32_t)limit __attribute__((swift_name("readUTF8Line(estimate:limit:)")));
@property (readonly) BOOL isEmpty __attribute__((swift_name("isEmpty")));
@property (readonly) BOOL isNotEmpty __attribute__((swift_name("isNotEmpty")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinByteArray")))
@interface GNCKotlinByteArray : GNCBase
+ (instancetype)arrayWithSize:(int32_t)size __attribute__((swift_name("init(size:)")));
+ (instancetype)arrayWithSize:(int32_t)size init:(GNCByte *(^)(GNCInt *))init __attribute__((swift_name("init(size:init:)")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (int8_t)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (GNCKotlinByteIterator *)iterator __attribute__((swift_name("iterator()")));
- (void)setIndex:(int32_t)index value:(int8_t)value __attribute__((swift_name("set(index:value:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end

@interface GNCKotlinByteArray (Extensions)
- (NSString *)encodeBase64 __attribute__((swift_name("encodeBase64()")));
- (int16_t)readShortOffset:(int32_t)offset __attribute__((swift_name("readShort(offset:)")));
- (id _Nullable)useMemoryOffset:(int32_t)offset length:(int32_t)length block:(id _Nullable (^)(GNCMemory *))block __attribute__((swift_name("useMemory(offset:length:block:)")));
@end

@interface GNCNetworkAddress (Extensions)
@property (readonly) NSString *hostname_ __attribute__((swift_name("hostname_")));
@property (readonly) int32_t port_ __attribute__((swift_name("port_")));
@end

@interface GNCPipeline (Extensions)

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeContext:(id)context completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("execute(context:completionHandler:)")));
- (void)interceptPhase:(GNCPipelinePhase *)phase block_:(id<GNCKotlinSuspendFunction2>)block __attribute__((swift_name("intercept(phase:block_:)")));
@end

@interface GNCMemory (Extensions)
- (void)doCopyToDestination:(GNCKotlinByteArray *)destination offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("doCopyTo(destination:offset:length:)")));
- (void)doCopyToDestination:(GNCKotlinByteArray *)destination offset:(int32_t)offset length:(int32_t)length destinationOffset__:(int32_t)destinationOffset __attribute__((swift_name("doCopyTo(destination:offset:length:destinationOffset__:)")));
- (void)doCopyToDestination:(GNCKotlinByteArray *)destination offset:(int64_t)offset length_:(int32_t)length __attribute__((swift_name("doCopyTo(destination:offset:length_:)")));
- (void)doCopyToDestination:(GNCKotlinByteArray *)destination offset:(int64_t)offset length:(int32_t)length destinationOffset___:(int32_t)destinationOffset __attribute__((swift_name("doCopyTo(destination:offset:length:destinationOffset___:)")));
- (void)doCopyToDestination:(void *)destination offset:(int32_t)offset length:(int32_t)length destinationOffset____:(int32_t)destinationOffset __attribute__((swift_name("doCopyTo(destination:offset:length:destinationOffset____:)")));
- (void)doCopyToDestination:(void *)destination offset:(int64_t)offset length:(int64_t)length destinationOffset_____:(int64_t)destinationOffset __attribute__((swift_name("doCopyTo(destination:offset:length:destinationOffset_____:)")));
- (void)fillOffset:(int32_t)offset count:(int32_t)count value:(int8_t)value __attribute__((swift_name("fill(offset:count:value:)")));
- (void)fillOffset:(int64_t)offset count:(int64_t)count value_:(int8_t)value __attribute__((swift_name("fill(offset:count:value_:)")));
- (int8_t)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (int8_t)getIndex_:(int64_t)index __attribute__((swift_name("get(index_:)")));
- (void)loadByteArrayOffset:(int32_t)offset destination:(GNCKotlinByteArray *)destination destinationOffset:(int32_t)destinationOffset count:(int32_t)count __attribute__((swift_name("loadByteArray(offset:destination:destinationOffset:count:)")));
- (void)loadByteArrayOffset:(int64_t)offset destination:(GNCKotlinByteArray *)destination destinationOffset:(int32_t)destinationOffset count_:(int32_t)count __attribute__((swift_name("loadByteArray(offset:destination:destinationOffset:count_:)")));
- (void)loadDoubleArrayOffset:(int32_t)offset destination:(GNCKotlinDoubleArray *)destination destinationOffset:(int32_t)destinationOffset count:(int32_t)count __attribute__((swift_name("loadDoubleArray(offset:destination:destinationOffset:count:)")));
- (void)loadDoubleArrayOffset:(int64_t)offset destination:(GNCKotlinDoubleArray *)destination destinationOffset:(int32_t)destinationOffset count_:(int32_t)count __attribute__((swift_name("loadDoubleArray(offset:destination:destinationOffset:count_:)")));
- (double)loadDoubleAtOffset:(int32_t)offset __attribute__((swift_name("loadDoubleAt(offset:)")));
- (double)loadDoubleAtOffset_:(int64_t)offset __attribute__((swift_name("loadDoubleAt(offset_:)")));
- (void)loadFloatArrayOffset:(int32_t)offset destination:(GNCKotlinFloatArray *)destination destinationOffset:(int32_t)destinationOffset count:(int32_t)count __attribute__((swift_name("loadFloatArray(offset:destination:destinationOffset:count:)")));
- (void)loadFloatArrayOffset:(int64_t)offset destination:(GNCKotlinFloatArray *)destination destinationOffset:(int32_t)destinationOffset count_:(int32_t)count __attribute__((swift_name("loadFloatArray(offset:destination:destinationOffset:count_:)")));
- (float)loadFloatAtOffset:(int32_t)offset __attribute__((swift_name("loadFloatAt(offset:)")));
- (float)loadFloatAtOffset_:(int64_t)offset __attribute__((swift_name("loadFloatAt(offset_:)")));
- (void)loadIntArrayOffset:(int32_t)offset destination:(GNCKotlinIntArray *)destination destinationOffset:(int32_t)destinationOffset count:(int32_t)count __attribute__((swift_name("loadIntArray(offset:destination:destinationOffset:count:)")));
- (void)loadIntArrayOffset:(int64_t)offset destination:(GNCKotlinIntArray *)destination destinationOffset:(int32_t)destinationOffset count_:(int32_t)count __attribute__((swift_name("loadIntArray(offset:destination:destinationOffset:count_:)")));
- (int32_t)loadIntAtOffset:(int32_t)offset __attribute__((swift_name("loadIntAt(offset:)")));
- (int32_t)loadIntAtOffset_:(int64_t)offset __attribute__((swift_name("loadIntAt(offset_:)")));
- (void)loadLongArrayOffset:(int32_t)offset destination:(GNCKotlinLongArray *)destination destinationOffset:(int32_t)destinationOffset count:(int32_t)count __attribute__((swift_name("loadLongArray(offset:destination:destinationOffset:count:)")));
- (void)loadLongArrayOffset:(int64_t)offset destination:(GNCKotlinLongArray *)destination destinationOffset:(int32_t)destinationOffset count_:(int32_t)count __attribute__((swift_name("loadLongArray(offset:destination:destinationOffset:count_:)")));
- (int64_t)loadLongAtOffset:(int32_t)offset __attribute__((swift_name("loadLongAt(offset:)")));
- (int64_t)loadLongAtOffset_:(int64_t)offset __attribute__((swift_name("loadLongAt(offset_:)")));
- (void)loadShortArrayOffset:(int32_t)offset destination:(GNCKotlinShortArray *)destination destinationOffset:(int32_t)destinationOffset count:(int32_t)count __attribute__((swift_name("loadShortArray(offset:destination:destinationOffset:count:)")));
- (void)loadShortArrayOffset:(int64_t)offset destination:(GNCKotlinShortArray *)destination destinationOffset:(int32_t)destinationOffset count_:(int32_t)count __attribute__((swift_name("loadShortArray(offset:destination:destinationOffset:count_:)")));
- (int16_t)loadShortAtOffset:(int32_t)offset __attribute__((swift_name("loadShortAt(offset:)")));
- (int16_t)loadShortAtOffset_:(int64_t)offset __attribute__((swift_name("loadShortAt(offset_:)")));
- (void)loadUByteArrayOffset:(int32_t)offset destination:(id)destination destinationOffset:(int32_t)destinationOffset count:(int32_t)count __attribute__((swift_name("loadUByteArray(offset:destination:destinationOffset:count:)")));
- (void)loadUByteArrayOffset:(int64_t)offset destination:(id)destination destinationOffset:(int32_t)destinationOffset count_:(int32_t)count __attribute__((swift_name("loadUByteArray(offset:destination:destinationOffset:count_:)")));
- (void)loadUIntArrayOffset:(int32_t)offset destination:(id)destination destinationOffset:(int32_t)destinationOffset count:(int32_t)count __attribute__((swift_name("loadUIntArray(offset:destination:destinationOffset:count:)")));
- (void)loadUIntArrayOffset:(int64_t)offset destination:(id)destination destinationOffset:(int32_t)destinationOffset count_:(int32_t)count __attribute__((swift_name("loadUIntArray(offset:destination:destinationOffset:count_:)")));
- (uint32_t)loadUIntAtOffset:(int32_t)offset __attribute__((swift_name("loadUIntAt(offset:)")));
- (uint32_t)loadUIntAtOffset_:(int64_t)offset __attribute__((swift_name("loadUIntAt(offset_:)")));
- (void)loadULongArrayOffset:(int32_t)offset destination:(id)destination destinationOffset:(int32_t)destinationOffset count:(int32_t)count __attribute__((swift_name("loadULongArray(offset:destination:destinationOffset:count:)")));
- (void)loadULongArrayOffset:(int64_t)offset destination:(id)destination destinationOffset:(int32_t)destinationOffset count_:(int32_t)count __attribute__((swift_name("loadULongArray(offset:destination:destinationOffset:count_:)")));
- (uint64_t)loadULongAtOffset:(int32_t)offset __attribute__((swift_name("loadULongAt(offset:)")));
- (uint64_t)loadULongAtOffset_:(int64_t)offset __attribute__((swift_name("loadULongAt(offset_:)")));
- (void)loadUShortArrayOffset:(int32_t)offset destination:(id)destination destinationOffset:(int32_t)destinationOffset count:(int32_t)count __attribute__((swift_name("loadUShortArray(offset:destination:destinationOffset:count:)")));
- (void)loadUShortArrayOffset:(int64_t)offset destination:(id)destination destinationOffset:(int32_t)destinationOffset count_:(int32_t)count __attribute__((swift_name("loadUShortArray(offset:destination:destinationOffset:count_:)")));
- (uint16_t)loadUShortAtOffset:(int32_t)offset __attribute__((swift_name("loadUShortAt(offset:)")));
- (uint16_t)loadUShortAtOffset_:(int64_t)offset __attribute__((swift_name("loadUShortAt(offset_:)")));
- (void)setIndex:(int32_t)index value:(int8_t)value __attribute__((swift_name("set(index:value:)")));
- (void)setIndex:(int64_t)index value_:(int8_t)value __attribute__((swift_name("set(index:value_:)")));
- (void)storeAtIndex:(int32_t)index value__:(uint8_t)value __attribute__((swift_name("storeAt(index:value__:)")));
- (void)storeAtIndex:(int64_t)index value___:(uint8_t)value __attribute__((swift_name("storeAt(index:value___:)")));
- (void)storeByteArrayOffset:(int32_t)offset source:(GNCKotlinByteArray *)source sourceOffset:(int32_t)sourceOffset count:(int32_t)count __attribute__((swift_name("storeByteArray(offset:source:sourceOffset:count:)")));
- (void)storeByteArrayOffset:(int64_t)offset source:(GNCKotlinByteArray *)source sourceOffset:(int32_t)sourceOffset count_:(int32_t)count __attribute__((swift_name("storeByteArray(offset:source:sourceOffset:count_:)")));
- (void)storeDoubleArrayOffset:(int32_t)offset source:(GNCKotlinDoubleArray *)source sourceOffset:(int32_t)sourceOffset count:(int32_t)count __attribute__((swift_name("storeDoubleArray(offset:source:sourceOffset:count:)")));
- (void)storeDoubleArrayOffset:(int64_t)offset source:(GNCKotlinDoubleArray *)source sourceOffset:(int32_t)sourceOffset count_:(int32_t)count __attribute__((swift_name("storeDoubleArray(offset:source:sourceOffset:count_:)")));
- (void)storeDoubleAtOffset:(int32_t)offset value:(double)value __attribute__((swift_name("storeDoubleAt(offset:value:)")));
- (void)storeDoubleAtOffset:(int64_t)offset value_:(double)value __attribute__((swift_name("storeDoubleAt(offset:value_:)")));
- (void)storeFloatArrayOffset:(int32_t)offset source:(GNCKotlinFloatArray *)source sourceOffset:(int32_t)sourceOffset count:(int32_t)count __attribute__((swift_name("storeFloatArray(offset:source:sourceOffset:count:)")));
- (void)storeFloatArrayOffset:(int64_t)offset source:(GNCKotlinFloatArray *)source sourceOffset:(int32_t)sourceOffset count_:(int32_t)count __attribute__((swift_name("storeFloatArray(offset:source:sourceOffset:count_:)")));
- (void)storeFloatAtOffset:(int32_t)offset value:(float)value __attribute__((swift_name("storeFloatAt(offset:value:)")));
- (void)storeFloatAtOffset:(int64_t)offset value_:(float)value __attribute__((swift_name("storeFloatAt(offset:value_:)")));
- (void)storeIntArrayOffset:(int32_t)offset source:(GNCKotlinIntArray *)source sourceOffset:(int32_t)sourceOffset count:(int32_t)count __attribute__((swift_name("storeIntArray(offset:source:sourceOffset:count:)")));
- (void)storeIntArrayOffset:(int64_t)offset source:(GNCKotlinIntArray *)source sourceOffset:(int32_t)sourceOffset count_:(int32_t)count __attribute__((swift_name("storeIntArray(offset:source:sourceOffset:count_:)")));
- (void)storeIntAtOffset:(int32_t)offset value:(int32_t)value __attribute__((swift_name("storeIntAt(offset:value:)")));
- (void)storeIntAtOffset:(int64_t)offset value_:(int32_t)value __attribute__((swift_name("storeIntAt(offset:value_:)")));
- (void)storeLongArrayOffset:(int32_t)offset source:(GNCKotlinLongArray *)source sourceOffset:(int32_t)sourceOffset count:(int32_t)count __attribute__((swift_name("storeLongArray(offset:source:sourceOffset:count:)")));
- (void)storeLongArrayOffset:(int64_t)offset source:(GNCKotlinLongArray *)source sourceOffset:(int32_t)sourceOffset count_:(int32_t)count __attribute__((swift_name("storeLongArray(offset:source:sourceOffset:count_:)")));
- (void)storeLongAtOffset:(int32_t)offset value:(int64_t)value __attribute__((swift_name("storeLongAt(offset:value:)")));
- (void)storeLongAtOffset:(int64_t)offset value_:(int64_t)value __attribute__((swift_name("storeLongAt(offset:value_:)")));
- (void)storeShortArrayOffset:(int32_t)offset source:(GNCKotlinShortArray *)source sourceOffset:(int32_t)sourceOffset count:(int32_t)count __attribute__((swift_name("storeShortArray(offset:source:sourceOffset:count:)")));
- (void)storeShortArrayOffset:(int64_t)offset source:(GNCKotlinShortArray *)source sourceOffset:(int32_t)sourceOffset count_:(int32_t)count __attribute__((swift_name("storeShortArray(offset:source:sourceOffset:count_:)")));
- (void)storeShortAtOffset:(int32_t)offset value:(int16_t)value __attribute__((swift_name("storeShortAt(offset:value:)")));
- (void)storeShortAtOffset:(int64_t)offset value_:(int16_t)value __attribute__((swift_name("storeShortAt(offset:value_:)")));
- (void)storeUByteArrayOffset:(int32_t)offset source:(id)source sourceOffset:(int32_t)sourceOffset count:(int32_t)count __attribute__((swift_name("storeUByteArray(offset:source:sourceOffset:count:)")));
- (void)storeUByteArrayOffset:(int64_t)offset source:(id)source sourceOffset:(int32_t)sourceOffset count_:(int32_t)count __attribute__((swift_name("storeUByteArray(offset:source:sourceOffset:count_:)")));
- (void)storeUIntArrayOffset:(int32_t)offset source:(id)source sourceOffset:(int32_t)sourceOffset count:(int32_t)count __attribute__((swift_name("storeUIntArray(offset:source:sourceOffset:count:)")));
- (void)storeUIntArrayOffset:(int64_t)offset source:(id)source sourceOffset:(int32_t)sourceOffset count_:(int32_t)count __attribute__((swift_name("storeUIntArray(offset:source:sourceOffset:count_:)")));
- (void)storeUIntAtOffset:(int32_t)offset value:(uint32_t)value __attribute__((swift_name("storeUIntAt(offset:value:)")));
- (void)storeUIntAtOffset:(int64_t)offset value_:(uint32_t)value __attribute__((swift_name("storeUIntAt(offset:value_:)")));
- (void)storeULongArrayOffset:(int32_t)offset source:(id)source sourceOffset:(int32_t)sourceOffset count:(int32_t)count __attribute__((swift_name("storeULongArray(offset:source:sourceOffset:count:)")));
- (void)storeULongArrayOffset:(int64_t)offset source:(id)source sourceOffset:(int32_t)sourceOffset count_:(int32_t)count __attribute__((swift_name("storeULongArray(offset:source:sourceOffset:count_:)")));
- (void)storeULongAtOffset:(int32_t)offset value:(uint64_t)value __attribute__((swift_name("storeULongAt(offset:value:)")));
- (void)storeULongAtOffset:(int64_t)offset value_:(uint64_t)value __attribute__((swift_name("storeULongAt(offset:value_:)")));
- (void)storeUShortArrayOffset:(int32_t)offset source:(id)source sourceOffset:(int32_t)sourceOffset count:(int32_t)count __attribute__((swift_name("storeUShortArray(offset:source:sourceOffset:count:)")));
- (void)storeUShortArrayOffset:(int64_t)offset source:(id)source sourceOffset:(int32_t)sourceOffset count_:(int32_t)count __attribute__((swift_name("storeUShortArray(offset:source:sourceOffset:count_:)")));
- (void)storeUShortAtOffset:(int32_t)offset value:(uint16_t)value __attribute__((swift_name("storeUShortAt(offset:value:)")));
- (void)storeUShortAtOffset:(int64_t)offset value_:(uint16_t)value __attribute__((swift_name("storeUShortAt(offset:value_:)")));
@end

@interface GNCMemoryCompanion (Extensions)
- (GNCMemory *)ofPointer:(void *)pointer size:(int32_t)size __attribute__((swift_name("of(pointer:size:)")));
- (GNCMemory *)ofPointer:(void *)pointer size_:(int64_t)size __attribute__((swift_name("of(pointer:size_:)")));
- (GNCMemory *)ofPointer:(void *)pointer size__:(uint64_t)size __attribute__((swift_name("of(pointer:size__:)")));
@end

@interface GNCInput (Extensions)
- (int64_t)doCopyToOutput:(GNCOutput *)output __attribute__((swift_name("doCopyTo(output:)")));
- (int64_t)discard __attribute__((swift_name("discard()")));
- (void)discardExactN_:(int32_t)n __attribute__((swift_name("discardExact(n_:)")));
- (void)discardExactN__:(int64_t)n __attribute__((swift_name("discardExact(n__:)")));
- (int64_t)discardUntilDelimiterDelimiter:(int8_t)delimiter __attribute__((swift_name("discardUntilDelimiter(delimiter:)")));
- (int64_t)discardUntilDelimitersDelimiter1:(int8_t)delimiter1 delimiter2:(int8_t)delimiter2 __attribute__((swift_name("discardUntilDelimiters(delimiter1:delimiter2:)")));
- (unichar)peekCharUtf8 __attribute__((swift_name("peekCharUtf8()")));
- (int32_t)readAvailableDestination:(GNCMemory *)destination destinationOffset:(int32_t)destinationOffset length:(int32_t)length __attribute__((swift_name("readAvailable(destination:destinationOffset:length:)")));
- (int64_t)readAvailableDestination:(GNCMemory *)destination destinationOffset:(int64_t)destinationOffset length_:(int64_t)length __attribute__((swift_name("readAvailable(destination:destinationOffset:length_:)")));
- (int32_t)readAvailableDst:(GNCBuffer *)dst length:(int32_t)length __attribute__((swift_name("readAvailable(dst:length:)")));
- (int32_t)readAvailableDst:(GNCKotlinByteArray *)dst offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readAvailable(dst:offset:length:)")));
- (int32_t)readAvailableDst:(GNCKotlinDoubleArray *)dst offset:(int32_t)offset length_:(int32_t)length __attribute__((swift_name("readAvailable(dst:offset:length_:)")));
- (int32_t)readAvailableDst:(GNCKotlinFloatArray *)dst offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("readAvailable(dst:offset:length__:)")));
- (int32_t)readAvailableDst:(GNCKotlinIntArray *)dst offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("readAvailable(dst:offset:length___:)")));
- (int32_t)readAvailableDst:(GNCKotlinLongArray *)dst offset:(int32_t)offset length____:(int32_t)length __attribute__((swift_name("readAvailable(dst:offset:length____:)")));
- (int32_t)readAvailableDst:(GNCKotlinShortArray *)dst offset:(int32_t)offset length_____:(int32_t)length __attribute__((swift_name("readAvailable(dst:offset:length_____:)")));
- (int32_t)readAvailableDst:(void *)dst offset:(int32_t)offset length______:(int32_t)length __attribute__((swift_name("readAvailable(dst:offset:length______:)")));
- (int64_t)readAvailableDst:(void *)dst offset:(int64_t)offset length_______:(int64_t)length __attribute__((swift_name("readAvailable(dst:offset:length_______:)")));
- (int32_t)readAvailableLittleEndianDst:(GNCKotlinDoubleArray *)dst offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(dst:offset:length:)")));
- (int32_t)readAvailableLittleEndianDst:(GNCKotlinFloatArray *)dst offset:(int32_t)offset length_:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(dst:offset:length_:)")));
- (int32_t)readAvailableLittleEndianDst:(GNCKotlinIntArray *)dst offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(dst:offset:length__:)")));
- (int32_t)readAvailableLittleEndianDst:(GNCKotlinLongArray *)dst offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(dst:offset:length___:)")));
- (int32_t)readAvailableLittleEndianDst:(GNCKotlinShortArray *)dst offset:(int32_t)offset length____:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(dst:offset:length____:)")));
- (int32_t)readAvailableLittleEndianDst:(id)dst offset:(int32_t)offset length_____:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(dst:offset:length_____:)")));
- (int32_t)readAvailableLittleEndianDst:(id)dst offset:(int32_t)offset length______:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(dst:offset:length______:)")));
- (int32_t)readAvailableLittleEndianDst:(id)dst offset:(int32_t)offset length_______:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(dst:offset:length_______:)")));
- (GNCKotlinByteArray *)readBytes __attribute__((swift_name("readBytes()")));
- (GNCKotlinByteArray *)readBytesN_:(int32_t)n __attribute__((swift_name("readBytes(n_:)")));
- (GNCKotlinByteArray *)readBytesOfMin:(int32_t)min max:(int32_t)max __attribute__((swift_name("readBytesOf(min:max:)")));
- (double)readDouble __attribute__((swift_name("readDouble()")));
- (double)readDoubleByteOrder:(GNCByteOrder *)byteOrder __attribute__((swift_name("readDouble(byteOrder:)")));
- (double)readDoubleFallback __attribute__((swift_name("readDoubleFallback()")));
- (double)readDoubleLittleEndian __attribute__((swift_name("readDoubleLittleEndian()")));
- (float)readFloat __attribute__((swift_name("readFloat()")));
- (float)readFloatByteOrder:(GNCByteOrder *)byteOrder __attribute__((swift_name("readFloat(byteOrder:)")));
- (float)readFloatFallback __attribute__((swift_name("readFloatFallback()")));
- (float)readFloatLittleEndian __attribute__((swift_name("readFloatLittleEndian()")));
- (void)readFullyDestination:(GNCMemory *)destination destinationOffset:(int32_t)destinationOffset length:(int32_t)length __attribute__((swift_name("readFully(destination:destinationOffset:length:)")));
- (void)readFullyDestination:(GNCMemory *)destination destinationOffset:(int64_t)destinationOffset length_:(int64_t)length __attribute__((swift_name("readFully(destination:destinationOffset:length_:)")));
- (void)readFullyDst:(GNCBuffer *)dst length:(int32_t)length __attribute__((swift_name("readFully(dst:length:)")));
- (void)readFullyDst:(GNCKotlinByteArray *)dst offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readFully(dst:offset:length:)")));
- (void)readFullyDst:(GNCKotlinDoubleArray *)dst offset:(int32_t)offset length_:(int32_t)length __attribute__((swift_name("readFully(dst:offset:length_:)")));
- (void)readFullyDst:(GNCKotlinFloatArray *)dst offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("readFully(dst:offset:length__:)")));
- (void)readFullyDst:(GNCKotlinIntArray *)dst offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("readFully(dst:offset:length___:)")));
- (void)readFullyDst:(GNCKotlinLongArray *)dst offset:(int32_t)offset length____:(int32_t)length __attribute__((swift_name("readFully(dst:offset:length____:)")));
- (void)readFullyDst:(GNCKotlinShortArray *)dst offset:(int32_t)offset length_____:(int32_t)length __attribute__((swift_name("readFully(dst:offset:length_____:)")));

/**
 * @note annotations
 *   kotlin.ExperimentalUnsignedTypes
*/
- (void)readFullyDst:(id)dst offset:(int32_t)offset length______:(int32_t)length __attribute__((swift_name("readFully(dst:offset:length______:)")));

/**
 * @note annotations
 *   kotlin.ExperimentalUnsignedTypes
*/
- (void)readFullyDst:(id)dst offset:(int32_t)offset length_______:(int32_t)length __attribute__((swift_name("readFully(dst:offset:length_______:)")));

/**
 * @note annotations
 *   kotlin.ExperimentalUnsignedTypes
*/
- (void)readFullyDst:(id)dst offset:(int32_t)offset length________:(int32_t)length __attribute__((swift_name("readFully(dst:offset:length________:)")));

/**
 * @note annotations
 *   kotlin.ExperimentalUnsignedTypes
*/
- (void)readFullyDst:(id)dst offset:(int32_t)offset length_________:(int32_t)length __attribute__((swift_name("readFully(dst:offset:length_________:)")));
- (void)readFullyDst:(void *)dst offset:(int32_t)offset length__________:(int32_t)length __attribute__((swift_name("readFully(dst:offset:length__________:)")));
- (void)readFullyDst:(void *)dst offset:(int64_t)offset length___________:(int64_t)length __attribute__((swift_name("readFully(dst:offset:length___________:)")));
- (void)readFullyLittleEndianDst:(GNCKotlinDoubleArray *)dst offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(dst:offset:length:)")));
- (void)readFullyLittleEndianDst:(GNCKotlinFloatArray *)dst offset:(int32_t)offset length_:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(dst:offset:length_:)")));
- (void)readFullyLittleEndianDst:(GNCKotlinIntArray *)dst offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(dst:offset:length__:)")));
- (void)readFullyLittleEndianDst:(GNCKotlinLongArray *)dst offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(dst:offset:length___:)")));
- (void)readFullyLittleEndianDst:(GNCKotlinShortArray *)dst offset:(int32_t)offset length____:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(dst:offset:length____:)")));
- (void)readFullyLittleEndianDst:(id)dst offset:(int32_t)offset length_____:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(dst:offset:length_____:)")));
- (void)readFullyLittleEndianDst:(id)dst offset:(int32_t)offset length______:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(dst:offset:length______:)")));
- (void)readFullyLittleEndianDst:(id)dst offset:(int32_t)offset length_______:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(dst:offset:length_______:)")));
- (int32_t)readInt __attribute__((swift_name("readInt()")));
- (int32_t)readIntByteOrder:(GNCByteOrder *)byteOrder __attribute__((swift_name("readInt(byteOrder:)")));
- (int32_t)readIntLittleEndian __attribute__((swift_name("readIntLittleEndian()")));
- (int64_t)readLong __attribute__((swift_name("readLong()")));
- (int64_t)readLongByteOrder:(GNCByteOrder *)byteOrder __attribute__((swift_name("readLong(byteOrder:)")));
- (int64_t)readLongLittleEndian __attribute__((swift_name("readLongLittleEndian()")));
- (int16_t)readShort __attribute__((swift_name("readShort()")));
- (int16_t)readShortByteOrder:(GNCByteOrder *)byteOrder __attribute__((swift_name("readShort(byteOrder:)")));
- (int16_t)readShortLittleEndian __attribute__((swift_name("readShortLittleEndian()")));
- (NSString *)readTextCharset:(GNCCharset *)charset max:(int32_t)max __attribute__((swift_name("readText(charset:max:)")));
- (NSString *)readTextDecoder:(GNCCharsetDecoder *)decoder max:(int32_t)max __attribute__((swift_name("readText(decoder:max:)"))) __attribute__((deprecated("Use CharsetDecoder.decode instead")));
- (int32_t)readTextOut:(id<GNCKotlinAppendable>)out charset:(GNCCharset *)charset max:(int32_t)max __attribute__((swift_name("readText(out:charset:max:)")));
- (NSString *)readTextExactCharset:(GNCCharset *)charset n:(int32_t)n __attribute__((swift_name("readTextExact(charset:n:)"))) __attribute__((deprecated("Use readTextExactCharacters instead.")));
- (NSString *)readTextExactBytesCharset:(GNCCharset *)charset bytes:(int32_t)bytes __attribute__((swift_name("readTextExactBytes(charset:bytes:)"))) __attribute__((deprecated("Parameters order is changed.")));
- (NSString *)readTextExactBytesBytesCount:(int32_t)bytesCount charset:(GNCCharset *)charset __attribute__((swift_name("readTextExactBytes(bytesCount:charset:)")));
- (NSString *)readTextExactCharactersCharactersCount:(int32_t)charactersCount charset:(GNCCharset *)charset __attribute__((swift_name("readTextExactCharacters(charactersCount:charset:)")));

/**
 * @note annotations
 *   kotlin.ExperimentalUnsignedTypes
*/
- (uint8_t)readUByte __attribute__((swift_name("readUByte()")));

/**
 * @note annotations
 *   kotlin.ExperimentalUnsignedTypes
*/
- (uint32_t)readUInt __attribute__((swift_name("readUInt()")));

/**
 * @note annotations
 *   kotlin.ExperimentalUnsignedTypes
*/
- (uint64_t)readULong __attribute__((swift_name("readULong()")));

/**
 * @note annotations
 *   kotlin.ExperimentalUnsignedTypes
*/
- (uint16_t)readUShort __attribute__((swift_name("readUShort()")));
- (NSString * _Nullable)readUTF8LineEstimate:(int32_t)estimate limit_:(int32_t)limit __attribute__((swift_name("readUTF8Line(estimate:limit_:)")));
- (BOOL)readUTF8LineToOut:(id<GNCKotlinAppendable>)out limit:(int32_t)limit __attribute__((swift_name("readUTF8LineTo(out:limit:)")));
- (NSString *)readUTF8UntilDelimiterDelimiters:(NSString *)delimiters limit:(int32_t)limit __attribute__((swift_name("readUTF8UntilDelimiter(delimiters:limit:)")));
- (int32_t)readUTF8UntilDelimiterToOut:(GNCOutput *)out delimiters:(NSString *)delimiters limit:(int32_t)limit __attribute__((swift_name("readUTF8UntilDelimiterTo(out:delimiters:limit:)")));
- (int32_t)readUTF8UntilDelimiterToOut:(id<GNCKotlinAppendable>)out delimiters:(NSString *)delimiters limit_:(int32_t)limit __attribute__((swift_name("readUTF8UntilDelimiterTo(out:delimiters:limit_:)")));
- (int64_t)readUntilDelimiterDelimiter:(int8_t)delimiter dst:(GNCOutput *)dst __attribute__((swift_name("readUntilDelimiter(delimiter:dst:)")));
- (int32_t)readUntilDelimiterDelimiter:(int8_t)delimiter dst:(GNCKotlinByteArray *)dst offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readUntilDelimiter(delimiter:dst:offset:length:)")));
- (int64_t)readUntilDelimitersDelimiter1:(int8_t)delimiter1 delimiter2:(int8_t)delimiter2 dst:(GNCOutput *)dst __attribute__((swift_name("readUntilDelimiters(delimiter1:delimiter2:dst:)")));
- (int32_t)readUntilDelimitersDelimiter1:(int8_t)delimiter1 delimiter2:(int8_t)delimiter2 dst:(GNCKotlinByteArray *)dst offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readUntilDelimiters(delimiter1:delimiter2:dst:offset:length:)")));
- (void)takeWhileBlock:(GNCBoolean *(^)(GNCBuffer *))block __attribute__((swift_name("takeWhile(block:)")));
@property (readonly, getter=isEmpty__) BOOL isEmpty_ __attribute__((swift_name("isEmpty_"))) __attribute__((deprecated("Use endOfInput property instead")));
@property (readonly) BOOL isNotEmpty_ __attribute__((swift_name("isNotEmpty_"))) __attribute__((deprecated("This makes no sense for streaming inputs. Some use-cases are covered by endOfInput property")));
@end

@interface GNCBuffer (Extensions)
- (GNCBuffer *)appendC:(unichar)c __attribute__((swift_name("append(c:)"))) __attribute__((unavailable("This is no longer supported. Use a packet builder to append characters instead.")));
- (GNCBuffer *)appendCsq:(GNCKotlinCharArray *)csq start:(int32_t)start end:(int32_t)end __attribute__((swift_name("append(csq:start:end:)"))) __attribute__((unavailable("This is no longer supported. Use a packet builder to append characters instead.")));
- (GNCBuffer *)appendCsq:(id _Nullable)csq __attribute__((swift_name("append(csq:)"))) __attribute__((unavailable("This is no longer supported. Use a packet builder to append characters instead.")));
- (GNCBuffer *)appendCsq:(id _Nullable)csq start:(int32_t)start end_:(int32_t)end __attribute__((swift_name("append(csq:start:end_:)"))) __attribute__((unavailable("This is no longer supported. Use a packet builder to append characters instead.")));
- (BOOL)canRead __attribute__((swift_name("canRead()")));
- (BOOL)canWrite __attribute__((swift_name("canWrite()")));
- (void)fillTimes:(int32_t)times value:(int8_t)value __attribute__((swift_name("fill(times:value:)")));
- (void)fillTimes:(int32_t)times value_:(uint8_t)value __attribute__((swift_name("fill(times:value_:)")));
- (void)fillN:(int64_t)n v:(int8_t)v __attribute__((swift_name("fill(n:v:)"))) __attribute__((deprecated("Use fill with n with type Int")));
- (void)flush_ __attribute__((swift_name("flush_()"))) __attribute__((unavailable("Does nothing.")));
- (void)forEachBlock:(void (^)(GNCByte *))block __attribute__((swift_name("forEach(block:)")));
- (GNCBuffer *)makeView __attribute__((swift_name("makeView()"))) __attribute__((unavailable("Use duplicate instead")));
- (void)pushBackN:(int32_t)n __attribute__((swift_name("pushBack(n:)"))) __attribute__((unavailable("Use rewind instead")));
- (int32_t)readBlock:(GNCInt *(^)(GNCMemory *, GNCInt *, GNCInt *))block __attribute__((swift_name("read(block:)")));
- (int32_t)readAvailableDst:(GNCBuffer *)dst length:(int32_t)length __attribute__((swift_name("readAvailable(dst:length:)")));
- (int32_t)readAvailableDestination:(GNCKotlinByteArray *)destination offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readAvailable(destination:offset:length:)")));
- (int32_t)readAvailableDestination:(GNCKotlinDoubleArray *)destination offset:(int32_t)offset length_:(int32_t)length __attribute__((swift_name("readAvailable(destination:offset:length_:)")));
- (int32_t)readAvailableDestination:(GNCKotlinFloatArray *)destination offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("readAvailable(destination:offset:length__:)")));
- (int32_t)readAvailableDestination:(GNCKotlinIntArray *)destination offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("readAvailable(destination:offset:length___:)")));
- (int32_t)readAvailableDestination:(GNCKotlinLongArray *)destination offset:(int32_t)offset length____:(int32_t)length __attribute__((swift_name("readAvailable(destination:offset:length____:)")));
- (int32_t)readAvailableDestination:(GNCKotlinShortArray *)destination offset:(int32_t)offset length_____:(int32_t)length __attribute__((swift_name("readAvailable(destination:offset:length_____:)")));
- (int32_t)readAvailableDestination:(id)destination offset:(int32_t)offset length______:(int32_t)length __attribute__((swift_name("readAvailable(destination:offset:length______:)")));
- (int32_t)readAvailableDestination:(id)destination offset:(int32_t)offset length_______:(int32_t)length __attribute__((swift_name("readAvailable(destination:offset:length_______:)")));
- (int32_t)readAvailableDestination:(id)destination offset:(int32_t)offset length________:(int32_t)length __attribute__((swift_name("readAvailable(destination:offset:length________:)")));
- (int32_t)readAvailableDestination:(id)destination offset:(int32_t)offset length_________:(int32_t)length __attribute__((swift_name("readAvailable(destination:offset:length_________:)")));
- (int32_t)readAvailablePointer:(void *)pointer offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readAvailable(pointer:offset:length:)")));
- (int32_t)readAvailablePointer:(void *)pointer offset:(int64_t)offset length_:(int32_t)length __attribute__((swift_name("readAvailable(pointer:offset:length_:)")));
- (int32_t)readAvailableLittleEndianDst:(GNCKotlinDoubleArray *)dst offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(dst:offset:length:)")));
- (int32_t)readAvailableLittleEndianDst:(GNCKotlinFloatArray *)dst offset:(int32_t)offset length_:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(dst:offset:length_:)")));
- (int32_t)readAvailableLittleEndianDst:(GNCKotlinIntArray *)dst offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(dst:offset:length__:)")));
- (int32_t)readAvailableLittleEndianDst:(GNCKotlinLongArray *)dst offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(dst:offset:length___:)")));
- (int32_t)readAvailableLittleEndianDst:(GNCKotlinShortArray *)dst offset:(int32_t)offset length____:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(dst:offset:length____:)")));
- (int32_t)readAvailableLittleEndianDst:(id)dst offset:(int32_t)offset length_____:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(dst:offset:length_____:)")));
- (int32_t)readAvailableLittleEndianDst:(id)dst offset:(int32_t)offset length______:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(dst:offset:length______:)")));
- (int32_t)readAvailableLittleEndianDst:(id)dst offset:(int32_t)offset length_______:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(dst:offset:length_______:)")));
- (GNCKotlinByteArray *)readBytesCount:(int32_t)count __attribute__((swift_name("readBytes(count:)")));
- (int32_t)readDirectBlock:(GNCInt *(^)(id))block __attribute__((swift_name("readDirect(block:)")));
- (double)readDouble __attribute__((swift_name("readDouble()")));
- (double)readDoubleLittleEndian __attribute__((swift_name("readDoubleLittleEndian()")));
- (float)readFloat __attribute__((swift_name("readFloat()")));
- (float)readFloatLittleEndian __attribute__((swift_name("readFloatLittleEndian()")));
- (int32_t)readFullyDst:(GNCBuffer *)dst length:(int32_t)length __attribute__((swift_name("readFully(dst:length:)")));
- (void)readFullyDst:(GNCKotlinArray<GNCByte *> *)dst offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readFully(dst:offset:length:)")));
- (void)readFullyDestination:(GNCKotlinByteArray *)destination offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readFully(destination:offset:length:)")));
- (void)readFullyDestination:(GNCKotlinDoubleArray *)destination offset:(int32_t)offset length_:(int32_t)length __attribute__((swift_name("readFully(destination:offset:length_:)")));
- (void)readFullyDestination:(GNCKotlinFloatArray *)destination offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("readFully(destination:offset:length__:)")));
- (void)readFullyDestination:(GNCKotlinIntArray *)destination offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("readFully(destination:offset:length___:)")));
- (void)readFullyDestination:(GNCKotlinLongArray *)destination offset:(int32_t)offset length____:(int32_t)length __attribute__((swift_name("readFully(destination:offset:length____:)")));
- (void)readFullyDestination:(GNCKotlinShortArray *)destination offset:(int32_t)offset length_____:(int32_t)length __attribute__((swift_name("readFully(destination:offset:length_____:)")));
- (void)readFullyDestination:(id)destination offset:(int32_t)offset length______:(int32_t)length __attribute__((swift_name("readFully(destination:offset:length______:)")));
- (void)readFullyDestination:(id)destination offset:(int32_t)offset length_______:(int32_t)length __attribute__((swift_name("readFully(destination:offset:length_______:)")));
- (void)readFullyDestination:(id)destination offset:(int32_t)offset length________:(int32_t)length __attribute__((swift_name("readFully(destination:offset:length________:)")));
- (void)readFullyDestination:(id)destination offset:(int32_t)offset length_________:(int32_t)length __attribute__((swift_name("readFully(destination:offset:length_________:)")));
- (void)readFullyPointer:(void *)pointer offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readFully(pointer:offset:length:)")));
- (void)readFullyPointer:(void *)pointer offset:(int64_t)offset length_:(int32_t)length __attribute__((swift_name("readFully(pointer:offset:length_:)")));
- (void)readFullyLittleEndianDst:(GNCKotlinDoubleArray *)dst offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(dst:offset:length:)")));
- (void)readFullyLittleEndianDst:(GNCKotlinFloatArray *)dst offset:(int32_t)offset length_:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(dst:offset:length_:)")));
- (void)readFullyLittleEndianDst:(GNCKotlinIntArray *)dst offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(dst:offset:length__:)")));
- (void)readFullyLittleEndianDst:(GNCKotlinLongArray *)dst offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(dst:offset:length___:)")));
- (void)readFullyLittleEndianDst:(GNCKotlinShortArray *)dst offset:(int32_t)offset length____:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(dst:offset:length____:)")));
- (void)readFullyLittleEndianDst:(id)dst offset:(int32_t)offset length_____:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(dst:offset:length_____:)")));
- (void)readFullyLittleEndianDst:(id)dst offset:(int32_t)offset length______:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(dst:offset:length______:)")));
- (void)readFullyLittleEndianDst:(id)dst offset:(int32_t)offset length_______:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(dst:offset:length_______:)")));
- (int32_t)readInt __attribute__((swift_name("readInt()")));
- (int32_t)readIntLittleEndian __attribute__((swift_name("readIntLittleEndian()")));
- (int64_t)readLong __attribute__((swift_name("readLong()")));
- (int64_t)readLongLittleEndian __attribute__((swift_name("readLongLittleEndian()")));
- (int16_t)readShort __attribute__((swift_name("readShort()")));
- (int16_t)readShortLittleEndian __attribute__((swift_name("readShortLittleEndian()")));
- (NSString *)readTextCharset:(GNCCharset *)charset max:(int32_t)max __attribute__((swift_name("readText(charset:max:)")));
- (int32_t)readTextDecoder:(GNCCharsetDecoder *)decoder out:(id<GNCKotlinAppendable>)out lastBuffer:(BOOL)lastBuffer max:(int32_t)max __attribute__((swift_name("readText(decoder:out:lastBuffer:max:)"))) __attribute__((unavailable("This is no longer supported. Read from a packet instead.")));
- (uint8_t)readUByte __attribute__((swift_name("readUByte()")));
- (uint32_t)readUInt __attribute__((swift_name("readUInt()")));
- (uint64_t)readULong __attribute__((swift_name("readULong()")));
- (uint16_t)readUShort __attribute__((swift_name("readUShort()")));
- (int32_t)tryPeek __attribute__((swift_name("tryPeek()"))) __attribute__((unavailable("Use tryPeekByte instead")));
- (int32_t)writeBlock:(GNCInt *(^)(GNCMemory *, GNCInt *, GNCInt *))block __attribute__((swift_name("write(block:)")));
- (int32_t)writeDirectBlock:(GNCInt *(^)(id))block __attribute__((swift_name("writeDirect(block:)")));
- (void)writeDoubleValue:(double)value __attribute__((swift_name("writeDouble(value:)")));
- (void)writeDoubleLittleEndianValue:(double)value __attribute__((swift_name("writeDoubleLittleEndian(value:)")));
- (void)writeFloatValue:(float)value __attribute__((swift_name("writeFloat(value:)")));
- (void)writeFloatLittleEndianValue:(float)value __attribute__((swift_name("writeFloatLittleEndian(value:)")));
- (void)writeFullySrc:(GNCBuffer *)src __attribute__((swift_name("writeFully(src:)")));
- (void)writeFullySrc:(GNCBuffer *)src length:(int32_t)length __attribute__((swift_name("writeFully(src:length:)")));
- (void)writeFullySource:(GNCKotlinByteArray *)source offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("writeFully(source:offset:length:)")));
- (void)writeFullySource:(GNCKotlinDoubleArray *)source offset:(int32_t)offset length_:(int32_t)length __attribute__((swift_name("writeFully(source:offset:length_:)")));
- (void)writeFullySource:(GNCKotlinFloatArray *)source offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("writeFully(source:offset:length__:)")));
- (void)writeFullySource:(GNCKotlinIntArray *)source offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("writeFully(source:offset:length___:)")));
- (void)writeFullySource:(GNCKotlinLongArray *)source offset:(int32_t)offset length____:(int32_t)length __attribute__((swift_name("writeFully(source:offset:length____:)")));
- (void)writeFullySource:(GNCKotlinShortArray *)source offset:(int32_t)offset length_____:(int32_t)length __attribute__((swift_name("writeFully(source:offset:length_____:)")));
- (void)writeFullySource:(id)source offset:(int32_t)offset length______:(int32_t)length __attribute__((swift_name("writeFully(source:offset:length______:)")));
- (void)writeFullySource:(id)source offset:(int32_t)offset length_______:(int32_t)length __attribute__((swift_name("writeFully(source:offset:length_______:)")));
- (void)writeFullySource:(id)source offset:(int32_t)offset length________:(int32_t)length __attribute__((swift_name("writeFully(source:offset:length________:)")));
- (void)writeFullySource:(id)source offset:(int32_t)offset length_________:(int32_t)length __attribute__((swift_name("writeFully(source:offset:length_________:)")));
- (void)writeFullyPointer:(void *)pointer offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("writeFully(pointer:offset:length:)")));
- (void)writeFullyPointer:(void *)pointer offset:(int64_t)offset length_:(int32_t)length __attribute__((swift_name("writeFully(pointer:offset:length_:)")));
- (void)writeFullyLittleEndianSource:(GNCKotlinDoubleArray *)source offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(source:offset:length:)")));
- (void)writeFullyLittleEndianSource:(GNCKotlinFloatArray *)source offset:(int32_t)offset length_:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(source:offset:length_:)")));
- (void)writeFullyLittleEndianSource:(GNCKotlinIntArray *)source offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(source:offset:length__:)")));
- (void)writeFullyLittleEndianSource:(GNCKotlinLongArray *)source offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(source:offset:length___:)")));
- (void)writeFullyLittleEndianSource:(GNCKotlinShortArray *)source offset:(int32_t)offset length____:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(source:offset:length____:)")));
- (void)writeFullyLittleEndianSource:(id)source offset:(int32_t)offset length_____:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(source:offset:length_____:)")));
- (void)writeFullyLittleEndianSource:(id)source offset:(int32_t)offset length______:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(source:offset:length______:)")));
- (void)writeFullyLittleEndianSource:(id)source offset:(int32_t)offset length_______:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(source:offset:length_______:)")));
- (void)writeIntValue:(int32_t)value __attribute__((swift_name("writeInt(value:)")));
- (void)writeIntLittleEndianValue:(int32_t)value __attribute__((swift_name("writeIntLittleEndian(value:)")));
- (void)writeLongValue:(int64_t)value __attribute__((swift_name("writeLong(value:)")));
- (void)writeLongLittleEndianValue:(int64_t)value __attribute__((swift_name("writeLongLittleEndian(value:)")));
- (void)writeShortValue:(int16_t)value __attribute__((swift_name("writeShort(value:)")));
- (void)writeShortLittleEndianValue:(int16_t)value __attribute__((swift_name("writeShortLittleEndian(value:)")));
- (void)writeUByteValue:(uint8_t)value __attribute__((swift_name("writeUByte(value:)")));
- (void)writeUIntValue:(uint32_t)value __attribute__((swift_name("writeUInt(value:)")));
- (void)writeULongValue:(uint64_t)value __attribute__((swift_name("writeULong(value:)")));
- (void)writeUShortValue:(uint16_t)value __attribute__((swift_name("writeUShort(value:)")));
@end

@interface GNCOutput (Extensions)
- (id<GNCKotlinAppendable>)appendCsq:(GNCKotlinCharArray *)csq start:(int32_t)start end_:(int32_t)end __attribute__((swift_name("append(csq:start:end_:)")));
- (id<GNCKotlinAppendable>)appendCsq:(id)csq start:(int32_t)start end__:(int32_t)end __attribute__((swift_name("append(csq:start:end__:)")));
- (void)fillTimes:(int64_t)times value:(int8_t)value __attribute__((swift_name("fill(times:value:)")));
- (void)writeDoubleValue:(double)value __attribute__((swift_name("writeDouble(value:)")));
- (void)writeDoubleValue:(double)value byteOrder:(GNCByteOrder *)byteOrder __attribute__((swift_name("writeDouble(value:byteOrder:)")));
- (void)writeDoubleLittleEndianValue:(double)value __attribute__((swift_name("writeDoubleLittleEndian(value:)")));
- (void)writeFloatValue:(float)value __attribute__((swift_name("writeFloat(value:)")));
- (void)writeFloatValue:(float)value byteOrder:(GNCByteOrder *)byteOrder __attribute__((swift_name("writeFloat(value:byteOrder:)")));
- (void)writeFloatLittleEndianValue:(float)value __attribute__((swift_name("writeFloatLittleEndian(value:)")));
- (void)writeFullySrc:(GNCMemory *)src offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("writeFully(src:offset:length:)")));
- (void)writeFullySrc:(GNCMemory *)src offset:(int64_t)offset length_:(int64_t)length __attribute__((swift_name("writeFully(src:offset:length_:)")));
- (void)writeFullySrc:(GNCBuffer *)src length:(int32_t)length __attribute__((swift_name("writeFully(src:length:)")));
- (void)writeFullySrc:(GNCKotlinByteArray *)src offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("writeFully(src:offset:length__:)")));
- (void)writeFullySrc:(GNCKotlinDoubleArray *)src offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("writeFully(src:offset:length___:)")));
- (void)writeFullySrc:(GNCKotlinFloatArray *)src offset:(int32_t)offset length____:(int32_t)length __attribute__((swift_name("writeFully(src:offset:length____:)")));
- (void)writeFullySrc:(GNCKotlinIntArray *)src offset:(int32_t)offset length_____:(int32_t)length __attribute__((swift_name("writeFully(src:offset:length_____:)")));
- (void)writeFullySrc:(GNCKotlinLongArray *)src offset:(int32_t)offset length______:(int32_t)length __attribute__((swift_name("writeFully(src:offset:length______:)")));
- (void)writeFullySrc:(GNCKotlinShortArray *)src offset:(int32_t)offset length_______:(int32_t)length __attribute__((swift_name("writeFully(src:offset:length_______:)")));

/**
 * @note annotations
 *   kotlin.ExperimentalUnsignedTypes
*/
- (void)writeFullyArray:(id)array offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("writeFully(array:offset:length:)")));

/**
 * @note annotations
 *   kotlin.ExperimentalUnsignedTypes
*/
- (void)writeFullyArray:(id)array offset:(int32_t)offset length_:(int32_t)length __attribute__((swift_name("writeFully(array:offset:length_:)")));

/**
 * @note annotations
 *   kotlin.ExperimentalUnsignedTypes
*/
- (void)writeFullyArray:(id)array offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("writeFully(array:offset:length__:)")));

/**
 * @note annotations
 *   kotlin.ExperimentalUnsignedTypes
*/
- (void)writeFullyArray:(id)array offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("writeFully(array:offset:length___:)")));
- (void)writeFullySrc:(void *)src offset:(int32_t)offset length________:(int32_t)length __attribute__((swift_name("writeFully(src:offset:length________:)")));
- (void)writeFullySrc:(void *)src offset:(int64_t)offset length_________:(int64_t)length __attribute__((swift_name("writeFully(src:offset:length_________:)")));
- (void)writeFullyLittleEndianSource:(GNCKotlinDoubleArray *)source offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(source:offset:length:)")));
- (void)writeFullyLittleEndianSource:(GNCKotlinFloatArray *)source offset:(int32_t)offset length_:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(source:offset:length_:)")));
- (void)writeFullyLittleEndianSource:(GNCKotlinIntArray *)source offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(source:offset:length__:)")));
- (void)writeFullyLittleEndianSource:(GNCKotlinLongArray *)source offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(source:offset:length___:)")));
- (void)writeFullyLittleEndianSource:(GNCKotlinShortArray *)source offset:(int32_t)offset length____:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(source:offset:length____:)")));
- (void)writeFullyLittleEndianSource:(id)source offset:(int32_t)offset length_____:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(source:offset:length_____:)")));
- (void)writeFullyLittleEndianSource:(id)source offset:(int32_t)offset length______:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(source:offset:length______:)")));
- (void)writeFullyLittleEndianSource:(id)source offset:(int32_t)offset length_______:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(source:offset:length_______:)")));
- (void)writeIntValue:(int32_t)value __attribute__((swift_name("writeInt(value:)")));
- (void)writeIntValue:(int32_t)value byteOrder:(GNCByteOrder *)byteOrder __attribute__((swift_name("writeInt(value:byteOrder:)")));
- (void)writeIntLittleEndianValue:(int32_t)value __attribute__((swift_name("writeIntLittleEndian(value:)")));
- (void)writeLongValue:(int64_t)value __attribute__((swift_name("writeLong(value:)")));
- (void)writeLongValue:(int64_t)value byteOrder:(GNCByteOrder *)byteOrder __attribute__((swift_name("writeLong(value:byteOrder:)")));
- (void)writeLongLittleEndianValue:(int64_t)value __attribute__((swift_name("writeLongLittleEndian(value:)")));
- (void)writeShortValue:(int16_t)value __attribute__((swift_name("writeShort(value:)")));
- (void)writeShortValue:(int16_t)value byteOrder:(GNCByteOrder *)byteOrder __attribute__((swift_name("writeShort(value:byteOrder:)")));
- (void)writeShortLittleEndianValue:(int16_t)value __attribute__((swift_name("writeShortLittleEndian(value:)")));
- (void)writeTextText:(GNCKotlinCharArray *)text fromIndex:(int32_t)fromIndex toIndex:(int32_t)toIndex charset:(GNCCharset *)charset __attribute__((swift_name("writeText(text:fromIndex:toIndex:charset:)")));
- (void)writeTextText:(id)text fromIndex:(int32_t)fromIndex toIndex:(int32_t)toIndex charset_:(GNCCharset *)charset __attribute__((swift_name("writeText(text:fromIndex:toIndex:charset_:)")));

/**
 * @note annotations
 *   kotlin.ExperimentalUnsignedTypes
*/
- (void)writeUByteV:(uint8_t)v __attribute__((swift_name("writeUByte(v:)")));

/**
 * @note annotations
 *   kotlin.ExperimentalUnsignedTypes
*/
- (void)writeUIntV:(uint32_t)v __attribute__((swift_name("writeUInt(v:)")));

/**
 * @note annotations
 *   kotlin.ExperimentalUnsignedTypes
*/
- (void)writeULongV:(uint64_t)v __attribute__((swift_name("writeULong(v:)")));

/**
 * @note annotations
 *   kotlin.ExperimentalUnsignedTypes
*/
- (void)writeUShortV:(uint16_t)v __attribute__((swift_name("writeUShort(v:)")));
@end

@interface GNCChunkBuffer (Extensions)
- (GNCChunkBuffer *)makeView_ __attribute__((swift_name("makeView_()"))) __attribute__((unavailable("Use duplicate instead")));
- (int32_t)readAvailableDestination:(GNCKotlinByteArray *)destination offset:(int32_t)offset length__________:(int32_t)length __attribute__((swift_name("readAvailable(destination:offset:length__________:)")));
- (double)readDouble_ __attribute__((swift_name("readDouble_()")));
- (float)readFloat_ __attribute__((swift_name("readFloat_()")));
- (void)readFullyDestination:(GNCKotlinByteArray *)destination offset:(int32_t)offset length__________:(int32_t)length __attribute__((swift_name("readFully(destination:offset:length__________:)")));
- (int32_t)readInt_ __attribute__((swift_name("readInt_()")));
- (int64_t)readLong_ __attribute__((swift_name("readLong_()")));
- (int16_t)readShort_ __attribute__((swift_name("readShort_()")));
- (uint8_t)readUByte_ __attribute__((swift_name("readUByte_()")));
- (uint32_t)readUInt_ __attribute__((swift_name("readUInt_()")));
- (uint64_t)readULong_ __attribute__((swift_name("readULong_()")));
- (uint16_t)readUShort_ __attribute__((swift_name("readUShort_()")));
- (void)writeDoubleValue_:(double)value __attribute__((swift_name("writeDouble(value_:)")));
- (void)writeFloatValue_:(float)value __attribute__((swift_name("writeFloat(value_:)")));
- (void)writeFullySource:(GNCKotlinByteArray *)source offset:(int32_t)offset length__________:(int32_t)length __attribute__((swift_name("writeFully(source:offset:length__________:)")));
- (void)writeIntValue_:(int32_t)value __attribute__((swift_name("writeInt(value_:)")));
- (void)writeLongValue_:(int64_t)value __attribute__((swift_name("writeLong(value_:)")));
- (void)writeShortValue_:(int16_t)value __attribute__((swift_name("writeShort(value_:)")));
- (void)writeUByteValue_:(uint8_t)value __attribute__((swift_name("writeUByte(value_:)")));
- (void)writeUIntValue_:(uint32_t)value __attribute__((swift_name("writeUInt(value_:)")));
- (void)writeULongValue_:(uint64_t)value __attribute__((swift_name("writeULong(value_:)")));
- (void)writeUShortValue_:(uint16_t)value __attribute__((swift_name("writeUShort(value_:)")));
@end

@interface GNCBytePacketBuilder (Extensions)
- (id _Nullable)previewBlock:(id _Nullable (^)(GNCByteReadPacket *))block __attribute__((swift_name("preview(block:)")));
- (void)reset __attribute__((swift_name("reset()")));
- (void)writeFullySrc:(void *)src size:(int32_t)size __attribute__((swift_name("writeFully(src:size:)")));
@end

@interface GNCCharsetDecoder (Extensions)
- (NSString *)decodeInput:(GNCInput *)input max:(int32_t)max __attribute__((swift_name("decode(input:max:)")));
- (int32_t)decodeInput:(GNCInput *)input dst:(id<GNCKotlinAppendable>)dst max:(int32_t)max __attribute__((swift_name("decode(input:dst:max:)")));
- (NSString *)decodeExactBytesInput:(GNCInput *)input inputLength:(int32_t)inputLength __attribute__((swift_name("decodeExactBytes(input:inputLength:)")));
@property (readonly) GNCCharset *charset __attribute__((swift_name("charset")));
@end

@interface GNCCharsetEncoder (Extensions)
- (void)encodeInput:(GNCKotlinCharArray *)input fromIndex:(int32_t)fromIndex toIndex:(int32_t)toIndex dst:(GNCOutput *)dst __attribute__((swift_name("encode(input:fromIndex:toIndex:dst:)")));
- (GNCByteReadPacket *)encodeInput:(id)input fromIndex:(int32_t)fromIndex toIndex:(int32_t)toIndex __attribute__((swift_name("encode(input:fromIndex:toIndex:)")));
- (void)encodeInput:(id)input fromIndex:(int32_t)fromIndex toIndex:(int32_t)toIndex dst_:(GNCOutput *)dst __attribute__((swift_name("encode(input:fromIndex:toIndex:dst_:)"))) __attribute__((unavailable("Use writeText on Output instead.")));
- (GNCKotlinByteArray *)encodeToByteArrayInput:(id)input fromIndex:(int32_t)fromIndex toIndex:(int32_t)toIndex __attribute__((swift_name("encodeToByteArray(input:fromIndex:toIndex:)")));
- (GNCKotlinByteArray *)encodeToByteArrayImplInput:(id)input fromIndex:(int32_t)fromIndex toIndex:(int32_t)toIndex __attribute__((swift_name("encodeToByteArrayImpl(input:fromIndex:toIndex:)"))) __attribute__((unavailable("Internal API. Will be hidden in future releases. Use encodeToByteArray instead.")));
- (GNCByteReadPacket *)encodeUTF8Input:(GNCByteReadPacket *)input __attribute__((swift_name("encodeUTF8(input:)")));
- (void)encodeUTF8Input:(GNCByteReadPacket *)input dst:(GNCOutput *)dst __attribute__((swift_name("encodeUTF8(input:dst:)")));
@property (readonly) GNCCharset *charset __attribute__((swift_name("charset")));
@end

@interface GNCCharset (Extensions)
@property (readonly) NSString *name_ __attribute__((swift_name("name_")));
@end

@interface GNCCoroutineDispatcher (Extensions)

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeBlock:(id<GNCKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(block:completionHandler:)")));
@end

@interface GNCSharingStartedCompanion (Extensions)
- (id<GNCSharingStarted>)WhileSubscribedStopTimeout:(int64_t)stopTimeout replayExpiration:(int64_t)replayExpiration __attribute__((swift_name("WhileSubscribed(stopTimeout:replayExpiration:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinArray")))
@interface GNCKotlinArray<T> : GNCBase
+ (instancetype)arrayWithSize:(int32_t)size init:(T _Nullable (^)(GNCInt *))init __attribute__((swift_name("init(size:init:)")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (T _Nullable)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (id<GNCKotlinIterator>)iterator __attribute__((swift_name("iterator()")));
- (void)setIndex:(int32_t)index value:(T _Nullable)value __attribute__((swift_name("set(index:value:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end

@interface GNCKotlinArray (Extensions)
- (id<GNCFlow>)asFlow __attribute__((swift_name("asFlow()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinIntArray")))
@interface GNCKotlinIntArray : GNCBase
+ (instancetype)arrayWithSize:(int32_t)size __attribute__((swift_name("init(size:)")));
+ (instancetype)arrayWithSize:(int32_t)size init:(GNCInt *(^)(GNCInt *))init __attribute__((swift_name("init(size:init:)")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (int32_t)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (GNCKotlinIntIterator *)iterator __attribute__((swift_name("iterator()")));
- (void)setIndex:(int32_t)index value:(int32_t)value __attribute__((swift_name("set(index:value:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end

@interface GNCKotlinIntArray (Extensions)
- (id<GNCFlow>)asFlow __attribute__((swift_name("asFlow()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinLongArray")))
@interface GNCKotlinLongArray : GNCBase
+ (instancetype)arrayWithSize:(int32_t)size __attribute__((swift_name("init(size:)")));
+ (instancetype)arrayWithSize:(int32_t)size init:(GNCLong *(^)(GNCInt *))init __attribute__((swift_name("init(size:init:)")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (int64_t)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (GNCKotlinLongIterator *)iterator __attribute__((swift_name("iterator()")));
- (void)setIndex:(int32_t)index value:(int64_t)value __attribute__((swift_name("set(index:value:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end

@interface GNCKotlinLongArray (Extensions)
- (id<GNCFlow>)asFlow __attribute__((swift_name("asFlow()")));
@end

__attribute__((swift_name("KotlinIntProgression")))
@interface GNCKotlinIntProgression : GNCBase <GNCKotlinIterable>
@property (class, readonly, getter=companion) GNCKotlinIntProgressionCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (GNCKotlinIntIterator *)iterator __attribute__((swift_name("iterator()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t first __attribute__((swift_name("first")));
@property (readonly) int32_t last __attribute__((swift_name("last")));
@property (readonly) int32_t step __attribute__((swift_name("step")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinIntRange")))
@interface GNCKotlinIntRange : GNCKotlinIntProgression <GNCKotlinClosedRange, GNCKotlinOpenEndRange>
- (instancetype)initWithStart:(int32_t)start endInclusive:(int32_t)endInclusive __attribute__((swift_name("init(start:endInclusive:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCKotlinIntRangeCompanion *companion __attribute__((swift_name("companion")));
- (BOOL)containsValue:(GNCInt *)value __attribute__((swift_name("contains(value:)")));
- (BOOL)containsValue_:(GNCInt *)value __attribute__((swift_name("contains(value_:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (NSString *)description __attribute__((swift_name("description()")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.7")
 *   kotlin.ExperimentalStdlibApi
*/
@property (readonly) GNCInt *endExclusive __attribute__((swift_name("endExclusive"))) __attribute__((deprecated("Can throw an exception when it's impossible to represent the value with Int type, for example, when the range includes MAX_VALUE. It's recommended to use 'endInclusive' property that doesn't throw.")));
@property (readonly) GNCInt *endInclusive __attribute__((swift_name("endInclusive")));
@property (readonly, getter=start__) GNCInt *start __attribute__((swift_name("start")));
@end

@interface GNCKotlinIntRange (Extensions)
- (id<GNCFlow>)asFlow __attribute__((swift_name("asFlow()")));
@end

@interface GNCJsonPrimitive (Extensions)
@property (readonly) BOOL boolean __attribute__((swift_name("boolean")));
@property (readonly) GNCBoolean * _Nullable booleanOrNull __attribute__((swift_name("booleanOrNull")));
@property (readonly) NSString * _Nullable contentOrNull __attribute__((swift_name("contentOrNull")));
@property (readonly, getter=double) double double_ __attribute__((swift_name("double_")));
@property (readonly) GNCDouble * _Nullable doubleOrNull __attribute__((swift_name("doubleOrNull")));
@property (readonly, getter=float) float float_ __attribute__((swift_name("float_")));
@property (readonly) GNCFloat * _Nullable floatOrNull __attribute__((swift_name("floatOrNull")));
@property (readonly, getter=int) int32_t int_ __attribute__((swift_name("int_")));
@property (readonly) GNCInt * _Nullable intOrNull __attribute__((swift_name("intOrNull")));
@property (readonly, getter=long) int64_t long_ __attribute__((swift_name("long_")));
@property (readonly) GNCLong * _Nullable longOrNull __attribute__((swift_name("longOrNull")));
@end

@interface GNCJsonElement (Extensions)
@property (readonly) NSArray<GNCJsonElement *> *jsonArray __attribute__((swift_name("jsonArray")));
@property (readonly) GNCJsonNull *jsonNull __attribute__((swift_name("jsonNull")));
@property (readonly) NSDictionary<NSString *, GNCJsonElement *> *jsonObject __attribute__((swift_name("jsonObject")));
@property (readonly) GNCJsonPrimitive *jsonPrimitive __attribute__((swift_name("jsonPrimitive")));
@end

@interface GNCJsonArrayBuilder (Extensions)
- (BOOL)addValue:(GNCBoolean * _Nullable)value __attribute__((swift_name("add(value:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (BOOL)addValue_:(GNCKotlinNothing * _Nullable)value __attribute__((swift_name("add(value_:)")));
- (BOOL)addValue__:(id _Nullable)value __attribute__((swift_name("add(value__:)")));
- (BOOL)addValue___:(NSString * _Nullable)value __attribute__((swift_name("add(value___:)")));
- (BOOL)addJsonArrayBuilderAction:(void (^)(GNCJsonArrayBuilder *))builderAction __attribute__((swift_name("addJsonArray(builderAction:)")));
- (BOOL)addJsonObjectBuilderAction:(void (^)(GNCJsonObjectBuilder *))builderAction __attribute__((swift_name("addJsonObject(builderAction:)")));
@end

@interface GNCJson (Extensions)
- (id _Nullable)decodeFromJsonElementJson:(GNCJsonElement *)json __attribute__((swift_name("decodeFromJsonElement(json:)")));
- (GNCJsonElement *)encodeToJsonElementValue:(id _Nullable)value __attribute__((swift_name("encodeToJsonElement(value:)")));

/**
 * @note annotations
 *   kotlinx.serialization.InternalSerializationApi
*/
- (GNCJsonElement *)decodeStringToJsonTreeDeserializer:(id<GNCDeserializationStrategy>)deserializer source:(NSString *)source __attribute__((swift_name("decodeStringToJsonTree(deserializer:source:)")));

/**
 * @note annotations
 *   kotlinx.serialization.InternalSerializationApi
*/
- (id _Nullable)readJsonElement:(GNCJsonElement *)element deserializer:(id<GNCDeserializationStrategy>)deserializer __attribute__((swift_name("readJson(element:deserializer:)")));

/**
 * @note annotations
 *   kotlinx.serialization.InternalSerializationApi
*/
- (GNCJsonElement *)writeJsonValue:(id _Nullable)value serializer:(id<GNCSerializationStrategy>)serializer __attribute__((swift_name("writeJson(value:serializer:)")));
@end

@interface GNCJsonObjectBuilder (Extensions)
- (GNCJsonElement * _Nullable)putKey:(NSString *)key value:(GNCBoolean * _Nullable)value __attribute__((swift_name("put(key:value:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (GNCJsonElement * _Nullable)putKey:(NSString *)key value_:(GNCKotlinNothing * _Nullable)value __attribute__((swift_name("put(key:value_:)")));
- (GNCJsonElement * _Nullable)putKey:(NSString *)key value__:(id _Nullable)value __attribute__((swift_name("put(key:value__:)")));
- (GNCJsonElement * _Nullable)putKey:(NSString *)key value___:(NSString * _Nullable)value __attribute__((swift_name("put(key:value___:)")));
- (GNCJsonElement * _Nullable)putJsonArrayKey:(NSString *)key builderAction:(void (^)(GNCJsonArrayBuilder *))builderAction __attribute__((swift_name("putJsonArray(key:builderAction:)")));
- (GNCJsonElement * _Nullable)putJsonObjectKey:(NSString *)key builderAction:(void (^)(GNCJsonObjectBuilder *))builderAction __attribute__((swift_name("putJsonObject(key:builderAction:)")));
@end

@interface GNCTraceBase (Extensions)
- (GNCTraceBase *)namedName:(NSString *)name __attribute__((swift_name("named(name:)")));
@end

@interface GNCSynchronizedObject (Extensions)
- (id _Nullable)withLockBlock:(id _Nullable (^)(void))block __attribute__((swift_name("withLock(block:)")));
@end

@interface GNCAbstractPolymorphicSerializer (Extensions)

/**
 * @note annotations
 *   kotlinx.serialization.InternalSerializationApi
*/
- (id<GNCDeserializationStrategy>)findPolymorphicSerializerDecoder:(id<GNCCompositeDecoder>)decoder klassName:(NSString * _Nullable)klassName __attribute__((swift_name("findPolymorphicSerializer(decoder:klassName:)")));

/**
 * @note annotations
 *   kotlinx.serialization.InternalSerializationApi
*/
- (id<GNCSerializationStrategy>)findPolymorphicSerializerEncoder:(id<GNCEncoder>)encoder value:(id)value __attribute__((swift_name("findPolymorphicSerializer(encoder:value:)")));
@end

@interface GNCSerializersModule (Extensions)
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
- (id<GNCKSerializer>)serializerType:(id<GNCKotlinKType>)type __attribute__((swift_name("serializer(type:)")));
- (id<GNCKSerializer> _Nullable)serializerOrNullType:(id<GNCKotlinKType>)type __attribute__((swift_name("serializerOrNull(type:)")));
- (GNCSerializersModule *)overwriteWithOther:(GNCSerializersModule *)other __attribute__((swift_name("overwriteWith(other:)")));
- (GNCSerializersModule *)plusOther_:(GNCSerializersModule *)other __attribute__((swift_name("plus(other_:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (id<GNCSerialDescriptor> _Nullable)getContextualDescriptorDescriptor:(id<GNCSerialDescriptor>)descriptor __attribute__((swift_name("getContextualDescriptor(descriptor:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
- (NSArray<id<GNCSerialDescriptor>> *)getPolymorphicDescriptorsDescriptor:(id<GNCSerialDescriptor>)descriptor __attribute__((swift_name("getPolymorphicDescriptors(descriptor:)")));
@end

@interface GNCSerializersModuleBuilder (Extensions)
- (void)contextualSerializer:(id<GNCKSerializer>)serializer __attribute__((swift_name("contextual(serializer:)")));
- (void)polymorphicBaseClass:(id<GNCKotlinKClass>)baseClass baseSerializer:(id<GNCKSerializer> _Nullable)baseSerializer builderAction:(void (^)(GNCPolymorphicModuleBuilder<id> *))builderAction __attribute__((swift_name("polymorphic(baseClass:baseSerializer:builderAction:)")));
@end

@interface GNCPolymorphicModuleBuilder (Extensions)
- (void)subclassClazz:(id<GNCKotlinKClass>)clazz __attribute__((swift_name("subclass(clazz:)")));
- (void)subclassSerializer:(id<GNCKSerializer>)serializer __attribute__((swift_name("subclass(serializer:)")));
@end

@interface GNCClassSerialDescriptorBuilder (Extensions)
- (void)elementElementName:(NSString *)elementName annotations:(NSArray<id<GNCKotlinAnnotation>> *)annotations isOptional:(BOOL)isOptional __attribute__((swift_name("element(elementName:annotations:isOptional:)")));
@end


/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.3")
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinBoolean.Companion")))
@interface GNCKotlinBooleanCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCKotlinBooleanCompanion *shared __attribute__((swift_name("shared")));
@end

@interface GNCKotlinBooleanCompanion (Extensions)
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinByte.Companion")))
@interface GNCKotlinByteCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCKotlinByteCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) int8_t MAX_VALUE __attribute__((swift_name("MAX_VALUE")));
@property (readonly) int8_t MIN_VALUE __attribute__((swift_name("MIN_VALUE")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.3")
*/
@property (readonly) int32_t SIZE_BITS __attribute__((swift_name("SIZE_BITS")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.3")
*/
@property (readonly) int32_t SIZE_BYTES __attribute__((swift_name("SIZE_BYTES")));
@end

@interface GNCKotlinByteCompanion (Extensions)
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinChar.Companion")))
@interface GNCKotlinCharCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCKotlinCharCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) int32_t MAX_CODE_POINT __attribute__((swift_name("MAX_CODE_POINT")));
@property (readonly) unichar MAX_HIGH_SURROGATE __attribute__((swift_name("MAX_HIGH_SURROGATE")));
@property (readonly) unichar MAX_LOW_SURROGATE __attribute__((swift_name("MAX_LOW_SURROGATE")));
@property (readonly) int32_t MAX_RADIX __attribute__((swift_name("MAX_RADIX")));
@property (readonly) unichar MAX_SURROGATE __attribute__((swift_name("MAX_SURROGATE")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.3")
*/
@property (readonly) unichar MAX_VALUE __attribute__((swift_name("MAX_VALUE")));
@property (readonly) int32_t MIN_CODE_POINT __attribute__((swift_name("MIN_CODE_POINT")));
@property (readonly) unichar MIN_HIGH_SURROGATE __attribute__((swift_name("MIN_HIGH_SURROGATE")));
@property (readonly) unichar MIN_LOW_SURROGATE __attribute__((swift_name("MIN_LOW_SURROGATE")));
@property (readonly) int32_t MIN_RADIX __attribute__((swift_name("MIN_RADIX")));
@property (readonly) int32_t MIN_SUPPLEMENTARY_CODE_POINT __attribute__((swift_name("MIN_SUPPLEMENTARY_CODE_POINT")));
@property (readonly) unichar MIN_SURROGATE __attribute__((swift_name("MIN_SURROGATE")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.3")
*/
@property (readonly) unichar MIN_VALUE __attribute__((swift_name("MIN_VALUE")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.3")
*/
@property (readonly) int32_t SIZE_BITS __attribute__((swift_name("SIZE_BITS")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.3")
*/
@property (readonly) int32_t SIZE_BYTES __attribute__((swift_name("SIZE_BYTES")));
@end

@interface GNCKotlinCharCompanion (Extensions)
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinDouble.Companion")))
@interface GNCKotlinDoubleCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCKotlinDoubleCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) double MAX_VALUE __attribute__((swift_name("MAX_VALUE")));
@property (readonly) double MIN_VALUE __attribute__((swift_name("MIN_VALUE")));
@property (readonly) double NEGATIVE_INFINITY __attribute__((swift_name("NEGATIVE_INFINITY")));
@property (readonly) double NaN __attribute__((swift_name("NaN")));
@property (readonly) double POSITIVE_INFINITY __attribute__((swift_name("POSITIVE_INFINITY")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.4")
*/
@property (readonly) int32_t SIZE_BITS __attribute__((swift_name("SIZE_BITS")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.4")
*/
@property (readonly) int32_t SIZE_BYTES __attribute__((swift_name("SIZE_BYTES")));
@end

@interface GNCKotlinDoubleCompanion (Extensions)
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinFloat.Companion")))
@interface GNCKotlinFloatCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCKotlinFloatCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) float MAX_VALUE __attribute__((swift_name("MAX_VALUE")));
@property (readonly) float MIN_VALUE __attribute__((swift_name("MIN_VALUE")));
@property (readonly) float NEGATIVE_INFINITY __attribute__((swift_name("NEGATIVE_INFINITY")));
@property (readonly) float NaN __attribute__((swift_name("NaN")));
@property (readonly) float POSITIVE_INFINITY __attribute__((swift_name("POSITIVE_INFINITY")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.4")
*/
@property (readonly) int32_t SIZE_BITS __attribute__((swift_name("SIZE_BITS")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.4")
*/
@property (readonly) int32_t SIZE_BYTES __attribute__((swift_name("SIZE_BYTES")));
@end

@interface GNCKotlinFloatCompanion (Extensions)
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinInt.Companion")))
@interface GNCKotlinIntCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCKotlinIntCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) int32_t MAX_VALUE __attribute__((swift_name("MAX_VALUE")));
@property (readonly) int32_t MIN_VALUE __attribute__((swift_name("MIN_VALUE")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.3")
*/
@property (readonly) int32_t SIZE_BITS __attribute__((swift_name("SIZE_BITS")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.3")
*/
@property (readonly) int32_t SIZE_BYTES __attribute__((swift_name("SIZE_BYTES")));
@end

@interface GNCKotlinIntCompanion (Extensions)
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinLong.Companion")))
@interface GNCKotlinLongCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCKotlinLongCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) int64_t MAX_VALUE __attribute__((swift_name("MAX_VALUE")));
@property (readonly) int64_t MIN_VALUE __attribute__((swift_name("MIN_VALUE")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.3")
*/
@property (readonly) int32_t SIZE_BITS __attribute__((swift_name("SIZE_BITS")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.3")
*/
@property (readonly) int32_t SIZE_BYTES __attribute__((swift_name("SIZE_BYTES")));
@end

@interface GNCKotlinLongCompanion (Extensions)
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinShort.Companion")))
@interface GNCKotlinShortCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCKotlinShortCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) int16_t MAX_VALUE __attribute__((swift_name("MAX_VALUE")));
@property (readonly) int16_t MIN_VALUE __attribute__((swift_name("MIN_VALUE")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.3")
*/
@property (readonly) int32_t SIZE_BITS __attribute__((swift_name("SIZE_BITS")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.3")
*/
@property (readonly) int32_t SIZE_BYTES __attribute__((swift_name("SIZE_BYTES")));
@end

@interface GNCKotlinShortCompanion (Extensions)
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinString.Companion")))
@interface GNCKotlinStringCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCKotlinStringCompanion *shared __attribute__((swift_name("shared")));
@end

@interface GNCKotlinStringCompanion (Extensions)
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinUByte.Companion")))
@interface GNCKotlinUByteCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCKotlinUByteCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) uint8_t MAX_VALUE __attribute__((swift_name("MAX_VALUE")));
@property (readonly) uint8_t MIN_VALUE __attribute__((swift_name("MIN_VALUE")));
@property (readonly) int32_t SIZE_BITS __attribute__((swift_name("SIZE_BITS")));
@property (readonly) int32_t SIZE_BYTES __attribute__((swift_name("SIZE_BYTES")));
@end

@interface GNCKotlinUByteCompanion (Extensions)
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinUInt.Companion")))
@interface GNCKotlinUIntCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCKotlinUIntCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) uint32_t MAX_VALUE __attribute__((swift_name("MAX_VALUE")));
@property (readonly) uint32_t MIN_VALUE __attribute__((swift_name("MIN_VALUE")));
@property (readonly) int32_t SIZE_BITS __attribute__((swift_name("SIZE_BITS")));
@property (readonly) int32_t SIZE_BYTES __attribute__((swift_name("SIZE_BYTES")));
@end

@interface GNCKotlinUIntCompanion (Extensions)
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinULong.Companion")))
@interface GNCKotlinULongCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCKotlinULongCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) uint64_t MAX_VALUE __attribute__((swift_name("MAX_VALUE")));
@property (readonly) uint64_t MIN_VALUE __attribute__((swift_name("MIN_VALUE")));
@property (readonly) int32_t SIZE_BITS __attribute__((swift_name("SIZE_BITS")));
@property (readonly) int32_t SIZE_BYTES __attribute__((swift_name("SIZE_BYTES")));
@end

@interface GNCKotlinULongCompanion (Extensions)
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinUShort.Companion")))
@interface GNCKotlinUShortCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCKotlinUShortCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) uint16_t MAX_VALUE __attribute__((swift_name("MAX_VALUE")));
@property (readonly) uint16_t MIN_VALUE __attribute__((swift_name("MIN_VALUE")));
@property (readonly) int32_t SIZE_BITS __attribute__((swift_name("SIZE_BITS")));
@property (readonly) int32_t SIZE_BYTES __attribute__((swift_name("SIZE_BYTES")));
@end

@interface GNCKotlinUShortCompanion (Extensions)
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinUnit")))
@interface GNCKotlinUnit : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)unit __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCKotlinUnit *shared __attribute__((swift_name("shared")));
- (NSString *)description __attribute__((swift_name("description()")));
@end

@interface GNCKotlinUnit (Extensions)
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinDuration.Companion")))
@interface GNCKotlinDurationCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCKotlinDurationCompanion *shared __attribute__((swift_name("shared")));
- (int64_t)days:(double)receiver __attribute__((swift_name("days(_:)")));
- (int64_t)days_:(int32_t)receiver __attribute__((swift_name("days(__:)")));
- (int64_t)days__:(int64_t)receiver __attribute__((swift_name("days(___:)")));
- (int64_t)hours:(double)receiver __attribute__((swift_name("hours(_:)")));
- (int64_t)hours_:(int32_t)receiver __attribute__((swift_name("hours(__:)")));
- (int64_t)hours__:(int64_t)receiver __attribute__((swift_name("hours(___:)")));
- (int64_t)microseconds:(double)receiver __attribute__((swift_name("microseconds(_:)")));
- (int64_t)microseconds_:(int32_t)receiver __attribute__((swift_name("microseconds(__:)")));
- (int64_t)microseconds__:(int64_t)receiver __attribute__((swift_name("microseconds(___:)")));
- (int64_t)milliseconds:(double)receiver __attribute__((swift_name("milliseconds(_:)")));
- (int64_t)milliseconds_:(int32_t)receiver __attribute__((swift_name("milliseconds(__:)")));
- (int64_t)milliseconds__:(int64_t)receiver __attribute__((swift_name("milliseconds(___:)")));
- (int64_t)minutes:(double)receiver __attribute__((swift_name("minutes(_:)")));
- (int64_t)minutes_:(int32_t)receiver __attribute__((swift_name("minutes(__:)")));
- (int64_t)minutes__:(int64_t)receiver __attribute__((swift_name("minutes(___:)")));
- (int64_t)nanoseconds:(double)receiver __attribute__((swift_name("nanoseconds(_:)")));
- (int64_t)nanoseconds_:(int32_t)receiver __attribute__((swift_name("nanoseconds(__:)")));
- (int64_t)nanoseconds__:(int64_t)receiver __attribute__((swift_name("nanoseconds(___:)")));
- (int64_t)seconds:(double)receiver __attribute__((swift_name("seconds(_:)")));
- (int64_t)seconds_:(int32_t)receiver __attribute__((swift_name("seconds(__:)")));
- (int64_t)seconds__:(int64_t)receiver __attribute__((swift_name("seconds(___:)")));

/**
 * @note annotations
 *   kotlin.time.ExperimentalTime
*/
- (double)convertValue:(double)value sourceUnit:(GNCKotlinDurationUnit *)sourceUnit targetUnit:(GNCKotlinDurationUnit *)targetUnit __attribute__((swift_name("convert(value:sourceUnit:targetUnit:)")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.5")
 *   kotlin.time.ExperimentalTime
 *   kotlin.DeprecatedSinceKotlin(warningSince="1.6", errorSince="1.8")
*/
- (int64_t)daysValue:(double)value __attribute__((swift_name("days(value:)"))) __attribute__((unavailable("Use 'Double.days' extension property from Duration.Companion instead.")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.5")
 *   kotlin.time.ExperimentalTime
 *   kotlin.DeprecatedSinceKotlin(warningSince="1.6", errorSince="1.8")
*/
- (int64_t)daysValue_:(int32_t)value __attribute__((swift_name("days(value_:)"))) __attribute__((unavailable("Use 'Int.days' extension property from Duration.Companion instead.")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.5")
 *   kotlin.time.ExperimentalTime
 *   kotlin.DeprecatedSinceKotlin(warningSince="1.6", errorSince="1.8")
*/
- (int64_t)daysValue__:(int64_t)value __attribute__((swift_name("days(value__:)"))) __attribute__((unavailable("Use 'Long.days' extension property from Duration.Companion instead.")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.5")
 *   kotlin.time.ExperimentalTime
 *   kotlin.DeprecatedSinceKotlin(warningSince="1.6", errorSince="1.8")
*/
- (int64_t)hoursValue:(double)value __attribute__((swift_name("hours(value:)"))) __attribute__((unavailable("Use 'Double.hours' extension property from Duration.Companion instead.")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.5")
 *   kotlin.time.ExperimentalTime
 *   kotlin.DeprecatedSinceKotlin(warningSince="1.6", errorSince="1.8")
*/
- (int64_t)hoursValue_:(int32_t)value __attribute__((swift_name("hours(value_:)"))) __attribute__((unavailable("Use 'Int.hours' extension property from Duration.Companion instead.")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.5")
 *   kotlin.time.ExperimentalTime
 *   kotlin.DeprecatedSinceKotlin(warningSince="1.6", errorSince="1.8")
*/
- (int64_t)hoursValue__:(int64_t)value __attribute__((swift_name("hours(value__:)"))) __attribute__((unavailable("Use 'Long.hours' extension property from Duration.Companion instead.")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.5")
 *   kotlin.time.ExperimentalTime
 *   kotlin.DeprecatedSinceKotlin(warningSince="1.6", errorSince="1.8")
*/
- (int64_t)microsecondsValue:(double)value __attribute__((swift_name("microseconds(value:)"))) __attribute__((unavailable("Use 'Double.microseconds' extension property from Duration.Companion instead.")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.5")
 *   kotlin.time.ExperimentalTime
 *   kotlin.DeprecatedSinceKotlin(warningSince="1.6", errorSince="1.8")
*/
- (int64_t)microsecondsValue_:(int32_t)value __attribute__((swift_name("microseconds(value_:)"))) __attribute__((unavailable("Use 'Int.microseconds' extension property from Duration.Companion instead.")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.5")
 *   kotlin.time.ExperimentalTime
 *   kotlin.DeprecatedSinceKotlin(warningSince="1.6", errorSince="1.8")
*/
- (int64_t)microsecondsValue__:(int64_t)value __attribute__((swift_name("microseconds(value__:)"))) __attribute__((unavailable("Use 'Long.microseconds' extension property from Duration.Companion instead.")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.5")
 *   kotlin.time.ExperimentalTime
 *   kotlin.DeprecatedSinceKotlin(warningSince="1.6", errorSince="1.8")
*/
- (int64_t)millisecondsValue:(double)value __attribute__((swift_name("milliseconds(value:)"))) __attribute__((unavailable("Use 'Double.milliseconds' extension property from Duration.Companion instead.")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.5")
 *   kotlin.time.ExperimentalTime
 *   kotlin.DeprecatedSinceKotlin(warningSince="1.6", errorSince="1.8")
*/
- (int64_t)millisecondsValue_:(int32_t)value __attribute__((swift_name("milliseconds(value_:)"))) __attribute__((unavailable("Use 'Int.milliseconds' extension property from Duration.Companion instead.")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.5")
 *   kotlin.time.ExperimentalTime
 *   kotlin.DeprecatedSinceKotlin(warningSince="1.6", errorSince="1.8")
*/
- (int64_t)millisecondsValue__:(int64_t)value __attribute__((swift_name("milliseconds(value__:)"))) __attribute__((unavailable("Use 'Long.milliseconds' extension property from Duration.Companion instead.")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.5")
 *   kotlin.time.ExperimentalTime
 *   kotlin.DeprecatedSinceKotlin(warningSince="1.6", errorSince="1.8")
*/
- (int64_t)minutesValue:(double)value __attribute__((swift_name("minutes(value:)"))) __attribute__((unavailable("Use 'Double.minutes' extension property from Duration.Companion instead.")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.5")
 *   kotlin.time.ExperimentalTime
 *   kotlin.DeprecatedSinceKotlin(warningSince="1.6", errorSince="1.8")
*/
- (int64_t)minutesValue_:(int32_t)value __attribute__((swift_name("minutes(value_:)"))) __attribute__((unavailable("Use 'Int.minutes' extension property from Duration.Companion instead.")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.5")
 *   kotlin.time.ExperimentalTime
 *   kotlin.DeprecatedSinceKotlin(warningSince="1.6", errorSince="1.8")
*/
- (int64_t)minutesValue__:(int64_t)value __attribute__((swift_name("minutes(value__:)"))) __attribute__((unavailable("Use 'Long.minutes' extension property from Duration.Companion instead.")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.5")
 *   kotlin.time.ExperimentalTime
 *   kotlin.DeprecatedSinceKotlin(warningSince="1.6", errorSince="1.8")
*/
- (int64_t)nanosecondsValue:(double)value __attribute__((swift_name("nanoseconds(value:)"))) __attribute__((unavailable("Use 'Double.nanoseconds' extension property from Duration.Companion instead.")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.5")
 *   kotlin.time.ExperimentalTime
 *   kotlin.DeprecatedSinceKotlin(warningSince="1.6", errorSince="1.8")
*/
- (int64_t)nanosecondsValue_:(int32_t)value __attribute__((swift_name("nanoseconds(value_:)"))) __attribute__((unavailable("Use 'Int.nanoseconds' extension property from Duration.Companion instead.")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.5")
 *   kotlin.time.ExperimentalTime
 *   kotlin.DeprecatedSinceKotlin(warningSince="1.6", errorSince="1.8")
*/
- (int64_t)nanosecondsValue__:(int64_t)value __attribute__((swift_name("nanoseconds(value__:)"))) __attribute__((unavailable("Use 'Long.nanoseconds' extension property from Duration.Companion instead.")));
- (int64_t)parseValue:(NSString *)value __attribute__((swift_name("parse(value:)")));
- (int64_t)parseIsoStringValue:(NSString *)value __attribute__((swift_name("parseIsoString(value:)")));
- (id _Nullable)parseIsoStringOrNullValue:(NSString *)value __attribute__((swift_name("parseIsoStringOrNull(value:)")));
- (id _Nullable)parseOrNullValue:(NSString *)value __attribute__((swift_name("parseOrNull(value:)")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.5")
 *   kotlin.time.ExperimentalTime
 *   kotlin.DeprecatedSinceKotlin(warningSince="1.6", errorSince="1.8")
*/
- (int64_t)secondsValue:(double)value __attribute__((swift_name("seconds(value:)"))) __attribute__((unavailable("Use 'Double.seconds' extension property from Duration.Companion instead.")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.5")
 *   kotlin.time.ExperimentalTime
 *   kotlin.DeprecatedSinceKotlin(warningSince="1.6", errorSince="1.8")
*/
- (int64_t)secondsValue_:(int32_t)value __attribute__((swift_name("seconds(value_:)"))) __attribute__((unavailable("Use 'Int.seconds' extension property from Duration.Companion instead.")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.5")
 *   kotlin.time.ExperimentalTime
 *   kotlin.DeprecatedSinceKotlin(warningSince="1.6", errorSince="1.8")
*/
- (int64_t)secondsValue__:(int64_t)value __attribute__((swift_name("seconds(value__:)"))) __attribute__((unavailable("Use 'Long.seconds' extension property from Duration.Companion instead.")));
@property (readonly) int64_t INFINITE __attribute__((swift_name("INFINITE")));
@property (readonly) int64_t ZERO __attribute__((swift_name("ZERO")));
@end

@interface GNCKotlinDurationCompanion (Extensions)
- (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NavigationSdkNativeKt")))
@interface GNCNavigationSdkNativeKt : GNCBase
+ (GNCKotlinUnit *(^(^)(GNCKotlinUnit *(^)(GNCRouteData *, GNCKotlinUnit *), GNCKotlinUnit *(^)(NSError *, GNCKotlinUnit *), GNCKotlinUnit *(^)(NSError *, GNCKotlinUnit *)))(void))requestStaticRouteData:(id<GNCNavigationSdk>)receiver origin:(GNCLocation *)origin destination:(id<GNCRoutable>)destination vehicleConfig:(id<GNCVehicleConfig> _Nullable)vehicleConfig __attribute__((swift_name("requestStaticRouteData(_:origin:destination:vehicleConfig:)")));
+ (GNCKotlinUnit *(^(^)(GNCKotlinUnit *(^)(GNCRoute *, GNCKotlinUnit *), GNCKotlinUnit *(^)(NSError *, GNCKotlinUnit *), GNCKotlinUnit *(^)(NSError *, GNCKotlinUnit *)))(void))requestStaticRoute:(id<GNCNavigationSdk>)receiver origin:(GNCLocation *)origin destination:(id<GNCRoutable>)destination vehicleConfig:(id<GNCVehicleConfig> _Nullable)vehicleConfig __attribute__((swift_name("requestStaticRoute(_:origin:destination:vehicleConfig:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KtorSessionClientKt")))
@interface GNCKtorSessionClientKt : GNCBase
+ (GNCKtorSessionClient *)KtorSessionClientServiceUrl:(NSString *)serviceUrl apiKey:(NSString *)apiKey __attribute__((swift_name("KtorSessionClient(serviceUrl:apiKey:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KtorRouteProviderKt")))
@interface GNCKtorRouteProviderKt : GNCBase
+ (GNCKtorRouteProvider *)KtorRouteProviderServiceUrl:(NSString *)serviceUrl apiKey:(NSString *)apiKey __attribute__((swift_name("KtorRouteProvider(serviceUrl:apiKey:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("VehicleConfigKt")))
@interface GNCVehicleConfigKt : GNCBase
@property (class, readonly) NSString *KEY_BICYCLE __attribute__((swift_name("KEY_BICYCLE")));
@property (class, readonly) NSString *KEY_BUS __attribute__((swift_name("KEY_BUS")));
@property (class, readonly) NSString *KEY_CAR __attribute__((swift_name("KEY_CAR")));
@property (class, readonly) NSString *KEY_MOTORBIKE __attribute__((swift_name("KEY_MOTORBIKE")));
@property (class, readonly) NSString *KEY_TRUCK __attribute__((swift_name("KEY_TRUCK")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocationKt")))
@interface GNCLocationKt : GNCBase
+ (GNCLocation *)LocationLatLng:(GNCLatLng *)latLng __attribute__((swift_name("Location(latLng:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DurationKt")))
@interface GNCDurationKt : GNCBase
+ (GNCDuration *)hours:(int32_t)receiver __attribute__((swift_name("hours(_:)")));
+ (GNCDuration *)milliseconds:(int32_t)receiver __attribute__((swift_name("milliseconds(_:)")));
+ (GNCDuration *)minutes:(int32_t)receiver __attribute__((swift_name("minutes(_:)")));
+ (GNCDuration *)seconds:(int32_t)receiver __attribute__((swift_name("seconds(_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LengthKt")))
@interface GNCLengthKt : GNCBase
+ (GNCLength *)kilometers:(double)receiver __attribute__((swift_name("kilometers(_:)")));
+ (GNCLength *)meters:(double)receiver __attribute__((swift_name("meters(_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SpeedKt")))
@interface GNCSpeedKt : GNCBase
+ (GNCSpeed *)kmh:(double)receiver __attribute__((swift_name("kmh(_:)")));
+ (GNCSpeed *)ms:(double)receiver __attribute__((swift_name("ms(_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NormalizedKt")))
@interface GNCNormalizedKt : GNCBase
+ (double)normalize:(double)receiver range:(GNCKotlinIntRange *)range __attribute__((swift_name("normalize(_:range:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateKt")))
@interface GNCDateKt : GNCBase
+ (int64_t)millisecondsSince1970:(NSDate *)receiver __attribute__((swift_name("millisecondsSince1970(_:)")));
+ (NSDate *)from:(Class)receiver millisecondsSince1970:(int64_t)millisecondsSince1970 __attribute__((swift_name("from(_:millisecondsSince1970:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TimeProviderKt")))
@interface GNCTimeProviderKt : GNCBase
+ (GNCTimestamp *)currentTimestamp:(id<GNCTimeProvider>)receiver __attribute__((swift_name("currentTimestamp(_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonSupportKt")))
@interface GNCJsonSupportKt : GNCBase
+ (void)json:(id<GNCConfiguration>)receiver json:(GNCJson *)json contentType:(GNCContentType *)contentType __attribute__((swift_name("json(_:json:contentType:)")));
@property (class, readonly) GNCJson *DefaultJson __attribute__((swift_name("DefaultJson")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NativeSuspendKt")))
@interface GNCNativeSuspendKt : GNCBase
+ (GNCKotlinUnit *(^(^)(GNCKotlinUnit *(^)(id _Nullable, GNCKotlinUnit *), GNCKotlinUnit *(^)(NSError *, GNCKotlinUnit *), GNCKotlinUnit *(^)(NSError *, GNCKotlinUnit *)))(void))nativeSuspendScope:(id<GNCCoroutineScope> _Nullable)scope block:(id<GNCKotlinSuspendFunction0>)block __attribute__((swift_name("nativeSuspend(scope:block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NativeFlowKt")))
@interface GNCNativeFlowKt : GNCBase
+ (GNCKotlinUnit *(^(^)(GNCKotlinUnit *(^)(id _Nullable, GNCKotlinUnit *(^)(void), GNCKotlinUnit *), GNCKotlinUnit *(^)(NSError * _Nullable, GNCKotlinUnit *), GNCKotlinUnit *(^)(NSError *, GNCKotlinUnit *)))(void))asNativeFlow:(id<GNCFlow>)receiver scope:(id<GNCCoroutineScope> _Nullable)scope __attribute__((swift_name("asNativeFlow(_:scope:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpClientKt")))
@interface GNCHttpClientKt : GNCBase
+ (GNCHttpClient *)HttpClientBlock:(void (^)(GNCHttpClientConfig<id> *))block __attribute__((swift_name("HttpClient(block:)")));
+ (GNCHttpClient *)HttpClientEngine:(id<GNCHttpClientEngine>)engine block:(void (^)(GNCHttpClientConfig<id> *))block __attribute__((swift_name("HttpClient(engine:block:)")));
+ (GNCHttpClient *)HttpClientEngineFactory:(id<GNCHttpClientEngineFactory>)engineFactory block:(void (^)(GNCHttpClientConfig<GNCHttpClientEngineConfig *> *))block __attribute__((swift_name("HttpClient(engineFactory:block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CIOKt")))
@interface GNCCIOKt : GNCBase
@property (class, readonly) int32_t DEFAULT_HTTP_BUFFER_SIZE __attribute__((swift_name("DEFAULT_HTTP_BUFFER_SIZE")));
@property (class, readonly) int32_t DEFAULT_HTTP_POOL_SIZE __attribute__((swift_name("DEFAULT_HTTP_POOL_SIZE")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClientEventsKt")))
@interface GNCClientEventsKt : GNCBase
@property (class, readonly) GNCEventDefinition<GNCHttpRequestBuilder *> *HttpRequestCreated __attribute__((swift_name("HttpRequestCreated")));
@property (class, readonly) GNCEventDefinition<GNCHttpRequestBuilder *> *HttpRequestIsReadyForSending __attribute__((swift_name("HttpRequestIsReadyForSending")));
@property (class, readonly) GNCEventDefinition<GNCHttpResponse *> *HttpResponseCancelled __attribute__((swift_name("HttpResponseCancelled")));
@property (class, readonly) GNCEventDefinition<GNCHttpResponseReceiveFail *> *HttpResponseReceiveFailed __attribute__((swift_name("HttpResponseReceiveFailed")));
@property (class, readonly) GNCEventDefinition<GNCHttpResponse *> *HttpResponseReceived __attribute__((swift_name("HttpResponseReceived")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeadersKt")))
@interface GNCHeadersKt : GNCBase
+ (id<GNCHeaders>)buildHeadersBlock:(void (^)(GNCHeadersBuilder *))block __attribute__((swift_name("buildHeaders(block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TimeoutExceptionsCommonKt")))
@interface GNCTimeoutExceptionsCommonKt : GNCBase
+ (id<GNCByteReadChannel>)mapEngineExceptions:(id<GNCCoroutineScope>)receiver input:(id<GNCByteReadChannel>)input request:(GNCHttpRequestData *)request __attribute__((swift_name("mapEngineExceptions(_:input:request:)")));
+ (id<GNCByteWriteChannel>)mapEngineExceptions:(id<GNCCoroutineScope>)receiver output:(id<GNCByteWriteChannel>)output request:(GNCHttpRequestData *)request __attribute__((swift_name("mapEngineExceptions(_:output:request:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BuildersKt")))
@interface GNCBuildersKt : GNCBase
+ (GNCHttpRequestBuilder *)requestBlock:(void (^)(GNCHttpRequestBuilder *))block __attribute__((swift_name("request(block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UtilsKt")))
@interface GNCUtilsKt : GNCBase
+ (void)accept:(id<GNCHttpMessageBuilder>)receiver contentType:(GNCContentType *)contentType __attribute__((swift_name("accept(_:contentType:)")));
+ (void)basicAuth:(id<GNCHttpMessageBuilder>)receiver username:(NSString *)username password:(NSString *)password __attribute__((swift_name("basicAuth(_:username:password:)")));
+ (void)bearerAuth:(id<GNCHttpMessageBuilder>)receiver token:(NSString *)token __attribute__((swift_name("bearerAuth(_:token:)")));
+ (void)cookie:(id<GNCHttpMessageBuilder>)receiver name:(NSString *)name value:(NSString *)value maxAge:(int32_t)maxAge expires:(GNCGMTDate * _Nullable)expires domain:(NSString * _Nullable)domain path:(NSString * _Nullable)path secure:(BOOL)secure httpOnly:(BOOL)httpOnly extensions:(NSDictionary<NSString *, id> *)extensions __attribute__((swift_name("cookie(_:name:value:maxAge:expires:domain:path:secure:httpOnly:extensions:)")));
+ (void)header:(id<GNCHttpMessageBuilder>)receiver key:(NSString *)key value:(id _Nullable)value __attribute__((swift_name("header(_:key:value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestKt")))
@interface GNCHttpRequestKt : GNCBase
+ (GNCHeadersBuilder *)headers:(id<GNCHttpMessageBuilder>)receiver block:(void (^)(GNCHeadersBuilder *))block __attribute__((swift_name("headers(_:block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FormDslKt")))
@interface GNCFormDslKt : GNCBase
+ (NSArray<GNCPartData *> *)formDataBlock:(void (^)(GNCFormBuilder *))block __attribute__((swift_name("formData(block:)")));
+ (NSArray<GNCPartData *> *)formDataValues:(GNCKotlinArray<GNCFormPart<id> *> *)values __attribute__((swift_name("formData(values:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpClientEngineCapabilityKt")))
@interface GNCHttpClientEngineCapabilityKt : GNCBase
@property (class, readonly) NSSet<GNCHttpTimeoutPlugin *> *DEFAULT_CAPABILITIES __attribute__((swift_name("DEFAULT_CAPABILITIES")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UtilsKt_")))
@interface GNCUtilsKt_ : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)callContextWithCompletionHandler:(void (^)(id<GNCKotlinCoroutineContext> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("callContext(completionHandler:)")));
+ (void)mergeHeadersRequestHeaders:(id<GNCHeaders>)requestHeaders content:(GNCOutgoingContent *)content block:(void (^)(NSString *, NSString *))block __attribute__((swift_name("mergeHeaders(requestHeaders:content:block:)")));
@property (class, readonly) NSString *KTOR_DEFAULT_USER_AGENT __attribute__((swift_name("KTOR_DEFAULT_USER_AGENT")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpClientEngineKt")))
@interface GNCHttpClientEngineKt : GNCBase
+ (id<GNCHttpClientEngineFactory>)config:(id<GNCHttpClientEngineFactory>)receiver nested:(void (^)(GNCHttpClientEngineConfig *))nested __attribute__((swift_name("config(_:nested:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpTimeoutKt")))
@interface GNCHttpTimeoutKt : GNCBase
+ (GNCConnectTimeoutException *)ConnectTimeoutExceptionRequest:(GNCHttpRequestData *)request cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("ConnectTimeoutException(request:cause:)")));
+ (GNCConnectTimeoutException *)ConnectTimeoutExceptionUrl:(NSString *)url timeout:(GNCLong * _Nullable)timeout cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("ConnectTimeoutException(url:timeout:cause:)")));
+ (GNCSocketTimeoutException *)SocketTimeoutExceptionRequest:(GNCHttpRequestData *)request cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("SocketTimeoutException(request:cause:)")));
+ (int32_t)convertLongTimeoutToIntWithInfiniteAsZeroTimeout:(int64_t)timeout __attribute__((swift_name("convertLongTimeoutToIntWithInfiniteAsZero(timeout:)")));
+ (int64_t)convertLongTimeoutToLongWithInfiniteAsZeroTimeout:(int64_t)timeout __attribute__((swift_name("convertLongTimeoutToLongWithInfiniteAsZero(timeout:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CookiesStorageKt")))
@interface GNCCookiesStorageKt : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)addCookie:(id<GNCCookiesStorage>)receiver urlString:(NSString *)urlString cookie:(GNCCookie *)cookie completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("addCookie(_:urlString:cookie:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCookiesKt")))
@interface GNCHttpCookiesKt : GNCBase
+ (GNCCookie * _Nullable)get:(NSArray<GNCCookie *> *)receiver name:(NSString *)name __attribute__((swift_name("get(_:name:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebsocketChannelSerializationKt")))
@interface GNCWebsocketChannelSerializationKt : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)receiveDeserializedBase:(id<GNCWebSocketSession>)receiver converter:(id<GNCWebsocketContentConverter>)converter charset:(GNCCharset *)charset completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("receiveDeserializedBase(_:converter:charset:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)sendSerializedBase:(id<GNCWebSocketSession>)receiver data:(id _Nullable)data converter:(id<GNCWebsocketContentConverter>)converter charset:(GNCCharset *)charset completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("sendSerializedBase(_:data:converter:charset:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinxSerializationConverterKt")))
@interface GNCKotlinxSerializationConverterKt : GNCBase
+ (void)serialization:(id<GNCConfiguration>)receiver contentType:(GNCContentType *)contentType format:(id<GNCBinaryFormat>)format __attribute__((swift_name("serialization(_:contentType:format:)")));
+ (void)serialization:(id<GNCConfiguration>)receiver contentType:(GNCContentType *)contentType format_:(id<GNCStringFormat>)format __attribute__((swift_name("serialization(_:contentType:format_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebsocketContentConverterKt")))
@interface GNCWebsocketContentConverterKt : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)deserialize:(id<GNCWebsocketContentConverter>)receiver content:(GNCFrame *)content charset:(GNCCharset *)charset completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("deserialize(_:content:charset:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)serialize:(id<GNCWebsocketContentConverter>)receiver value:(id _Nullable)value charset:(GNCCharset *)charset completionHandler:(void (^)(GNCFrame * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("serialize(_:value:charset:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentConverterKt")))
@interface GNCContentConverterKt : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)deserialize:(NSArray<id<GNCContentConverter>> *)receiver body:(id<GNCByteReadChannel>)body typeInfo:(GNCTypeInfo *)typeInfo charset:(GNCCharset *)charset completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("deserialize(_:body:typeInfo:charset:completionHandler:)")));
+ (GNCCharset *)suitableCharset:(id<GNCHeaders>)receiver defaultCharset:(GNCCharset *)defaultCharset __attribute__((swift_name("suitableCharset(_:defaultCharset:)")));
+ (GNCCharset * _Nullable)suitableCharsetOrNull:(id<GNCHeaders>)receiver defaultCharset:(GNCCharset *)defaultCharset __attribute__((swift_name("suitableCharsetOrNull(_:defaultCharset:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultWebSocketSessionKt")))
@interface GNCDefaultWebSocketSessionKt : GNCBase
+ (id<GNCDefaultWebSocketSession>)DefaultWebSocketSessionSession:(id<GNCWebSocketSession>)session pingInterval:(int64_t)pingInterval timeoutMillis:(int64_t)timeoutMillis __attribute__((swift_name("DefaultWebSocketSession(session:pingInterval:timeoutMillis:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RawWebSocketKt")))
@interface GNCRawWebSocketKt : GNCBase
+ (id<GNCWebSocketSession>)RawWebSocketInput:(id<GNCByteReadChannel>)input output:(id<GNCByteWriteChannel>)output maxFrameSize:(int64_t)maxFrameSize masking:(BOOL)masking coroutineContext:(id<GNCKotlinCoroutineContext>)coroutineContext __attribute__((swift_name("RawWebSocket(input:output:maxFrameSize:masking:coroutineContext:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSocketExtensionHeaderKt")))
@interface GNCWebSocketExtensionHeaderKt : GNCBase
+ (NSArray<GNCWebSocketExtensionHeader *> *)parseWebSocketExtensionsValue:(NSString *)value __attribute__((swift_name("parseWebSocketExtensions(value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSocketSessionKt")))
@interface GNCWebSocketSessionKt : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)close:(id<GNCWebSocketSession>)receiver reason:(GNCCloseReason *)reason completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("close(_:reason:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)close:(id<GNCWebSocketSession>)receiver cause:(GNCKotlinThrowable * _Nullable)cause completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("close(_:cause:completionHandler:)"))) __attribute__((deprecated("Close with reason or terminate instead.")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)closeExceptionally:(id<GNCWebSocketSession>)receiver cause:(GNCKotlinThrowable *)cause completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("closeExceptionally(_:cause:completionHandler:)")));
+ (id<GNCWebSocketExtension>)extension:(id<GNCWebSocketSession>)receiver extension:(id<GNCWebSocketExtensionFactory>)extension __attribute__((swift_name("extension(_:extension:)")));
+ (id<GNCWebSocketExtension> _Nullable)extensionOrNull:(id<GNCWebSocketSession>)receiver extension:(id<GNCWebSocketExtensionFactory>)extension __attribute__((swift_name("extensionOrNull(_:extension:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)send:(id<GNCWebSocketSession>)receiver content:(GNCKotlinByteArray *)content completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("send(_:content:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)send:(id<GNCWebSocketSession>)receiver content:(NSString *)content completionHandler_:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("send(_:content:completionHandler_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RawWebSocketCommonKt")))
@interface GNCRawWebSocketCommonKt : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readFrame:(id<GNCByteReadChannel>)receiver maxFrameSize:(int64_t)maxFrameSize lastOpcode:(int32_t)lastOpcode completionHandler:(void (^)(GNCFrame * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readFrame(_:maxFrameSize:lastOpcode:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeFrame:(id<GNCByteWriteChannel>)receiver frame:(GNCFrame *)frame masking:(BOOL)masking completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFrame(_:frame:masking:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("URLBuilderKt")))
@interface GNCURLBuilderKt : GNCBase
@property (class, readonly) int32_t DEFAULT_PORT __attribute__((swift_name("DEFAULT_PORT")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ParametersKt")))
@interface GNCParametersKt : GNCBase
+ (id<GNCParametersBuilder>)ParametersBuilderSize:(int32_t)size __attribute__((swift_name("ParametersBuilder(size:)")));
+ (id<GNCParameters>)parametersOf __attribute__((swift_name("parametersOf()")));
+ (id<GNCParameters>)parametersOfPairs:(GNCKotlinArray<GNCKotlinPair<NSString *, NSArray<NSString *> *> *> *)pairs __attribute__((swift_name("parametersOf(pairs:)")));
+ (id<GNCParameters>)parametersOfName:(NSString *)name value:(NSString *)value __attribute__((swift_name("parametersOf(name:value:)")));
+ (id<GNCParameters>)parametersOfName:(NSString *)name values:(NSArray<NSString *> *)values __attribute__((swift_name("parametersOf(name:values:)")));
+ (id<GNCParameters>)parametersOfMap:(NSDictionary<NSString *, NSArray<NSString *> *> *)map __attribute__((swift_name("parametersOf(map:)")));
+ (id<GNCParameters>)plus:(id<GNCParameters>)receiver other:(id<GNCParameters>)other __attribute__((swift_name("plus(_:other:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("URLUtilsKt")))
@interface GNCURLUtilsKt : GNCBase
+ (GNCURLBuilder *)URLBuilderBuilder:(GNCURLBuilder *)builder __attribute__((swift_name("URLBuilder(builder:)")));
+ (GNCURLBuilder *)URLBuilderUrl:(GNCUrl *)url __attribute__((swift_name("URLBuilder(url:)")));
+ (GNCURLBuilder *)URLBuilderUrlString:(NSString *)urlString __attribute__((swift_name("URLBuilder(urlString:)")));
+ (GNCUrl *)UrlBuilder:(GNCURLBuilder *)builder __attribute__((swift_name("Url(builder:)")));
+ (GNCUrl *)UrlUrlString:(NSString *)urlString __attribute__((swift_name("Url(urlString:)")));
+ (void)appendUrlFullPath:(id<GNCKotlinAppendable>)receiver encodedPath:(NSString *)encodedPath encodedQueryParameters:(id<GNCParametersBuilder>)encodedQueryParameters trailingQuery:(BOOL)trailingQuery __attribute__((swift_name("appendUrlFullPath(_:encodedPath:encodedQueryParameters:trailingQuery:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentRangeKt")))
@interface GNCContentRangeKt : GNCBase
+ (NSString *)contentRangeHeaderValueRange:(GNCKotlinLongRange * _Nullable)range fullLength:(GNCLong * _Nullable)fullLength unit:(GNCRangeUnits *)unit __attribute__((swift_name("contentRangeHeaderValue(range:fullLength:unit:)")));
+ (NSString *)contentRangeHeaderValueRange:(GNCKotlinLongRange * _Nullable)range fullLength:(GNCLong * _Nullable)fullLength unit_:(NSString *)unit __attribute__((swift_name("contentRangeHeaderValue(range:fullLength:unit_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CookieKt")))
@interface GNCCookieKt : GNCBase
+ (NSString *)decodeCookieValueEncodedValue:(NSString *)encodedValue encoding:(GNCCookieEncoding *)encoding __attribute__((swift_name("decodeCookieValue(encodedValue:encoding:)")));
+ (NSString *)encodeCookieValueValue:(NSString *)value encoding:(GNCCookieEncoding *)encoding __attribute__((swift_name("encodeCookieValue(value:encoding:)")));
+ (NSDictionary<NSString *, NSString *> *)parseClientCookiesHeaderCookiesHeader:(NSString *)cookiesHeader skipEscaped:(BOOL)skipEscaped __attribute__((swift_name("parseClientCookiesHeader(cookiesHeader:skipEscaped:)")));
+ (GNCCookie *)parseServerSetCookieHeaderCookiesHeader:(NSString *)cookiesHeader __attribute__((swift_name("parseServerSetCookieHeader(cookiesHeader:)")));
+ (NSString *)renderCookieHeaderCookie:(GNCCookie *)cookie __attribute__((swift_name("renderCookieHeader(cookie:)")));
+ (NSString *)renderSetCookieHeaderCookie:(GNCCookie *)cookie __attribute__((swift_name("renderSetCookieHeader(cookie:)")));
+ (NSString *)renderSetCookieHeaderName:(NSString *)name value:(NSString *)value encoding:(GNCCookieEncoding *)encoding maxAge:(int32_t)maxAge expires:(GNCGMTDate * _Nullable)expires domain:(NSString * _Nullable)domain path:(NSString * _Nullable)path secure:(BOOL)secure httpOnly:(BOOL)httpOnly extensions:(NSDictionary<NSString *, id> *)extensions includeEncoding:(BOOL)includeEncoding __attribute__((swift_name("renderSetCookieHeader(name:value:encoding:maxAge:expires:domain:path:secure:httpOnly:extensions:includeEncoding:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeadersKt_")))
@interface GNCHeadersKt_ : GNCBase
+ (id<GNCHeaders>)headersOf __attribute__((swift_name("headersOf()")));
+ (id<GNCHeaders>)headersOfPairs:(GNCKotlinArray<GNCKotlinPair<NSString *, NSArray<NSString *> *> *> *)pairs __attribute__((swift_name("headersOf(pairs:)")));
+ (id<GNCHeaders>)headersOfName:(NSString *)name value:(NSString *)value __attribute__((swift_name("headersOf(name:value:)")));
+ (id<GNCHeaders>)headersOfName:(NSString *)name values:(NSArray<NSString *> *)values __attribute__((swift_name("headersOf(name:values:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IpParserKt")))
@interface GNCIpParserKt : GNCBase
+ (BOOL)hostIsIpHost:(NSString *)host __attribute__((swift_name("hostIsIp(host:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpHeaderValueParserKt")))
@interface GNCHttpHeaderValueParserKt : GNCBase
+ (NSArray<GNCHeaderValue *> *)parseAndSortContentTypeHeaderHeader:(NSString * _Nullable)header __attribute__((swift_name("parseAndSortContentTypeHeader(header:)")));
+ (NSArray<GNCHeaderValue *> *)parseAndSortHeaderHeader:(NSString * _Nullable)header __attribute__((swift_name("parseAndSortHeader(header:)")));
+ (NSArray<GNCHeaderValue *> *)parseHeaderValueText:(NSString * _Nullable)text __attribute__((swift_name("parseHeaderValue(text:)")));
+ (NSArray<GNCHeaderValue *> *)parseHeaderValueText:(NSString * _Nullable)text parametersOnly:(BOOL)parametersOnly __attribute__((swift_name("parseHeaderValue(text:parametersOnly:)")));
+ (NSArray<GNCHeaderValueParam *> *)toHeaderParamsList:(id)receiver __attribute__((swift_name("toHeaderParamsList(_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("QueryKt")))
@interface GNCQueryKt : GNCBase
+ (id<GNCParameters>)parseQueryStringQuery:(NSString *)query startIndex:(int32_t)startIndex limit:(int32_t)limit decode:(BOOL)decode __attribute__((swift_name("parseQueryString(query:startIndex:limit:decode:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RangesKt")))
@interface GNCRangesKt : GNCBase
+ (GNCRangesSpecifier * _Nullable)parseRangesSpecifierRangeSpec:(NSString *)rangeSpec __attribute__((swift_name("parseRangesSpecifier(rangeSpec:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeaderValueWithParametersKt")))
@interface GNCHeaderValueWithParametersKt : GNCBase
+ (void)append:(id<GNCStringValuesBuilder>)receiver name:(NSString *)name value:(GNCHeaderValueWithParameters *)value __attribute__((swift_name("append(_:name:value:)")));
+ (NSString *)escapeIfNeeded:(NSString *)receiver __attribute__((swift_name("escapeIfNeeded(_:)")));
+ (NSString *)quote:(NSString *)receiver __attribute__((swift_name("quote(_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpMessagePropertiesKt")))
@interface GNCHttpMessagePropertiesKt : GNCBase
+ (NSArray<GNCHeaderValue *> *)cacheControl:(id<GNCHttpMessage>)receiver __attribute__((swift_name("cacheControl(_:)")));
+ (GNCCharset * _Nullable)charset:(id<GNCHttpMessage>)receiver __attribute__((swift_name("charset(_:)")));
+ (GNCCharset * _Nullable)charset_:(id<GNCHttpMessageBuilder>)receiver __attribute__((swift_name("charset(__:)")));
+ (GNCKotlinUnit * _Nullable)charset:(id<GNCHttpMessageBuilder>)receiver charset:(GNCCharset *)charset __attribute__((swift_name("charset(_:charset:)"))) __attribute__((unavailable("Use content with particular content type and charset instead")));
+ (GNCLong * _Nullable)contentLength:(id<GNCHttpMessage>)receiver __attribute__((swift_name("contentLength(_:)")));
+ (GNCLong * _Nullable)contentLength_:(id<GNCHttpMessageBuilder>)receiver __attribute__((swift_name("contentLength(__:)")));
+ (void)contentLength:(id<GNCHttpMessageBuilder>)receiver length:(int32_t)length __attribute__((swift_name("contentLength(_:length:)"))) __attribute__((unavailable("Content-Length is controlled by underlying engine. Don't specify it explicitly.")));
+ (GNCContentType * _Nullable)contentType:(id<GNCHttpMessage>)receiver __attribute__((swift_name("contentType(_:)")));
+ (GNCContentType * _Nullable)contentType_:(id<GNCHttpMessageBuilder>)receiver __attribute__((swift_name("contentType(__:)")));
+ (void)contentType:(id<GNCHttpMessageBuilder>)receiver type:(GNCContentType *)type __attribute__((swift_name("contentType(_:type:)")));
+ (NSArray<GNCCookie *> *)cookies:(id<GNCHttpMessageBuilder>)receiver __attribute__((swift_name("cookies(_:)")));
+ (NSString * _Nullable)etag:(id<GNCHttpMessage>)receiver __attribute__((swift_name("etag(_:)")));
+ (NSString * _Nullable)etag_:(id<GNCHttpMessageBuilder>)receiver __attribute__((swift_name("etag(__:)")));
+ (void)ifNoneMatch:(id<GNCHttpMessageBuilder>)receiver value:(NSString *)value __attribute__((swift_name("ifNoneMatch(_:value:)")));
+ (void)maxAge:(id<GNCHttpMessageBuilder>)receiver seconds:(int32_t)seconds __attribute__((swift_name("maxAge(_:seconds:)")));
+ (NSArray<GNCCookie *> *)setCookie:(id<GNCHttpMessage>)receiver __attribute__((swift_name("setCookie(_:)")));
+ (void)userAgent:(id<GNCHttpMessageBuilder>)receiver content:(NSString *)content __attribute__((swift_name("userAgent(_:content:)")));
+ (NSArray<NSString *> * _Nullable)vary:(id<GNCHttpMessage>)receiver __attribute__((swift_name("vary(_:)")));
+ (NSArray<NSString *> * _Nullable)vary_:(id<GNCHttpMessageBuilder>)receiver __attribute__((swift_name("vary(__:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CodecsKt")))
@interface GNCCodecsKt : GNCBase
+ (NSString *)decodeURLPart:(NSString *)receiver start:(int32_t)start end:(int32_t)end charset:(GNCCharset *)charset __attribute__((swift_name("decodeURLPart(_:start:end:charset:)")));
+ (NSString *)decodeURLQueryComponent:(NSString *)receiver start:(int32_t)start end:(int32_t)end plusIsSpace:(BOOL)plusIsSpace charset:(GNCCharset *)charset __attribute__((swift_name("decodeURLQueryComponent(_:start:end:plusIsSpace:charset:)")));
+ (NSString *)encodeOAuth:(NSString *)receiver __attribute__((swift_name("encodeOAuth(_:)")));
+ (NSString *)encodeURLParameter:(NSString *)receiver spaceToPlus:(BOOL)spaceToPlus __attribute__((swift_name("encodeURLParameter(_:spaceToPlus:)")));
+ (NSString *)encodeURLPath:(NSString *)receiver __attribute__((swift_name("encodeURLPath(_:)")));
+ (NSString *)encodeURLPathPart:(NSString *)receiver __attribute__((swift_name("encodeURLPathPart(_:)")));
+ (NSString *)encodeURLQueryComponent:(NSString *)receiver encodeFull:(BOOL)encodeFull spaceToPlus:(BOOL)spaceToPlus charset:(GNCCharset *)charset __attribute__((swift_name("encodeURLQueryComponent(_:encodeFull:spaceToPlus:charset:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpUrlEncodedKt")))
@interface GNCHttpUrlEncodedKt : GNCBase
+ (NSString *)formUrlEncode:(id<GNCParameters>)receiver __attribute__((swift_name("formUrlEncode(_:)")));
+ (NSString *)formUrlEncode_:(NSArray<GNCKotlinPair<NSString *, NSString *> *> *)receiver __attribute__((swift_name("formUrlEncode(__:)")));
+ (void)formUrlEncodeTo:(id<GNCParameters>)receiver out:(id<GNCKotlinAppendable>)out __attribute__((swift_name("formUrlEncodeTo(_:out:)")));
+ (void)formUrlEncodeTo:(NSArray<GNCKotlinPair<NSString *, NSString *> *> *)receiver out_:(id<GNCKotlinAppendable>)out __attribute__((swift_name("formUrlEncodeTo(_:out_:)")));
+ (id<GNCParameters>)parseUrlEncodedParameters:(NSString *)receiver defaultEncoding:(GNCCharset *)defaultEncoding limit:(int32_t)limit __attribute__((swift_name("parseUrlEncodedParameters(_:defaultEncoding:limit:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateUtilsKt")))
@interface GNCDateUtilsKt : GNCBase
+ (GNCGMTDate *)fromCookieToGmtDate:(NSString *)receiver __attribute__((swift_name("fromCookieToGmtDate(_:)")));
+ (GNCGMTDate *)fromHttpToGmtDate:(NSString *)receiver __attribute__((swift_name("fromHttpToGmtDate(_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpAuthHeaderKt")))
@interface GNCHttpAuthHeaderKt : GNCBase
+ (GNCHttpAuthHeader * _Nullable)parseAuthorizationHeaderHeaderValue:(NSString *)headerValue __attribute__((swift_name("parseAuthorizationHeader(headerValue:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CachingOptionsKt")))
@interface GNCCachingOptionsKt : GNCBase
@property (class, readonly) GNCAttributeKey<GNCCachingOptions *> *CachingProperty __attribute__((swift_name("CachingProperty")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("VersionsKt")))
@interface GNCVersionsKt : GNCBase
+ (GNCEntityTagVersion *)EntityTagVersionSpec:(NSString *)spec __attribute__((swift_name("EntityTagVersion(spec:)")));
@property (class, readonly) GNCAttributeKey<NSArray<id<GNCVersion>> *> *VersionListProperty __attribute__((swift_name("VersionListProperty")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MultipartKt")))
@interface GNCMultipartKt : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)forEachPart:(id<GNCMultiPartData>)receiver partHandler:(id<GNCKotlinSuspendFunction1>)partHandler completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("forEachPart(_:partHandler:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readAllParts:(id<GNCMultiPartData>)receiver completionHandler:(void (^)(NSArray<GNCPartData *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAllParts(_:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UtilsKt__")))
@interface GNCUtilsKt__ : GNCBase
+ (NSString *)websocketServerAcceptNonce:(NSString *)nonce __attribute__((swift_name("websocketServerAccept(nonce:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AttributesNativeKt")))
@interface GNCAttributesNativeKt : GNCBase
+ (id<GNCAttributes>)AttributesConcurrent:(BOOL)concurrent __attribute__((swift_name("Attributes(concurrent:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CryptoNativeKt")))
@interface GNCCryptoNativeKt : GNCBase
+ (id<GNCDigest>)DigestName:(NSString *)name __attribute__((swift_name("Digest(name:)")));
+ (NSString *)generateNonce __attribute__((swift_name("generateNonce()")));
+ (GNCKotlinByteArray *)sha1Bytes:(GNCKotlinByteArray *)bytes __attribute__((swift_name("sha1(bytes:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutinesUtilsKt")))
@interface GNCCoroutinesUtilsKt : GNCBase
+ (id<GNCKotlinCoroutineContext>)SilentSupervisorParent:(id<GNCJob> _Nullable)parent __attribute__((swift_name("SilentSupervisor(parent:)")));
+ (void)printDebugTree:(id<GNCJob>)receiver offset:(int32_t)offset __attribute__((swift_name("printDebugTree(_:offset:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CollectionsKt")))
@interface GNCCollectionsKt : GNCBase
+ (GNCMutableDictionary<NSString *, id> *)caseInsensitiveMap __attribute__((swift_name("caseInsensitiveMap()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CryptoKt")))
@interface GNCCryptoKt : GNCBase
+ (GNCKotlinByteArray *)generateNonceSize:(int32_t)size __attribute__((swift_name("generateNonce(size:)")));
+ (NSString *)hexBytes:(GNCKotlinByteArray *)bytes __attribute__((swift_name("hex(bytes:)")));
+ (GNCKotlinByteArray *)hexS:(NSString *)s __attribute__((swift_name("hex(s:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)build:(id<GNCDigest>)receiver bytes:(GNCKotlinByteArray *)bytes completionHandler:(void (^)(GNCKotlinByteArray * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("build(_:bytes:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)build:(id<GNCDigest>)receiver string:(NSString *)string charset:(GNCCharset *)charset completionHandler:(void (^)(GNCKotlinByteArray * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("build(_:string:charset:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StringValuesKt")))
@interface GNCStringValuesKt : GNCBase
+ (id<GNCStringValues>)valuesOf __attribute__((swift_name("valuesOf()")));
+ (id<GNCStringValues>)valuesOfPairs:(GNCKotlinArray<GNCKotlinPair<NSString *, NSArray<NSString *> *> *> *)pairs caseInsensitiveKey:(BOOL)caseInsensitiveKey __attribute__((swift_name("valuesOf(pairs:caseInsensitiveKey:)")));
+ (id<GNCStringValues>)valuesOfName:(NSString *)name value:(NSString *)value caseInsensitiveKey:(BOOL)caseInsensitiveKey __attribute__((swift_name("valuesOf(name:value:caseInsensitiveKey:)")));
+ (id<GNCStringValues>)valuesOfName:(NSString *)name values:(NSArray<NSString *> *)values caseInsensitiveKey:(BOOL)caseInsensitiveKey __attribute__((swift_name("valuesOf(name:values:caseInsensitiveKey:)")));
+ (id<GNCStringValues>)valuesOfMap:(NSDictionary<NSString *, id> *)map caseInsensitiveKey:(BOOL)caseInsensitiveKey __attribute__((swift_name("valuesOf(map:caseInsensitiveKey:)")));
+ (id<GNCStringValuesBuilder>)appendAll:(id<GNCStringValuesBuilder>)receiver builder:(id<GNCStringValuesBuilder>)builder __attribute__((swift_name("appendAll(_:builder:)")));
+ (void)appendFiltered:(id<GNCStringValuesBuilder>)receiver source:(id<GNCStringValues>)source keepEmpty:(BOOL)keepEmpty predicate:(GNCBoolean *(^)(NSString *, NSString *))predicate __attribute__((swift_name("appendFiltered(_:source:keepEmpty:predicate:)")));
+ (id<GNCStringValuesBuilder>)appendIfNameAbsent:(id<GNCStringValuesBuilder>)receiver name:(NSString *)name value:(NSString *)value __attribute__((swift_name("appendIfNameAbsent(_:name:value:)")));
+ (id<GNCStringValuesBuilder>)appendIfNameAndValueAbsent:(id<GNCStringValuesBuilder>)receiver name:(NSString *)name value:(NSString *)value __attribute__((swift_name("appendIfNameAndValueAbsent(_:name:value:)")));
+ (id<GNCStringValues>)filter:(id<GNCStringValues>)receiver keepEmpty:(BOOL)keepEmpty predicate:(GNCBoolean *(^)(NSString *, NSString *))predicate __attribute__((swift_name("filter(_:keepEmpty:predicate:)")));
+ (NSArray<GNCKotlinPair<NSString *, NSString *> *> *)flattenEntries:(id<GNCStringValues>)receiver __attribute__((swift_name("flattenEntries(_:)")));
+ (void)flattenForEach:(id<GNCStringValues>)receiver block:(void (^)(NSString *, NSString *))block __attribute__((swift_name("flattenForEach(_:block:)")));
+ (NSDictionary<NSString *, NSArray<NSString *> *> *)toMap:(id<GNCStringValues>)receiver __attribute__((swift_name("toMap(_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TextKt")))
@interface GNCTextKt : GNCBase
+ (GNCKotlinPair<NSString *, NSString *> *)chomp:(NSString *)receiver separator:(NSString *)separator onMissingDelimiter:(GNCKotlinPair<NSString *, NSString *> *(^)(void))onMissingDelimiter __attribute__((swift_name("chomp(_:separator:onMissingDelimiter:)")));
+ (NSString *)escapeHTML:(NSString *)receiver __attribute__((swift_name("escapeHTML(_:)")));
+ (NSString *)toLowerCasePreservingASCIIRules:(NSString *)receiver __attribute__((swift_name("toLowerCasePreservingASCIIRules(_:)")));
+ (NSString *)toUpperCasePreservingASCIIRules:(NSString *)receiver __attribute__((swift_name("toUpperCasePreservingASCIIRules(_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteChannelsKt")))
@interface GNCByteChannelsKt : GNCBase
+ (void)doCopyToBoth:(id<GNCByteReadChannel>)receiver first:(id<GNCByteWriteChannel>)first second:(id<GNCByteWriteChannel>)second __attribute__((swift_name("doCopyToBoth(_:first:second:)")));
+ (GNCKotlinPair<id<GNCByteReadChannel>, id<GNCByteReadChannel>> *)split:(id<GNCByteReadChannel>)receiver coroutineScope:(id<GNCCoroutineScope>)coroutineScope __attribute__((swift_name("split(_:coroutineScope:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)toByteArray:(id<GNCByteReadChannel>)receiver completionHandler:(void (^)(GNCKotlinByteArray * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("toByteArray(_:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Base64Kt")))
@interface GNCBase64Kt : GNCBase
+ (GNCKotlinByteArray *)decodeBase64Bytes:(NSString *)receiver __attribute__((swift_name("decodeBase64Bytes(_:)")));
+ (NSString *)decodeBase64String:(NSString *)receiver __attribute__((swift_name("decodeBase64String(_:)")));
+ (NSString *)encodeBase64:(NSString *)receiver __attribute__((swift_name("encodeBase64(_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CharsetKt")))
@interface GNCCharsetKt : GNCBase
+ (BOOL)isLowerCase:(unichar)receiver __attribute__((swift_name("isLowerCase(_:)")));
+ (GNCKotlinCharArray *)toCharArray:(NSString *)receiver __attribute__((swift_name("toCharArray(_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AttributesKt")))
@interface GNCAttributesKt : GNCBase
+ (void)putAll:(id<GNCAttributes>)receiver other:(id<GNCAttributes>)other __attribute__((swift_name("putAll(_:other:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CollectionsNativeKt")))
@interface GNCCollectionsNativeKt : GNCBase
+ (NSSet<id> *)unmodifiable:(NSSet<id> *)receiver __attribute__((swift_name("unmodifiable(_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KtorSimpleLoggerNativeKt")))
@interface GNCKtorSimpleLoggerNativeKt : GNCBase
+ (id<GNCLogger__>)KtorSimpleLoggerName:(NSString *)name __attribute__((swift_name("KtorSimpleLogger(name:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LoggerKt")))
@interface GNCLoggerKt : GNCBase
+ (void)error:(id<GNCLogger__>)receiver exception:(GNCKotlinThrowable *)exception __attribute__((swift_name("error(_:exception:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NetworkAddressNativeKt")))
@interface GNCNetworkAddressNativeKt : GNCBase
+ (GNCNetworkAddress *)NetworkAddressHostname:(NSString *)hostname port:(int32_t)port __attribute__((swift_name("NetworkAddress(hostname:port:)")));
+ (GNCNetworkAddress *)ResolvedNetworkAddressHostname:(NSString *)hostname port:(int32_t)port explicitAddress:(id _Nullable)explicitAddress __attribute__((swift_name("ResolvedNetworkAddress(hostname:port:explicitAddress:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ReadersKt")))
@interface GNCReadersKt : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)toByteArray:(id<GNCByteReadChannel>)receiver limit:(int32_t)limit completionHandler:(void (^)(GNCKotlinByteArray * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("toByteArray(_:limit:completionHandler:)")));
+ (void)use:(id<GNCByteWriteChannel>)receiver block:(void (^)(id<GNCByteWriteChannel>))block __attribute__((swift_name("use(_:block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContextUtilsKt")))
@interface GNCContextUtilsKt : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)addToContextInDebugModePluginName:(NSString *)pluginName block:(id<GNCKotlinSuspendFunction0>)block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("addToContextInDebugMode(pluginName:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)doInitContextInDebugModeBlock:(id<GNCKotlinSuspendFunction0>)block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("doInitContextInDebugMode(block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)useContextElementInDebugModeKey:(id<GNCKotlinCoroutineContextKey>)key action:(void (^)(id<GNCKotlinCoroutineContextElement>))action completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("useContextElementInDebugMode(key:action:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateNativeKt")))
@interface GNCDateNativeKt : GNCBase
+ (GNCGMTDate *)GMTDateSeconds:(int32_t)seconds minutes:(int32_t)minutes hours:(int32_t)hours dayOfMonth:(int32_t)dayOfMonth month:(GNCMonth *)month year:(int32_t)year __attribute__((swift_name("GMTDate(seconds:minutes:hours:dayOfMonth:month:year:)")));
+ (GNCGMTDate *)GMTDateTimestamp:(GNCLong * _Nullable)timestamp __attribute__((swift_name("GMTDate(timestamp:)")));
+ (int64_t)getTimeMillis __attribute__((swift_name("getTimeMillis()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TypeInfoNativeKt")))
@interface GNCTypeInfoNativeKt : GNCBase
+ (id<GNCKotlinKType>)platformType:(id<GNCKotlinKType>)receiver __attribute__((swift_name("platformType(_:)")));
+ (GNCTypeInfo *)typeInfo __attribute__((swift_name("typeInfo()")));
+ (BOOL)instanceOf:(id)receiver type:(id<GNCKotlinKClass>)type __attribute__((swift_name("instanceOf(_:type:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ConcurrentSetKt")))
@interface GNCConcurrentSetKt : GNCBase
+ (GNCMutableSet<id> *)ConcurrentSet __attribute__((swift_name("ConcurrentSet()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CollectionUtilsKt")))
@interface GNCCollectionUtilsKt : GNCBase
+ (NSMutableArray<id> *)sharedList __attribute__((swift_name("sharedList()"))) __attribute__((deprecated("Will be dropped with new memory model enabled by default")));
+ (NSMutableArray<id> *)sharedListOfValues:(GNCKotlinArray<id> *)values __attribute__((swift_name("sharedListOf(values:)"))) __attribute__((deprecated("Will be dropped with new memory model enabled by default")));
+ (GNCMutableDictionary<id, id> *)sharedMapInitialCapacity:(int32_t)initialCapacity __attribute__((swift_name("sharedMap(initialCapacity:)"))) __attribute__((deprecated("Will be dropped with new memory model enabled by default")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteChannelNativeKt")))
@interface GNCByteChannelNativeKt : GNCBase
+ (id<GNCByteChannel>)ByteChannelAutoFlush:(BOOL)autoFlush __attribute__((swift_name("ByteChannel(autoFlush:)")));
+ (id<GNCByteReadChannel>)ByteReadChannelContent:(GNCKotlinByteArray *)content offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("ByteReadChannel(content:offset:length:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)doCopyTo:(id<GNCByteReadChannel>)receiver dst:(id<GNCByteWriteChannel>)dst limit:(int64_t)limit completionHandler:(void (^)(GNCLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("doCopyTo(_:dst:limit:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)joinTo:(id<GNCByteReadChannel>)receiver dst:(id<GNCByteWriteChannel>)dst closeOnEnd:(BOOL)closeOnEnd completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("joinTo(_:dst:closeOnEnd:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteChannelCtorKt")))
@interface GNCByteChannelCtorKt : GNCBase
+ (id<GNCByteReadChannel>)ByteReadChannelContent:(GNCKotlinByteArray *)content __attribute__((swift_name("ByteReadChannel(content:)")));
+ (id<GNCByteReadChannel>)ByteReadChannelContent:(GNCKotlinByteArray *)content offset:(int32_t)offset __attribute__((swift_name("ByteReadChannel(content:offset:)")));
+ (id<GNCByteReadChannel>)ByteReadChannelText:(NSString *)text charset:(GNCCharset *)charset __attribute__((swift_name("ByteReadChannel(text:charset:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutinesKt")))
@interface GNCCoroutinesKt : GNCBase
+ (id<GNCReaderJob>)readerCoroutineContext:(id<GNCKotlinCoroutineContext>)coroutineContext channel:(id<GNCByteChannel>)channel parent:(id<GNCJob> _Nullable)parent block:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("reader(coroutineContext:channel:parent:block:)"))) __attribute__((deprecated("Use scope.reader instead")));
+ (id<GNCReaderJob>)readerCoroutineContext:(id<GNCKotlinCoroutineContext>)coroutineContext autoFlush:(BOOL)autoFlush parent:(id<GNCJob> _Nullable)parent block:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("reader(coroutineContext:autoFlush:parent:block:)"))) __attribute__((deprecated("Use scope.reader instead")));
+ (id<GNCWriterJob>)writerCoroutineContext:(id<GNCKotlinCoroutineContext>)coroutineContext channel:(id<GNCByteChannel>)channel parent:(id<GNCJob> _Nullable)parent block:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("writer(coroutineContext:channel:parent:block:)"))) __attribute__((deprecated("Use scope.writer instead")));
+ (id<GNCWriterJob>)writerCoroutineContext:(id<GNCKotlinCoroutineContext>)coroutineContext autoFlush:(BOOL)autoFlush parent:(id<GNCJob> _Nullable)parent block:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("writer(coroutineContext:autoFlush:parent:block:)"))) __attribute__((deprecated("Use scope.writer instead")));
+ (id<GNCReaderJob>)reader:(id<GNCCoroutineScope>)receiver coroutineContext:(id<GNCKotlinCoroutineContext>)coroutineContext channel:(id<GNCByteChannel>)channel block:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("reader(_:coroutineContext:channel:block:)")));
+ (id<GNCReaderJob>)reader:(id<GNCCoroutineScope>)receiver coroutineContext:(id<GNCKotlinCoroutineContext>)coroutineContext autoFlush:(BOOL)autoFlush block:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("reader(_:coroutineContext:autoFlush:block:)")));
+ (id<GNCWriterJob>)writer:(id<GNCCoroutineScope>)receiver coroutineContext:(id<GNCKotlinCoroutineContext>)coroutineContext channel:(id<GNCByteChannel>)channel block:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("writer(_:coroutineContext:channel:block:)")));
+ (id<GNCWriterJob>)writer:(id<GNCCoroutineScope>)receiver coroutineContext:(id<GNCKotlinCoroutineContext>)coroutineContext autoFlush:(BOOL)autoFlush block:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("writer(_:coroutineContext:autoFlush:block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteReadChannelKt")))
@interface GNCByteReadChannelKt : GNCBase
+ (BOOL)cancel:(id<GNCByteReadChannel>)receiver __attribute__((swift_name("cancel(_:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)doCopyAndClose:(id<GNCByteReadChannel>)receiver dst:(id<GNCByteWriteChannel>)dst limit:(int64_t)limit completionHandler:(void (^)(GNCLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("doCopyAndClose(_:dst:limit:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)doCopyTo:(id<GNCByteReadChannel>)receiver dst:(id<GNCByteWriteChannel>)dst completionHandler:(void (^)(GNCLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("doCopyTo(_:dst:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)discard:(id<GNCByteReadChannel>)receiver completionHandler:(void (^)(GNCLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("discard(_:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)discardExact:(id<GNCByteReadChannel>)receiver n:(int64_t)n completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("discardExact(_:n:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readAvailable:(id<GNCByteReadChannel>)receiver dst:(GNCKotlinByteArray *)dst completionHandler:(void (^)(GNCInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAvailable(_:dst:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readFully:(id<GNCByteReadChannel>)receiver dst:(GNCChunkBuffer *)dst completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("readFully(_:dst:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readFully:(id<GNCByteReadChannel>)receiver dst:(GNCKotlinByteArray *)dst completionHandler_:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("readFully(_:dst:completionHandler_:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readRemaining:(id<GNCByteReadChannel>)receiver completionHandler:(void (^)(GNCByteReadPacket * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readRemaining(_:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readUTF8Line:(id<GNCByteReadChannel>)receiver completionHandler:(void (^)(NSString * _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("readUTF8Line(_:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readUTF8LineTo:(id<GNCByteReadChannel>)receiver out:(id<GNCKotlinAppendable>)out completionHandler:(void (^)(GNCBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readUTF8LineTo(_:out:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteWriteChannelKt")))
@interface GNCByteWriteChannelKt : GNCBase
+ (BOOL)close:(id<GNCByteWriteChannel>)receiver __attribute__((swift_name("close(_:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeAvailable:(id<GNCByteWriteChannel>)receiver src:(GNCKotlinByteArray *)src completionHandler:(void (^)(GNCInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeAvailable(_:src:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeBoolean:(id<GNCByteWriteChannel>)receiver b:(BOOL)b completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeBoolean(_:b:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeByte:(id<GNCByteWriteChannel>)receiver b:(int32_t)b completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeByte(_:b:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeChar:(id<GNCByteWriteChannel>)receiver ch:(unichar)ch completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeChar(_:ch:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeFully:(id<GNCByteWriteChannel>)receiver src:(GNCKotlinByteArray *)src completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(_:src:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeInt:(id<GNCByteWriteChannel>)receiver i:(int64_t)i completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeInt(_:i:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeInt:(id<GNCByteWriteChannel>)receiver i:(int64_t)i byteOrder:(GNCByteOrder *)byteOrder completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeInt(_:i:byteOrder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writePacket:(id<GNCByteWriteChannel>)receiver builder:(void (^)(GNCBytePacketBuilder *))builder completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writePacket(_:builder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writePacketSuspend:(id<GNCByteWriteChannel>)receiver builder:(id<GNCKotlinSuspendFunction1>)builder completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writePacketSuspend(_:builder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeShort:(id<GNCByteWriteChannel>)receiver s:(int32_t)s completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeShort(_:s:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeShort:(id<GNCByteWriteChannel>)receiver s:(int32_t)s byteOrder:(GNCByteOrder *)byteOrder completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeShort(_:s:byteOrder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeStringUtf8:(id<GNCByteWriteChannel>)receiver s:(id)s completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeStringUtf8(_:s:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeStringUtf8:(id<GNCByteWriteChannel>)receiver s:(NSString *)s completionHandler_:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeStringUtf8(_:s:completionHandler_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ReadSessionKt")))
@interface GNCReadSessionKt : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)read:(id<GNCByteReadChannel>)receiver desiredSize:(int32_t)desiredSize block:(GNCInt *(^)(GNCMemory *, GNCLong *, GNCLong *))block completionHandler:(void (^)(GNCInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("read(_:desiredSize:block:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChannelLittleEndianKt")))
@interface GNCChannelLittleEndianKt : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readDouble:(id<GNCByteReadChannel>)receiver byteOrder:(GNCByteOrder *)byteOrder completionHandler:(void (^)(GNCDouble * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readDouble(_:byteOrder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readDoubleLittleEndian:(id<GNCByteReadChannel>)receiver completionHandler:(void (^)(GNCDouble * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readDoubleLittleEndian(_:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readFloat:(id<GNCByteReadChannel>)receiver byteOrder:(GNCByteOrder *)byteOrder completionHandler:(void (^)(GNCFloat * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readFloat(_:byteOrder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readFloatLittleEndian:(id<GNCByteReadChannel>)receiver completionHandler:(void (^)(GNCFloat * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readFloatLittleEndian(_:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readInt:(id<GNCByteReadChannel>)receiver byteOrder:(GNCByteOrder *)byteOrder completionHandler:(void (^)(GNCInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readInt(_:byteOrder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readIntLittleEndian:(id<GNCByteReadChannel>)receiver completionHandler:(void (^)(GNCInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readIntLittleEndian(_:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readLong:(id<GNCByteReadChannel>)receiver byteOrder:(GNCByteOrder *)byteOrder completionHandler:(void (^)(GNCLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readLong(_:byteOrder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readLongLittleEndian:(id<GNCByteReadChannel>)receiver completionHandler:(void (^)(GNCLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readLongLittleEndian(_:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readShort:(id<GNCByteReadChannel>)receiver byteOrder:(GNCByteOrder *)byteOrder completionHandler:(void (^)(GNCShort * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readShort(_:byteOrder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readShortLittleEndian:(id<GNCByteReadChannel>)receiver completionHandler:(void (^)(GNCShort * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readShortLittleEndian(_:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeDouble:(id<GNCByteWriteChannel>)receiver value:(double)value byteOrder:(GNCByteOrder *)byteOrder completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeDouble(_:value:byteOrder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeDoubleLittleEndian:(id<GNCByteWriteChannel>)receiver value:(double)value completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeDoubleLittleEndian(_:value:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeFloat:(id<GNCByteWriteChannel>)receiver value:(float)value byteOrder:(GNCByteOrder *)byteOrder completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFloat(_:value:byteOrder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeFloatLittleEndian:(id<GNCByteWriteChannel>)receiver value:(float)value completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeFloatLittleEndian(_:value:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeInt:(id<GNCByteWriteChannel>)receiver value:(int32_t)value byteOrder:(GNCByteOrder *)byteOrder completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeInt(_:value:byteOrder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeIntLittleEndian:(id<GNCByteWriteChannel>)receiver value:(int32_t)value completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeIntLittleEndian(_:value:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeLong:(id<GNCByteWriteChannel>)receiver value:(int64_t)value byteOrder:(GNCByteOrder *)byteOrder completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeLong(_:value:byteOrder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeLongLittleEndian:(id<GNCByteWriteChannel>)receiver value:(int64_t)value completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeLongLittleEndian(_:value:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeShort:(id<GNCByteWriteChannel>)receiver value:(int16_t)value byteOrder:(GNCByteOrder *)byteOrder completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeShort(_:value:byteOrder:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeShortLittleEndian:(id<GNCByteWriteChannel>)receiver value:(int16_t)value completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("writeShortLittleEndian(_:value:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WriterSessionKt")))
@interface GNCWriterSessionKt : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)write:(id<GNCByteWriteChannel>)receiver desiredSpace:(int32_t)desiredSpace block:(GNCInt *(^)(GNCMemory *, GNCLong *, GNCLong *))block completionHandler:(void (^)(GNCInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("write(_:desiredSpace:block:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteOrderKt")))
@interface GNCByteOrderKt : GNCBase
+ (int8_t)highByte:(int16_t)receiver __attribute__((swift_name("highByte(_:)")));
+ (int32_t)highInt:(int64_t)receiver __attribute__((swift_name("highInt(_:)")));
+ (int16_t)highShort:(int32_t)receiver __attribute__((swift_name("highShort(_:)")));
+ (int8_t)lowByte:(int16_t)receiver __attribute__((swift_name("lowByte(_:)")));
+ (int32_t)lowInt:(int64_t)receiver __attribute__((swift_name("lowInt(_:)")));
+ (int16_t)lowShort:(int32_t)receiver __attribute__((swift_name("lowShort(_:)")));
+ (uint32_t)reverseByteOrder:(uint32_t)receiver __attribute__((swift_name("reverseByteOrder(_:)")));
+ (uint64_t)reverseByteOrder_:(uint64_t)receiver __attribute__((swift_name("reverseByteOrder(__:)")));
+ (uint16_t)reverseByteOrder__:(uint16_t)receiver __attribute__((swift_name("reverseByteOrder(___:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MemoryFactoryKt")))
@interface GNCMemoryFactoryKt : GNCBase
+ (id _Nullable)withMemorySize:(int32_t)size block:(id _Nullable (^)(GNCMemory *))block __attribute__((swift_name("withMemory(size:block:)")));
+ (id _Nullable)withMemorySize:(int64_t)size block_:(id _Nullable (^)(GNCMemory *))block __attribute__((swift_name("withMemory(size:block_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MemoryFactoryNativeKt")))
@interface GNCMemoryFactoryNativeKt : GNCBase
+ (GNCMemory *)doAllocMemory:(id<GNCKotlinNativePlacement>)receiver size:(int32_t)size __attribute__((swift_name("doAllocMemory(_:size:)")));
+ (GNCMemory *)doAllocMemory:(id<GNCKotlinNativePlacement>)receiver size_:(int64_t)size __attribute__((swift_name("doAllocMemory(_:size_:)")));
+ (void)free:(id<GNCKotlinNativeFreeablePlacement>)receiver memory:(GNCMemory *)memory __attribute__((swift_name("free(_:memory:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MemoryNativeKt")))
@interface GNCMemoryNativeKt : GNCBase
+ (void)doCopyTo:(void *)receiver destination:(GNCMemory *)destination offset:(int32_t)offset length:(int32_t)length destinationOffset:(int32_t)destinationOffset __attribute__((swift_name("doCopyTo(_:destination:offset:length:destinationOffset:)")));
+ (void)doCopyTo:(void *)receiver destination:(GNCMemory *)destination offset:(int64_t)offset length:(int64_t)length destinationOffset_:(int64_t)destinationOffset __attribute__((swift_name("doCopyTo(_:destination:offset:length:destinationOffset_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteOrderNativeKt")))
@interface GNCByteOrderNativeKt : GNCBase
+ (double)reverseByteOrder:(double)receiver __attribute__((swift_name("reverseByteOrder(_:)")));
+ (float)reverseByteOrder_:(float)receiver __attribute__((swift_name("reverseByteOrder(__:)")));
+ (int32_t)reverseByteOrder__:(int32_t)receiver __attribute__((swift_name("reverseByteOrder(___:)")));
+ (int64_t)reverseByteOrder___:(int64_t)receiver __attribute__((swift_name("reverseByteOrder(____:)")));
+ (int16_t)reverseByteOrder____:(int16_t)receiver __attribute__((swift_name("reverseByteOrder(_____:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SharedKt")))
@interface GNCSharedKt : GNCBase
+ (id<GNCKotlinReadWriteProperty>)sharedValue:(id _Nullable)value __attribute__((swift_name("shared(value:)"))) __attribute__((unavailable("Is obsolete in new memory model.")));
+ (id<GNCKotlinReadOnlyProperty>)sharedLazyFunction:(id (^)(void))function __attribute__((swift_name("sharedLazy(function:)"))) __attribute__((unavailable("Is obsolete in new memory model.")));
+ (id<GNCKotlinReadOnlyProperty>)threadLocalValue:(id)value __attribute__((swift_name("threadLocal(value:)"))) __attribute__((unavailable("Is obsolete in new memory model.")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PlatformKt")))
@interface GNCPlatformKt : GNCBase
@property (class, readonly) int32_t PACKET_MAX_COPY_SIZE __attribute__((swift_name("PACKET_MAX_COPY_SIZE")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteReadPacketKt")))
@interface GNCByteReadPacketKt : GNCBase
+ (GNCByteReadPacket *)ByteReadPacketArray:(GNCKotlinByteArray *)array offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("ByteReadPacket(array:offset:length:)")));
+ (GNCByteReadPacket *)ByteReadPacketArray:(GNCKotlinByteArray *)array offset:(int32_t)offset length:(int32_t)length block:(void (^)(GNCKotlinByteArray *))block __attribute__((swift_name("ByteReadPacket(array:offset:length:block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BufferUtilsNativeKt")))
@interface GNCBufferUtilsNativeKt : GNCBase
+ (GNCChunkBuffer *)ChunkBufferPtr:(void *)ptr lengthInBytes:(int32_t)lengthInBytes origin:(GNCChunkBuffer * _Nullable)origin __attribute__((swift_name("ChunkBuffer(ptr:lengthInBytes:origin:)")));
+ (GNCChunkBuffer *)ChunkBufferPtr:(void *)ptr lengthInBytes:(int64_t)lengthInBytes origin_:(GNCChunkBuffer * _Nullable)origin __attribute__((swift_name("ChunkBuffer(ptr:lengthInBytes:origin_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StringsNativeKt")))
@interface GNCStringsNativeKt : GNCBase
+ (NSString *)StringBytes:(GNCKotlinByteArray *)bytes offset:(int32_t)offset length:(int32_t)length charset:(GNCCharset *)charset __attribute__((swift_name("String(bytes:offset:length:charset:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BuilderKt")))
@interface GNCBuilderKt : GNCBase
+ (GNCByteReadPacket *)buildPacketBlock:(void (^)(GNCBytePacketBuilder *))block __attribute__((swift_name("buildPacket(block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BufferFactoryKt")))
@interface GNCBufferFactoryKt : GNCBase
+ (id _Nullable)withBufferPool:(id<GNCObjectPool>)pool block:(id _Nullable (^)(GNCBuffer *))block __attribute__((swift_name("withBuffer(pool:block:)")));
+ (id _Nullable)withBufferSize:(int32_t)size block:(id _Nullable (^)(GNCBuffer *))block __attribute__((swift_name("withBuffer(size:block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StringsKt")))
@interface GNCStringsKt : GNCBase
+ (GNCKotlinByteArray *)toByteArray:(NSString *)receiver charset:(GNCCharset *)charset __attribute__((swift_name("toByteArray(_:charset:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CloseableKt")))
@interface GNCCloseableKt : GNCBase
+ (id _Nullable)use:(id<GNCCloseable>)receiver block:(id _Nullable (^)(id<GNCCloseable>))block __attribute__((swift_name("use(_:block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteArrayPoolKt")))
@interface GNCByteArrayPoolKt : GNCBase
@property (class, readonly) id<GNCObjectPool> ByteArrayPool __attribute__((swift_name("ByteArrayPool")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PoolKt")))
@interface GNCPoolKt : GNCBase
+ (id _Nullable)useBorrowed:(id<GNCObjectPool>)receiver block:(id _Nullable (^)(id))block __attribute__((swift_name("useBorrowed(_:block:)"))) __attribute__((deprecated("Use useInstance instead")));
+ (id _Nullable)useInstance:(id<GNCObjectPool>)receiver block:(id _Nullable (^)(id))block __attribute__((swift_name("useInstance(_:block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JobKt")))
@interface GNCJobKt : GNCBase
+ (BOOL)isActive:(id<GNCKotlinCoroutineContext>)receiver __attribute__((swift_name("isActive(_:)")));
+ (id<GNCJob>)job:(id<GNCKotlinCoroutineContext>)receiver __attribute__((swift_name("job(_:)")));
+ (id<GNCCompletableJob>)JobParent:(id<GNCJob> _Nullable)parent __attribute__((swift_name("Job(parent:)")));
+ (void)cancel:(id<GNCKotlinCoroutineContext>)receiver cause:(GNCKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(_:cause:)")));
+ (void)cancel:(id<GNCJob>)receiver message:(NSString *)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("cancel(_:message:cause:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)cancelAndJoin:(id<GNCJob>)receiver completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("cancelAndJoin(_:completionHandler:)")));
+ (void)cancelChildren:(id<GNCKotlinCoroutineContext>)receiver cause:(GNCKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancelChildren(_:cause:)")));
+ (void)cancelChildren:(id<GNCJob>)receiver cause_:(GNCKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancelChildren(_:cause_:)")));
+ (void)ensureActive:(id<GNCKotlinCoroutineContext>)receiver __attribute__((swift_name("ensureActive(_:)")));
+ (void)ensureActive_:(id<GNCJob>)receiver __attribute__((swift_name("ensureActive(__:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineScopeKt")))
@interface GNCCoroutineScopeKt : GNCBase
+ (BOOL)isActive:(id<GNCCoroutineScope>)receiver __attribute__((swift_name("isActive(_:)")));
+ (id<GNCCoroutineScope>)CoroutineScopeContext:(id<GNCKotlinCoroutineContext>)context __attribute__((swift_name("CoroutineScope(context:)")));
+ (id<GNCCoroutineScope>)MainScope __attribute__((swift_name("MainScope()")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)coroutineScopeBlock:(id<GNCKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("coroutineScope(block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)currentCoroutineContextWithCompletionHandler:(void (^)(id<GNCKotlinCoroutineContext> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("currentCoroutineContext(completionHandler:)")));
+ (void)cancel:(id<GNCCoroutineScope>)receiver message:(NSString *)message cause:(GNCKotlinThrowable * _Nullable)cause __attribute__((swift_name("cancel(_:message:cause:)")));
+ (void)cancel:(id<GNCCoroutineScope>)receiver cause:(GNCKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(_:cause:)")));
+ (void)ensureActive:(id<GNCCoroutineScope>)receiver __attribute__((swift_name("ensureActive(_:)")));
+ (id<GNCCoroutineScope>)plus:(id<GNCCoroutineScope>)receiver context:(id<GNCKotlinCoroutineContext>)context __attribute__((swift_name("plus(_:context:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CompletableDeferredKt")))
@interface GNCCompletableDeferredKt : GNCBase
+ (id<GNCCompletableDeferred>)CompletableDeferredValue:(id _Nullable)value __attribute__((swift_name("CompletableDeferred(value:)")));
+ (id<GNCCompletableDeferred>)CompletableDeferredParent:(id<GNCJob> _Nullable)parent __attribute__((swift_name("CompletableDeferred(parent:)")));
+ (BOOL)completeWith:(id<GNCCompletableDeferred>)receiver result:(id _Nullable)result __attribute__((swift_name("completeWith(_:result:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineExceptionHandlerKt")))
@interface GNCCoroutineExceptionHandlerKt : GNCBase
+ (id<GNCCoroutineExceptionHandler>)CoroutineExceptionHandlerHandler:(void (^)(id<GNCKotlinCoroutineContext>, GNCKotlinThrowable *))handler __attribute__((swift_name("CoroutineExceptionHandler(handler:)")));
+ (void)handleCoroutineExceptionContext:(id<GNCKotlinCoroutineContext>)context exception:(GNCKotlinThrowable *)exception __attribute__((swift_name("handleCoroutineException(context:exception:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RunnableKt")))
@interface GNCRunnableKt : GNCBase
+ (id<GNCRunnable>)RunnableBlock:(void (^)(void))block __attribute__((swift_name("Runnable(block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SupervisorKt")))
@interface GNCSupervisorKt : GNCBase
+ (id<GNCCompletableJob>)SupervisorJobParent:(id<GNCJob> _Nullable)parent __attribute__((swift_name("SupervisorJob(parent:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)supervisorScopeBlock:(id<GNCKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("supervisorScope(block:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AwaitKt")))
@interface GNCAwaitKt : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)awaitAllDeferreds:(GNCKotlinArray<id<GNCDeferred>> *)deferreds completionHandler:(void (^)(NSArray<id> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("awaitAll(deferreds:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)joinAllJobs:(GNCKotlinArray<id<GNCJob>> *)jobs completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("joinAll(jobs:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)awaitAll:(id)receiver completionHandler:(void (^)(NSArray<id> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("awaitAll(_:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)joinAll:(id)receiver completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("joinAll(_:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DelayKt")))
@interface GNCDelayKt : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)awaitCancellationWithCompletionHandler:(void (^)(GNCKotlinNothing * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("awaitCancellation(completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)delayTimeMillis:(int64_t)timeMillis completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("delay(timeMillis:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)delayDuration:(int64_t)duration completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("delay(duration:completionHandler:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.FlowPreview
*/
+ (id<GNCFlow>)debounce:(id<GNCFlow>)receiver timeoutMillis:(GNCLong *(^)(id _Nullable))timeoutMillis __attribute__((swift_name("debounce(_:timeoutMillis:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.FlowPreview
 *   kotlin.jvm.JvmName(name="debounceDuration")
*/
+ (id<GNCFlow>)debounce:(id<GNCFlow>)receiver timeout:(id (^)(id _Nullable))timeout __attribute__((swift_name("debounce(_:timeout:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.FlowPreview
*/
+ (id<GNCFlow>)debounce:(id<GNCFlow>)receiver timeoutMillis_:(int64_t)timeoutMillis __attribute__((swift_name("debounce(_:timeoutMillis_:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.FlowPreview
*/
+ (id<GNCFlow>)debounce:(id<GNCFlow>)receiver timeout_:(int64_t)timeout __attribute__((swift_name("debounce(_:timeout_:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.FlowPreview
*/
+ (id<GNCFlow>)sample:(id<GNCFlow>)receiver periodMillis:(int64_t)periodMillis __attribute__((swift_name("sample(_:periodMillis:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.FlowPreview
*/
+ (id<GNCFlow>)sample:(id<GNCFlow>)receiver period:(int64_t)period __attribute__((swift_name("sample(_:period:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.FlowPreview
*/
+ (id<GNCFlow>)timeout:(id<GNCFlow>)receiver timeout:(int64_t)timeout __attribute__((swift_name("timeout(_:timeout:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MultithreadedDispatchersKt")))
@interface GNCMultithreadedDispatchersKt : GNCBase
+ (GNCCloseableCoroutineDispatcher *)doNewFixedThreadPoolContextNThreads:(int32_t)nThreads name:(NSString *)name __attribute__((swift_name("doNewFixedThreadPoolContext(nThreads:name:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MultithreadedDispatchers_commonKt")))
@interface GNCMultithreadedDispatchers_commonKt : GNCBase

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
 *   kotlinx.coroutines.DelicateCoroutinesApi
*/
+ (GNCCloseableCoroutineDispatcher *)doNewSingleThreadContextName:(NSString *)name __attribute__((swift_name("doNewSingleThreadContext(name:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BuildersKt_")))
@interface GNCBuildersKt_ : GNCBase
+ (id _Nullable)runBlockingContext:(id<GNCKotlinCoroutineContext>)context block:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("runBlocking(context:block:)")));
+ (id<GNCFlow>)callbackFlowBlock:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("callbackFlow(block:)")));
+ (id<GNCFlow>)channelFlowBlock:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("channelFlow(block:)")));
+ (id<GNCFlow>)emptyFlow __attribute__((swift_name("emptyFlow()")));
+ (id<GNCFlow>)flowBlock:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("flow(block:)")));
+ (id<GNCFlow>)flowOfValue:(id _Nullable)value __attribute__((swift_name("flowOf(value:)")));
+ (id<GNCFlow>)flowOfElements:(GNCKotlinArray<id> *)elements __attribute__((swift_name("flowOf(elements:)")));
+ (id<GNCFlow>)asFlow:(id _Nullable (^)(void))receiver __attribute__((swift_name("asFlow(_:)")));
+ (id<GNCFlow>)asFlow_:(id)receiver __attribute__((swift_name("asFlow(__:)")));
+ (id<GNCFlow>)asFlow__:(id<GNCKotlinIterator>)receiver __attribute__((swift_name("asFlow(___:)")));
+ (id<GNCFlow>)asFlow___:(id<GNCKotlinSequence>)receiver __attribute__((swift_name("asFlow(____:)")));
+ (id<GNCFlow>)asFlow____:(id<GNCKotlinSuspendFunction0>)receiver __attribute__((swift_name("asFlow(_____:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CancellableContinuationKt")))
@interface GNCCancellableContinuationKt : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)suspendCancellableCoroutineBlock:(void (^)(id<GNCCancellableContinuation>))block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("suspendCancellableCoroutine(block:completionHandler:)")));
+ (void)disposeOnCancellation:(id<GNCCancellableContinuation>)receiver handle:(id<GNCDisposableHandle>)handle __attribute__((swift_name("disposeOnCancellation(_:handle:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Builders_commonKt")))
@interface GNCBuilders_commonKt : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)withContextContext:(id<GNCKotlinCoroutineContext>)context block:(id<GNCKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("withContext(context:block:completionHandler:)")));
+ (id<GNCDeferred>)async:(id<GNCCoroutineScope>)receiver context:(id<GNCKotlinCoroutineContext>)context start:(GNCCoroutineStart *)start block:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("async(_:context:start:block:)")));
+ (id<GNCJob>)launch:(id<GNCCoroutineScope>)receiver context:(id<GNCKotlinCoroutineContext>)context start:(GNCCoroutineStart *)start block:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("launch(_:context:start:block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TimeoutKt")))
@interface GNCTimeoutKt : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)withTimeoutTimeMillis:(int64_t)timeMillis block:(id<GNCKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("withTimeout(timeMillis:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)withTimeoutTimeout:(int64_t)timeout block:(id<GNCKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("withTimeout(timeout:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)withTimeoutOrNullTimeMillis:(int64_t)timeMillis block:(id<GNCKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("withTimeoutOrNull(timeMillis:block:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)withTimeoutOrNullTimeout:(int64_t)timeout block:(id<GNCKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("withTimeoutOrNull(timeout:block:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("YieldKt")))
@interface GNCYieldKt : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)yieldWithCompletionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("yield(completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineContextKt")))
@interface GNCCoroutineContextKt : GNCBase
+ (id<GNCKotlinCoroutineContext>)doNewCoroutineContext:(id<GNCKotlinCoroutineContext>)receiver addedContext:(id<GNCKotlinCoroutineContext>)addedContext __attribute__((swift_name("doNewCoroutineContext(_:addedContext:)")));
+ (id<GNCKotlinCoroutineContext>)doNewCoroutineContext:(id<GNCCoroutineScope>)receiver context:(id<GNCKotlinCoroutineContext>)context __attribute__((swift_name("doNewCoroutineContext(_:context:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CancellableKt")))
@interface GNCCancellableKt : GNCBase
+ (void)startCoroutineCancellable:(id<GNCKotlinSuspendFunction0>)receiver completion:(id<GNCKotlinContinuation>)completion __attribute__((swift_name("startCoroutineCancellable(_:completion:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BroadcastChannelKt")))
@interface GNCBroadcastChannelKt : GNCBase

/**
 * @note annotations
 *   kotlinx.coroutines.ObsoleteCoroutinesApi
*/
+ (id<GNCBroadcastChannel>)BroadcastChannelCapacity:(int32_t)capacity __attribute__((swift_name("BroadcastChannel(capacity:)"))) __attribute__((deprecated("BroadcastChannel is deprecated in the favour of SharedFlow and StateFlow, and is no longer supported")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChannelKt")))
@interface GNCChannelKt : GNCBase
+ (id<GNCChannel>)ChannelCapacity:(int32_t)capacity onBufferOverflow:(GNCBufferOverflow *)onBufferOverflow onUndeliveredElement:(void (^ _Nullable)(id _Nullable))onUndeliveredElement __attribute__((swift_name("Channel(capacity:onBufferOverflow:onUndeliveredElement:)")));
+ (id _Nullable)getOrElse:(id _Nullable)receiver onFailure:(id _Nullable (^)(GNCKotlinThrowable * _Nullable))onFailure __attribute__((swift_name("getOrElse(_:onFailure:)")));
+ (id _Nullable)onClosed:(id _Nullable)receiver action:(void (^)(GNCKotlinThrowable * _Nullable))action __attribute__((swift_name("onClosed(_:action:)")));
+ (id _Nullable)onFailure:(id _Nullable)receiver action:(void (^)(GNCKotlinThrowable * _Nullable))action __attribute__((swift_name("onFailure(_:action:)")));
+ (id _Nullable)onSuccess:(id _Nullable)receiver action:(void (^)(id _Nullable))action __attribute__((swift_name("onSuccess(_:action:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProduceKt")))
@interface GNCProduceKt : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)awaitClose:(id<GNCProducerScope>)receiver block:(void (^)(void))block completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("awaitClose(_:block:completionHandler:)")));
+ (id<GNCReceiveChannel>)produce:(id<GNCCoroutineScope>)receiver context:(id<GNCKotlinCoroutineContext>)context capacity:(int32_t)capacity start:(GNCCoroutineStart *)start onCompletion:(void (^ _Nullable)(GNCKotlinThrowable * _Nullable))onCompletion block:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("produce(_:context:capacity:start:onCompletion:block:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
+ (id<GNCReceiveChannel>)produce:(id<GNCCoroutineScope>)receiver context:(id<GNCKotlinCoroutineContext>)context capacity:(int32_t)capacity block:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("produce(_:context:capacity:block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BroadcastKt")))
@interface GNCBroadcastKt : GNCBase

/**
 * @note annotations
 *   kotlinx.coroutines.ObsoleteCoroutinesApi
*/
+ (id<GNCBroadcastChannel>)broadcast:(id<GNCCoroutineScope>)receiver context:(id<GNCKotlinCoroutineContext>)context capacity:(int32_t)capacity start:(GNCCoroutineStart *)start onCompletion:(void (^ _Nullable)(GNCKotlinThrowable * _Nullable))onCompletion block:(id<GNCKotlinSuspendFunction1>)block __attribute__((swift_name("broadcast(_:context:capacity:start:onCompletion:block:)"))) __attribute__((deprecated("BroadcastChannel is deprecated in the favour of SharedFlow and is no longer supported")));

/**
 * @note annotations
 *   kotlinx.coroutines.ObsoleteCoroutinesApi
*/
+ (id<GNCBroadcastChannel>)broadcast:(id<GNCReceiveChannel>)receiver capacity:(int32_t)capacity start:(GNCCoroutineStart *)start __attribute__((swift_name("broadcast(_:capacity:start:)"))) __attribute__((deprecated("BroadcastChannel is deprecated in the favour of SharedFlow and is no longer supported")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Channels_commonKt")))
@interface GNCChannels_commonKt : GNCBase

/**
 * @note annotations
 *   kotlinx.coroutines.ObsoleteCoroutinesApi
*/
+ (id _Nullable)consume:(id<GNCBroadcastChannel>)receiver block:(id _Nullable (^)(id<GNCReceiveChannel>))block __attribute__((swift_name("consume(_:block:)"))) __attribute__((deprecated("BroadcastChannel is deprecated in the favour of SharedFlow and is no longer supported")));
+ (id _Nullable)consume:(id<GNCReceiveChannel>)receiver block_:(id _Nullable (^)(id<GNCReceiveChannel>))block __attribute__((swift_name("consume(_:block_:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)consumeEach:(id<GNCBroadcastChannel>)receiver action:(void (^)(id _Nullable))action completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("consumeEach(_:action:completionHandler:)"))) __attribute__((deprecated("BroadcastChannel is deprecated in the favour of SharedFlow and is no longer supported")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)consumeEach:(id<GNCReceiveChannel>)receiver action:(void (^)(id _Nullable))action completionHandler_:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("consumeEach(_:action:completionHandler_:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)toList:(id<GNCReceiveChannel>)receiver completionHandler:(void (^)(NSArray<id> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("toList(_:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChannelsKt")))
@interface GNCChannelsKt : GNCBase
+ (id _Nullable)trySendBlocking:(id<GNCSendChannel>)receiver element:(id _Nullable)element __attribute__((swift_name("trySendBlocking(_:element:)")));
+ (id<GNCFlow>)asFlow:(id<GNCBroadcastChannel>)receiver __attribute__((swift_name("asFlow(_:)"))) __attribute__((unavailable("'BroadcastChannel' is obsolete and all corresponding operators are deprecated in the favour of StateFlow and SharedFlow")));
+ (id<GNCFlow>)consumeAsFlow:(id<GNCReceiveChannel>)receiver __attribute__((swift_name("consumeAsFlow(_:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)emitAll:(id<GNCFlowCollector>)receiver channel:(id<GNCReceiveChannel>)channel completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("emitAll(_:channel:completionHandler:)")));
+ (id<GNCReceiveChannel>)produceIn:(id<GNCFlow>)receiver scope:(id<GNCCoroutineScope>)scope __attribute__((swift_name("produceIn(_:scope:)")));
+ (id<GNCFlow>)receiveAsFlow:(id<GNCReceiveChannel>)receiver __attribute__((swift_name("receiveAsFlow(_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MergeKt")))
@interface GNCMergeKt : GNCBase
+ (id<GNCFlow>)mergeFlows:(GNCKotlinArray<id<GNCFlow>> *)flows __attribute__((swift_name("merge(flows:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
+ (id<GNCFlow>)flatMapConcat:(id<GNCFlow>)receiver transform:(id<GNCKotlinSuspendFunction1>)transform __attribute__((swift_name("flatMapConcat(_:transform:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
+ (id<GNCFlow>)flatMapLatest:(id<GNCFlow>)receiver transform:(id<GNCKotlinSuspendFunction1>)transform __attribute__((swift_name("flatMapLatest(_:transform:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
+ (id<GNCFlow>)flatMapMerge:(id<GNCFlow>)receiver concurrency:(int32_t)concurrency transform:(id<GNCKotlinSuspendFunction1>)transform __attribute__((swift_name("flatMapMerge(_:concurrency:transform:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
+ (id<GNCFlow>)flattenConcat:(id<GNCFlow>)receiver __attribute__((swift_name("flattenConcat(_:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
+ (id<GNCFlow>)flattenMerge:(id<GNCFlow>)receiver concurrency:(int32_t)concurrency __attribute__((swift_name("flattenMerge(_:concurrency:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
+ (id<GNCFlow>)mapLatest:(id<GNCFlow>)receiver transform:(id<GNCKotlinSuspendFunction1>)transform __attribute__((swift_name("mapLatest(_:transform:)")));
+ (id<GNCFlow>)merge:(id)receiver __attribute__((swift_name("merge(_:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
+ (id<GNCFlow>)transformLatest:(id<GNCFlow>)receiver transform:(id<GNCKotlinSuspendFunction2>)transform __attribute__((swift_name("transformLatest(_:transform:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.FlowPreview
*/
@property (class, readonly) int32_t DEFAULT_CONCURRENCY __attribute__((swift_name("DEFAULT_CONCURRENCY")));

/**
 * @note annotations
 *   kotlinx.coroutines.FlowPreview
*/
@property (class, readonly) NSString *DEFAULT_CONCURRENCY_PROPERTY_NAME __attribute__((swift_name("DEFAULT_CONCURRENCY_PROPERTY_NAME")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LintKt")))
@interface GNCLintKt : GNCBase
+ (id<GNCKotlinCoroutineContext>)coroutineContext:(id<GNCFlowCollector>)receiver __attribute__((swift_name("coroutineContext(_:)"))) __attribute__((unavailable("coroutineContext is resolved into the property of outer CoroutineScope which is likely to be an error.Use currentCoroutineContext() instead or specify the receiver of coroutineContext explicitly")));
+ (BOOL)isActive:(id<GNCFlowCollector>)receiver __attribute__((swift_name("isActive(_:)"))) __attribute__((unavailable("isActive is resolved into the extension of outer CoroutineScope which is likely to be an error.Use currentCoroutineContext().isActive or cancellable() operator instead or specify the receiver of isActive explicitly. Additionally, flow {} builder emissions are cancellable by default.")));
+ (void)cancel:(id<GNCFlowCollector>)receiver cause:(GNCKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(_:cause:)"))) __attribute__((unavailable("cancel() is resolved into the extension of outer CoroutineScope which is likely to be an error.Use currentCoroutineContext().cancel() instead or specify the receiver of cancel() explicitly")));
+ (id<GNCFlow>)cancellable:(id<GNCSharedFlow>)receiver __attribute__((swift_name("cancellable(_:)"))) __attribute__((unavailable("Applying 'cancellable' to a SharedFlow has no effect. See the SharedFlow documentation on Operator Fusion.")));
+ (id<GNCFlow>)catch:(id<GNCSharedFlow>)receiver action:(id<GNCKotlinSuspendFunction2>)action __attribute__((swift_name("catch(_:action:)"))) __attribute__((deprecated("SharedFlow never completes, so this operator typically has not effect, it can only catch exceptions from 'onSubscribe' operator")));
+ (id<GNCFlow>)conflate:(id<GNCStateFlow>)receiver __attribute__((swift_name("conflate(_:)"))) __attribute__((unavailable("Applying 'conflate' to StateFlow has no effect. See the StateFlow documentation on Operator Fusion.")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)count:(id<GNCSharedFlow>)receiver completionHandler:(void (^)(GNCInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("count(_:completionHandler:)"))) __attribute__((deprecated("SharedFlow never completes, so this terminal operation never completes.")));
+ (id<GNCFlow>)distinctUntilChanged:(id<GNCStateFlow>)receiver __attribute__((swift_name("distinctUntilChanged(_:)"))) __attribute__((unavailable("Applying 'distinctUntilChanged' to StateFlow has no effect. See the StateFlow documentation on Operator Fusion.")));
+ (id<GNCFlow>)flowOn:(id<GNCSharedFlow>)receiver context:(id<GNCKotlinCoroutineContext>)context __attribute__((swift_name("flowOn(_:context:)"))) __attribute__((unavailable("Applying 'flowOn' to SharedFlow has no effect. See the SharedFlow documentation on Operator Fusion.")));
+ (id<GNCFlow>)retry:(id<GNCSharedFlow>)receiver retries:(int64_t)retries predicate:(id<GNCKotlinSuspendFunction1>)predicate __attribute__((swift_name("retry(_:retries:predicate:)"))) __attribute__((deprecated("SharedFlow never completes, so this operator has no effect.")));
+ (id<GNCFlow>)retryWhen:(id<GNCSharedFlow>)receiver predicate:(id<GNCKotlinSuspendFunction3>)predicate __attribute__((swift_name("retryWhen(_:predicate:)"))) __attribute__((deprecated("SharedFlow never completes, so this operator has no effect.")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)toList:(id<GNCSharedFlow>)receiver completionHandler:(void (^)(NSArray<id> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("toList(_:completionHandler:)"))) __attribute__((deprecated("SharedFlow never completes, so this terminal operation never completes.")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)toList:(id<GNCSharedFlow>)receiver destination:(NSMutableArray<id> *)destination completionHandler:(void (^)(GNCKotlinNothing * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("toList(_:destination:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)toSet:(id<GNCSharedFlow>)receiver completionHandler:(void (^)(NSSet<id> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("toSet(_:completionHandler:)"))) __attribute__((deprecated("SharedFlow never completes, so this terminal operation never completes.")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)toSet:(id<GNCSharedFlow>)receiver destination:(GNCMutableSet<id> *)destination completionHandler:(void (^)(GNCKotlinNothing * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("toSet(_:destination:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SharedFlowKt")))
@interface GNCSharedFlowKt : GNCBase
+ (id<GNCMutableSharedFlow>)MutableSharedFlowReplay:(int32_t)replay extraBufferCapacity:(int32_t)extraBufferCapacity onBufferOverflow:(GNCBufferOverflow *)onBufferOverflow __attribute__((swift_name("MutableSharedFlow(replay:extraBufferCapacity:onBufferOverflow:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StateFlowKt")))
@interface GNCStateFlowKt : GNCBase
+ (id<GNCMutableStateFlow>)MutableStateFlowValue:(id _Nullable)value __attribute__((swift_name("MutableStateFlow(value:)")));
+ (id _Nullable)getAndUpdate:(id<GNCMutableStateFlow>)receiver function:(id _Nullable (^)(id _Nullable))function __attribute__((swift_name("getAndUpdate(_:function:)")));
+ (void)update:(id<GNCMutableStateFlow>)receiver function:(id _Nullable (^)(id _Nullable))function __attribute__((swift_name("update(_:function:)")));
+ (id _Nullable)updateAndGet:(id<GNCMutableStateFlow>)receiver function:(id _Nullable (^)(id _Nullable))function __attribute__((swift_name("updateAndGet(_:function:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ZipKt")))
@interface GNCZipKt : GNCBase
+ (id<GNCFlow>)combineFlows:(GNCKotlinArray<id<GNCFlow>> *)flows transform:(id<GNCKotlinSuspendFunction1>)transform __attribute__((swift_name("combine(flows:transform:)")));
+ (id<GNCFlow>)combineFlows:(id)flows transform_:(id<GNCKotlinSuspendFunction1>)transform __attribute__((swift_name("combine(flows:transform_:)")));
+ (id<GNCFlow>)combineFlow:(id<GNCFlow>)flow flow2:(id<GNCFlow>)flow2 flow3:(id<GNCFlow>)flow3 flow4:(id<GNCFlow>)flow4 flow5:(id<GNCFlow>)flow5 transform:(id<GNCKotlinSuspendFunction5>)transform __attribute__((swift_name("combine(flow:flow2:flow3:flow4:flow5:transform:)")));
+ (id<GNCFlow>)combineFlow:(id<GNCFlow>)flow flow2:(id<GNCFlow>)flow2 flow3:(id<GNCFlow>)flow3 flow4:(id<GNCFlow>)flow4 transform:(id<GNCKotlinSuspendFunction4>)transform __attribute__((swift_name("combine(flow:flow2:flow3:flow4:transform:)")));
+ (id<GNCFlow>)combineFlow:(id<GNCFlow>)flow flow2:(id<GNCFlow>)flow2 flow3:(id<GNCFlow>)flow3 transform:(id<GNCKotlinSuspendFunction3>)transform __attribute__((swift_name("combine(flow:flow2:flow3:transform:)")));
+ (id<GNCFlow>)combineFlow:(id<GNCFlow>)flow flow2:(id<GNCFlow>)flow2 transform:(id<GNCKotlinSuspendFunction2>)transform __attribute__((swift_name("combine(flow:flow2:transform:)")));
+ (id<GNCFlow>)combineTransformFlows:(GNCKotlinArray<id<GNCFlow>> *)flows transform:(id<GNCKotlinSuspendFunction2>)transform __attribute__((swift_name("combineTransform(flows:transform:)")));
+ (id<GNCFlow>)combineTransformFlows:(id)flows transform_:(id<GNCKotlinSuspendFunction2>)transform __attribute__((swift_name("combineTransform(flows:transform_:)")));
+ (id<GNCFlow>)combineTransformFlow:(id<GNCFlow>)flow flow2:(id<GNCFlow>)flow2 flow3:(id<GNCFlow>)flow3 flow4:(id<GNCFlow>)flow4 flow5:(id<GNCFlow>)flow5 transform:(id<GNCKotlinSuspendFunction6>)transform __attribute__((swift_name("combineTransform(flow:flow2:flow3:flow4:flow5:transform:)")));
+ (id<GNCFlow>)combineTransformFlow:(id<GNCFlow>)flow flow2:(id<GNCFlow>)flow2 flow3:(id<GNCFlow>)flow3 flow4:(id<GNCFlow>)flow4 transform:(id<GNCKotlinSuspendFunction5>)transform __attribute__((swift_name("combineTransform(flow:flow2:flow3:flow4:transform:)")));
+ (id<GNCFlow>)combineTransformFlow:(id<GNCFlow>)flow flow2:(id<GNCFlow>)flow2 flow3:(id<GNCFlow>)flow3 transform:(id<GNCKotlinSuspendFunction4>)transform __attribute__((swift_name("combineTransform(flow:flow2:flow3:transform:)")));
+ (id<GNCFlow>)combineTransformFlow:(id<GNCFlow>)flow flow2:(id<GNCFlow>)flow2 transform:(id<GNCKotlinSuspendFunction3>)transform __attribute__((swift_name("combineTransform(flow:flow2:transform:)")));

/**
 * @note annotations
 *   kotlin.jvm.JvmName(name="flowCombine")
*/
+ (id<GNCFlow>)combine:(id<GNCFlow>)receiver flow:(id<GNCFlow>)flow transform:(id<GNCKotlinSuspendFunction2>)transform __attribute__((swift_name("combine(_:flow:transform:)")));

/**
 * @note annotations
 *   kotlin.jvm.JvmName(name="flowCombineTransform")
*/
+ (id<GNCFlow>)combineTransform:(id<GNCFlow>)receiver flow:(id<GNCFlow>)flow transform:(id<GNCKotlinSuspendFunction3>)transform __attribute__((swift_name("combineTransform(_:flow:transform:)")));
+ (id<GNCFlow>)zip:(id<GNCFlow>)receiver other:(id<GNCFlow>)other transform:(id<GNCKotlinSuspendFunction2>)transform __attribute__((swift_name("zip(_:other:transform:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ShareKt")))
@interface GNCShareKt : GNCBase
+ (id<GNCSharedFlow>)asSharedFlow:(id<GNCMutableSharedFlow>)receiver __attribute__((swift_name("asSharedFlow(_:)")));
+ (id<GNCStateFlow>)asStateFlow:(id<GNCMutableStateFlow>)receiver __attribute__((swift_name("asStateFlow(_:)")));
+ (id<GNCSharedFlow>)onSubscription:(id<GNCSharedFlow>)receiver action:(id<GNCKotlinSuspendFunction1>)action __attribute__((swift_name("onSubscription(_:action:)")));
+ (id<GNCSharedFlow>)shareIn:(id<GNCFlow>)receiver scope:(id<GNCCoroutineScope>)scope started:(id<GNCSharingStarted>)started replay:(int32_t)replay __attribute__((swift_name("shareIn(_:scope:started:replay:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)stateIn:(id<GNCFlow>)receiver scope:(id<GNCCoroutineScope>)scope completionHandler:(void (^)(id<GNCStateFlow> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("stateIn(_:scope:completionHandler:)")));
+ (id<GNCStateFlow>)stateIn:(id<GNCFlow>)receiver scope:(id<GNCCoroutineScope>)scope started:(id<GNCSharingStarted>)started initialValue:(id _Nullable)initialValue __attribute__((swift_name("stateIn(_:scope:started:initialValue:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContextKt")))
@interface GNCContextKt : GNCBase
+ (id<GNCFlow>)buffer:(id<GNCFlow>)receiver capacity:(int32_t)capacity onBufferOverflow:(GNCBufferOverflow *)onBufferOverflow __attribute__((swift_name("buffer(_:capacity:onBufferOverflow:)")));
+ (id<GNCFlow>)cancellable:(id<GNCFlow>)receiver __attribute__((swift_name("cancellable(_:)")));
+ (id<GNCFlow>)conflate:(id<GNCFlow>)receiver __attribute__((swift_name("conflate(_:)")));
+ (id<GNCFlow>)flowOn:(id<GNCFlow>)receiver context:(id<GNCKotlinCoroutineContext>)context __attribute__((swift_name("flowOn(_:context:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MigrationKt")))
@interface GNCMigrationKt : GNCBase
+ (id<GNCFlow>)cache:(id<GNCFlow>)receiver __attribute__((swift_name("cache(_:)"))) __attribute__((unavailable("Flow analogue of 'cache()' is 'shareIn' with unlimited replay and 'started = SharingStared.Lazily' argument'")));
+ (id<GNCFlow>)combineLatest:(id<GNCFlow>)receiver other:(id<GNCFlow>)other other2:(id<GNCFlow>)other2 other3:(id<GNCFlow>)other3 other4:(id<GNCFlow>)other4 transform:(id<GNCKotlinSuspendFunction5>)transform __attribute__((swift_name("combineLatest(_:other:other2:other3:other4:transform:)"))) __attribute__((unavailable("Flow analogue of 'combineLatest' is 'combine'")));
+ (id<GNCFlow>)combineLatest:(id<GNCFlow>)receiver other:(id<GNCFlow>)other other2:(id<GNCFlow>)other2 other3:(id<GNCFlow>)other3 transform:(id<GNCKotlinSuspendFunction4>)transform __attribute__((swift_name("combineLatest(_:other:other2:other3:transform:)"))) __attribute__((unavailable("Flow analogue of 'combineLatest' is 'combine'")));
+ (id<GNCFlow>)combineLatest:(id<GNCFlow>)receiver other:(id<GNCFlow>)other other2:(id<GNCFlow>)other2 transform:(id<GNCKotlinSuspendFunction3>)transform __attribute__((swift_name("combineLatest(_:other:other2:transform:)"))) __attribute__((unavailable("Flow analogue of 'combineLatest' is 'combine'")));
+ (id<GNCFlow>)combineLatest:(id<GNCFlow>)receiver other:(id<GNCFlow>)other transform:(id<GNCKotlinSuspendFunction2>)transform __attribute__((swift_name("combineLatest(_:other:transform:)"))) __attribute__((unavailable("Flow analogue of 'combineLatest' is 'combine'")));
+ (id<GNCFlow>)compose:(id<GNCFlow>)receiver transformer:(id<GNCFlow> (^)(id<GNCFlow>))transformer __attribute__((swift_name("compose(_:transformer:)"))) __attribute__((unavailable("Flow analogue of 'compose' is 'let'")));
+ (id<GNCFlow>)concatMap:(id<GNCFlow>)receiver mapper:(id<GNCFlow> (^)(id _Nullable))mapper __attribute__((swift_name("concatMap(_:mapper:)"))) __attribute__((unavailable("Flow analogue of 'concatMap' is 'flatMapConcat'")));
+ (id<GNCFlow>)concatWith:(id<GNCFlow>)receiver value:(id _Nullable)value __attribute__((swift_name("concatWith(_:value:)"))) __attribute__((unavailable("Flow analogue of 'concatWith' is 'onCompletion'. Use 'onCompletion { emit(value) }'")));
+ (id<GNCFlow>)concatWith:(id<GNCFlow>)receiver other:(id<GNCFlow>)other __attribute__((swift_name("concatWith(_:other:)"))) __attribute__((unavailable("Flow analogue of 'concatWith' is 'onCompletion'. Use 'onCompletion { if (it == null) emitAll(other) }'")));
+ (id<GNCFlow>)delayEach:(id<GNCFlow>)receiver timeMillis:(int64_t)timeMillis __attribute__((swift_name("delayEach(_:timeMillis:)"))) __attribute__((unavailable("Use 'onEach { delay(timeMillis) }'")));
+ (id<GNCFlow>)delayFlow:(id<GNCFlow>)receiver timeMillis:(int64_t)timeMillis __attribute__((swift_name("delayFlow(_:timeMillis:)"))) __attribute__((unavailable("Use 'onStart { delay(timeMillis) }'")));
+ (id<GNCFlow>)flatMap:(id<GNCFlow>)receiver mapper:(id<GNCKotlinSuspendFunction1>)mapper __attribute__((swift_name("flatMap(_:mapper:)"))) __attribute__((unavailable("Flow analogue is 'flatMapConcat'")));
+ (id<GNCFlow>)flatten:(id<GNCFlow>)receiver __attribute__((swift_name("flatten(_:)"))) __attribute__((unavailable("Flow analogue of 'flatten' is 'flattenConcat'")));
+ (void)forEach:(id<GNCFlow>)receiver action:(id<GNCKotlinSuspendFunction1>)action __attribute__((swift_name("forEach(_:action:)"))) __attribute__((unavailable("Flow analogue of 'forEach' is 'collect'")));
+ (id<GNCFlow>)merge:(id<GNCFlow>)receiver __attribute__((swift_name("merge(_:)"))) __attribute__((unavailable("Flow analogue of 'merge' is 'flattenConcat'")));
+ (id<GNCFlow>)observeOn:(id<GNCFlow>)receiver context:(id<GNCKotlinCoroutineContext>)context __attribute__((swift_name("observeOn(_:context:)"))) __attribute__((unavailable("Collect flow in the desired context instead")));
+ (id<GNCFlow>)onErrorResume:(id<GNCFlow>)receiver fallback:(id<GNCFlow>)fallback __attribute__((swift_name("onErrorResume(_:fallback:)"))) __attribute__((unavailable("Flow analogue of 'onErrorXxx' is 'catch'. Use 'catch { emitAll(fallback) }'")));
+ (id<GNCFlow>)onErrorResumeNext:(id<GNCFlow>)receiver fallback:(id<GNCFlow>)fallback __attribute__((swift_name("onErrorResumeNext(_:fallback:)"))) __attribute__((unavailable("Flow analogue of 'onErrorXxx' is 'catch'. Use 'catch { emitAll(fallback) }'")));
+ (id<GNCFlow>)onErrorReturn:(id<GNCFlow>)receiver fallback:(id _Nullable)fallback __attribute__((swift_name("onErrorReturn(_:fallback:)"))) __attribute__((unavailable("Flow analogue of 'onErrorXxx' is 'catch'. Use 'catch { emit(fallback) }'")));
+ (id<GNCFlow>)onErrorReturn:(id<GNCFlow>)receiver fallback:(id _Nullable)fallback predicate:(GNCBoolean *(^)(GNCKotlinThrowable *))predicate __attribute__((swift_name("onErrorReturn(_:fallback:predicate:)"))) __attribute__((unavailable("Flow analogue of 'onErrorXxx' is 'catch'. Use 'catch { e -> if (predicate(e)) emit(fallback) else throw e }'")));
+ (id<GNCFlow>)publish:(id<GNCFlow>)receiver __attribute__((swift_name("publish(_:)"))) __attribute__((unavailable("Flow analogue of 'publish()' is 'shareIn'. \npublish().connect() is the default strategy (no extra call is needed), \npublish().autoConnect() translates to 'started = SharingStared.Lazily' argument, \npublish().refCount() translates to 'started = SharingStared.WhileSubscribed()' argument.")));
+ (id<GNCFlow>)publish:(id<GNCFlow>)receiver bufferSize:(int32_t)bufferSize __attribute__((swift_name("publish(_:bufferSize:)"))) __attribute__((unavailable("Flow analogue of 'publish(bufferSize)' is 'buffer' followed by 'shareIn'. \npublish().connect() is the default strategy (no extra call is needed), \npublish().autoConnect() translates to 'started = SharingStared.Lazily' argument, \npublish().refCount() translates to 'started = SharingStared.WhileSubscribed()' argument.")));
+ (id<GNCFlow>)publishOn:(id<GNCFlow>)receiver context:(id<GNCKotlinCoroutineContext>)context __attribute__((swift_name("publishOn(_:context:)"))) __attribute__((unavailable("Collect flow in the desired context instead")));
+ (id<GNCFlow>)replay:(id<GNCFlow>)receiver __attribute__((swift_name("replay(_:)"))) __attribute__((unavailable("Flow analogue of 'replay()' is 'shareIn' with unlimited replay. \nreplay().connect() is the default strategy (no extra call is needed), \nreplay().autoConnect() translates to 'started = SharingStared.Lazily' argument, \nreplay().refCount() translates to 'started = SharingStared.WhileSubscribed()' argument.")));
+ (id<GNCFlow>)replay:(id<GNCFlow>)receiver bufferSize:(int32_t)bufferSize __attribute__((swift_name("replay(_:bufferSize:)"))) __attribute__((unavailable("Flow analogue of 'replay(bufferSize)' is 'shareIn' with the specified replay parameter. \nreplay().connect() is the default strategy (no extra call is needed), \nreplay().autoConnect() translates to 'started = SharingStared.Lazily' argument, \nreplay().refCount() translates to 'started = SharingStared.WhileSubscribed()' argument.")));
+ (id<GNCFlow>)scanFold:(id<GNCFlow>)receiver initial:(id _Nullable)initial operation:(id<GNCKotlinSuspendFunction2>)operation __attribute__((swift_name("scanFold(_:initial:operation:)"))) __attribute__((unavailable("Flow has less verbose 'scan' shortcut")));
+ (id<GNCFlow>)scanReduce:(id<GNCFlow>)receiver operation:(id<GNCKotlinSuspendFunction2>)operation __attribute__((swift_name("scanReduce(_:operation:)"))) __attribute__((unavailable("'scanReduce' was renamed to 'runningReduce' to be consistent with Kotlin standard library")));
+ (id<GNCFlow>)skip:(id<GNCFlow>)receiver count:(int32_t)count __attribute__((swift_name("skip(_:count:)"))) __attribute__((unavailable("Flow analogue of 'skip' is 'drop'")));
+ (id<GNCFlow>)startWith:(id<GNCFlow>)receiver value:(id _Nullable)value __attribute__((swift_name("startWith(_:value:)"))) __attribute__((unavailable("Flow analogue of 'startWith' is 'onStart'. Use 'onStart { emit(value) }'")));
+ (id<GNCFlow>)startWith:(id<GNCFlow>)receiver other:(id<GNCFlow>)other __attribute__((swift_name("startWith(_:other:)"))) __attribute__((unavailable("Flow analogue of 'startWith' is 'onStart'. Use 'onStart { emitAll(other) }'")));
+ (void)subscribe:(id<GNCFlow>)receiver __attribute__((swift_name("subscribe(_:)"))) __attribute__((unavailable("Use 'launchIn' with 'onEach', 'onCompletion' and 'catch' instead")));
+ (void)subscribe:(id<GNCFlow>)receiver onEach:(id<GNCKotlinSuspendFunction1>)onEach __attribute__((swift_name("subscribe(_:onEach:)"))) __attribute__((unavailable("Use 'launchIn' with 'onEach', 'onCompletion' and 'catch' instead")));
+ (void)subscribe:(id<GNCFlow>)receiver onEach:(id<GNCKotlinSuspendFunction1>)onEach onError:(id<GNCKotlinSuspendFunction1>)onError __attribute__((swift_name("subscribe(_:onEach:onError:)"))) __attribute__((unavailable("Use 'launchIn' with 'onEach', 'onCompletion' and 'catch' instead")));
+ (id<GNCFlow>)subscribeOn:(id<GNCFlow>)receiver context:(id<GNCKotlinCoroutineContext>)context __attribute__((swift_name("subscribeOn(_:context:)"))) __attribute__((unavailable("Use 'flowOn' instead")));
+ (id<GNCFlow>)switchMap:(id<GNCFlow>)receiver transform:(id<GNCKotlinSuspendFunction1>)transform __attribute__((swift_name("switchMap(_:transform:)"))) __attribute__((unavailable("Flow analogues of 'switchMap' are 'transformLatest', 'flatMapLatest' and 'mapLatest'")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ErrorsKt")))
@interface GNCErrorsKt : GNCBase
+ (id<GNCFlow>)catch:(id<GNCFlow>)receiver action:(id<GNCKotlinSuspendFunction2>)action __attribute__((swift_name("catch(_:action:)")));
+ (id<GNCFlow>)retry:(id<GNCFlow>)receiver retries:(int64_t)retries predicate:(id<GNCKotlinSuspendFunction1>)predicate __attribute__((swift_name("retry(_:retries:predicate:)")));
+ (id<GNCFlow>)retryWhen:(id<GNCFlow>)receiver predicate:(id<GNCKotlinSuspendFunction3>)predicate __attribute__((swift_name("retryWhen(_:predicate:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CollectKt")))
@interface GNCCollectKt : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)collect:(id<GNCFlow>)receiver completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collect(_:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)collectIndexed:(id<GNCFlow>)receiver action:(id<GNCKotlinSuspendFunction2>)action completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collectIndexed(_:action:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)collectLatest:(id<GNCFlow>)receiver action:(id<GNCKotlinSuspendFunction1>)action completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("collectLatest(_:action:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)emitAll:(id<GNCFlowCollector>)receiver flow:(id<GNCFlow>)flow completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("emitAll(_:flow:completionHandler:)")));
+ (id<GNCJob>)launchIn:(id<GNCFlow>)receiver scope:(id<GNCCoroutineScope>)scope __attribute__((swift_name("launchIn(_:scope:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CountKt")))
@interface GNCCountKt : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)count:(id<GNCFlow>)receiver completionHandler:(void (^)(GNCInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("count(_:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)count:(id<GNCFlow>)receiver predicate:(id<GNCKotlinSuspendFunction1>)predicate completionHandler:(void (^)(GNCInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("count(_:predicate:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DistinctKt")))
@interface GNCDistinctKt : GNCBase
+ (id<GNCFlow>)distinctUntilChanged:(id<GNCFlow>)receiver __attribute__((swift_name("distinctUntilChanged(_:)")));
+ (id<GNCFlow>)distinctUntilChanged:(id<GNCFlow>)receiver areEquivalent:(GNCBoolean *(^)(id _Nullable, id _Nullable))areEquivalent __attribute__((swift_name("distinctUntilChanged(_:areEquivalent:)")));
+ (id<GNCFlow>)distinctUntilChangedBy:(id<GNCFlow>)receiver keySelector:(id _Nullable (^)(id _Nullable))keySelector __attribute__((swift_name("distinctUntilChangedBy(_:keySelector:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LimitKt")))
@interface GNCLimitKt : GNCBase
+ (id<GNCFlow>)drop:(id<GNCFlow>)receiver count:(int32_t)count __attribute__((swift_name("drop(_:count:)")));
+ (id<GNCFlow>)dropWhile:(id<GNCFlow>)receiver predicate:(id<GNCKotlinSuspendFunction1>)predicate __attribute__((swift_name("dropWhile(_:predicate:)")));
+ (id<GNCFlow>)take:(id<GNCFlow>)receiver count:(int32_t)count __attribute__((swift_name("take(_:count:)")));
+ (id<GNCFlow>)takeWhile:(id<GNCFlow>)receiver predicate:(id<GNCKotlinSuspendFunction1>)predicate __attribute__((swift_name("takeWhile(_:predicate:)")));
+ (id<GNCFlow>)transformWhile:(id<GNCFlow>)receiver transform:(id<GNCKotlinSuspendFunction2>)transform __attribute__((swift_name("transformWhile(_:transform:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TransformKt")))
@interface GNCTransformKt : GNCBase
+ (id<GNCFlow>)filter:(id<GNCFlow>)receiver predicate:(id<GNCKotlinSuspendFunction1>)predicate __attribute__((swift_name("filter(_:predicate:)")));
+ (id<GNCFlow>)filterIsInstance:(id<GNCFlow>)receiver __attribute__((swift_name("filterIsInstance(_:)")));
+ (id<GNCFlow>)filterIsInstance:(id<GNCFlow>)receiver klass:(id<GNCKotlinKClass>)klass __attribute__((swift_name("filterIsInstance(_:klass:)")));
+ (id<GNCFlow>)filterNot:(id<GNCFlow>)receiver predicate:(id<GNCKotlinSuspendFunction1>)predicate __attribute__((swift_name("filterNot(_:predicate:)")));
+ (id<GNCFlow>)filterNotNull:(id<GNCFlow>)receiver __attribute__((swift_name("filterNotNull(_:)")));
+ (id<GNCFlow>)map:(id<GNCFlow>)receiver transform:(id<GNCKotlinSuspendFunction1>)transform __attribute__((swift_name("map(_:transform:)")));
+ (id<GNCFlow>)mapNotNull:(id<GNCFlow>)receiver transform:(id<GNCKotlinSuspendFunction1>)transform __attribute__((swift_name("mapNotNull(_:transform:)")));
+ (id<GNCFlow>)onEach:(id<GNCFlow>)receiver action:(id<GNCKotlinSuspendFunction1>)action __attribute__((swift_name("onEach(_:action:)")));
+ (id<GNCFlow>)runningFold:(id<GNCFlow>)receiver initial:(id _Nullable)initial operation:(id<GNCKotlinSuspendFunction2>)operation __attribute__((swift_name("runningFold(_:initial:operation:)")));
+ (id<GNCFlow>)runningReduce:(id<GNCFlow>)receiver operation:(id<GNCKotlinSuspendFunction2>)operation __attribute__((swift_name("runningReduce(_:operation:)")));
+ (id<GNCFlow>)scan:(id<GNCFlow>)receiver initial:(id _Nullable)initial operation:(id<GNCKotlinSuspendFunction2>)operation __attribute__((swift_name("scan(_:initial:operation:)")));
+ (id<GNCFlow>)withIndex:(id<GNCFlow>)receiver __attribute__((swift_name("withIndex(_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ReduceKt")))
@interface GNCReduceKt : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)first:(id<GNCFlow>)receiver completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("first(_:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)first:(id<GNCFlow>)receiver predicate:(id<GNCKotlinSuspendFunction1>)predicate completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("first(_:predicate:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)firstOrNull:(id<GNCFlow>)receiver completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("firstOrNull(_:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)firstOrNull:(id<GNCFlow>)receiver predicate:(id<GNCKotlinSuspendFunction1>)predicate completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("firstOrNull(_:predicate:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)fold:(id<GNCFlow>)receiver initial:(id _Nullable)initial operation:(id<GNCKotlinSuspendFunction2>)operation completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("fold(_:initial:operation:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)last:(id<GNCFlow>)receiver completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("last(_:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)lastOrNull:(id<GNCFlow>)receiver completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("lastOrNull(_:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)reduce:(id<GNCFlow>)receiver operation:(id<GNCKotlinSuspendFunction2>)operation completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("reduce(_:operation:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)single:(id<GNCFlow>)receiver completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("single(_:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)singleOrNull:(id<GNCFlow>)receiver completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("singleOrNull(_:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EmittersKt")))
@interface GNCEmittersKt : GNCBase
+ (id<GNCFlow>)onCompletion:(id<GNCFlow>)receiver action:(id<GNCKotlinSuspendFunction2>)action __attribute__((swift_name("onCompletion(_:action:)")));
+ (id<GNCFlow>)onEmpty:(id<GNCFlow>)receiver action:(id<GNCKotlinSuspendFunction1>)action __attribute__((swift_name("onEmpty(_:action:)")));
+ (id<GNCFlow>)onStart:(id<GNCFlow>)receiver action:(id<GNCKotlinSuspendFunction1>)action __attribute__((swift_name("onStart(_:action:)")));
+ (id<GNCFlow>)transform:(id<GNCFlow>)receiver transform:(id<GNCKotlinSuspendFunction2>)transform __attribute__((swift_name("transform(_:transform:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CollectionKt")))
@interface GNCCollectionKt : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)toCollection:(id<GNCFlow>)receiver destination:(id)destination completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("toCollection(_:destination:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)toList:(id<GNCFlow>)receiver destination:(NSMutableArray<id> *)destination completionHandler:(void (^)(NSArray<id> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("toList(_:destination:completionHandler:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)toSet:(id<GNCFlow>)receiver destination:(GNCMutableSet<id> *)destination completionHandler:(void (^)(NSSet<id> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("toSet(_:destination:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SelectKt")))
@interface GNCSelectKt : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)selectBuilder:(void (^)(id<GNCSelectBuilder>))builder completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("select(builder:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SelectUnbiasedKt")))
@interface GNCSelectUnbiasedKt : GNCBase

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)selectUnbiasedBuilder:(void (^)(id<GNCSelectBuilder>))builder completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("selectUnbiased(builder:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WhileSelectKt")))
@interface GNCWhileSelectKt : GNCBase

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)whileSelectBuilder:(void (^)(id<GNCSelectBuilder>))builder completionHandler:(void (^)(NSError * _Nullable))completionHandler __attribute__((swift_name("whileSelect(builder:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OnTimeoutKt")))
@interface GNCOnTimeoutKt : GNCBase

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
+ (void)onTimeout:(id<GNCSelectBuilder>)receiver timeMillis:(int64_t)timeMillis block:(id<GNCKotlinSuspendFunction0>)block __attribute__((swift_name("onTimeout(_:timeMillis:block:)")));

/**
 * @note annotations
 *   kotlinx.coroutines.ExperimentalCoroutinesApi
*/
+ (void)onTimeout:(id<GNCSelectBuilder>)receiver timeout:(int64_t)timeout block:(id<GNCKotlinSuspendFunction0>)block __attribute__((swift_name("onTimeout(_:timeout:block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Synchronized_commonKt")))
@interface GNCSynchronized_commonKt : GNCBase
+ (id _Nullable)synchronizedLock:(GNCSynchronizedObject *)lock block:(id _Nullable (^)(void))block __attribute__((swift_name("synchronized(lock:block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SynchronizedKt")))
@interface GNCSynchronizedKt : GNCBase
+ (id _Nullable)synchronizedImplLock:(GNCSynchronizedObject *)lock block:(id _Nullable (^)(void))block __attribute__((swift_name("synchronizedImpl(lock:block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DispatchedContinuationKt")))
@interface GNCDispatchedContinuationKt : GNCBase
+ (void)resumeCancellableWith:(id<GNCKotlinContinuation>)receiver result:(id _Nullable)result onCancellation:(void (^ _Nullable)(GNCKotlinThrowable *))onCancellation __attribute__((swift_name("resumeCancellableWith(_:result:onCancellation:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MutexKt")))
@interface GNCMutexKt : GNCBase
+ (id<GNCMutex>)MutexLocked:(BOOL)locked __attribute__((swift_name("Mutex(locked:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)withLock:(id<GNCMutex>)receiver owner:(id _Nullable)owner action:(id _Nullable (^)(void))action completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("withLock(_:owner:action:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SemaphoreKt")))
@interface GNCSemaphoreKt : GNCBase
+ (id<GNCSemaphore>)SemaphorePermits:(int32_t)permits acquiredPermits:(int32_t)acquiredPermits __attribute__((swift_name("Semaphore(permits:acquiredPermits:)")));

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
+ (void)withPermit:(id<GNCSemaphore>)receiver action:(id _Nullable (^)(void))action completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("withPermit(_:action:completionHandler:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonKt")))
@interface GNCJsonKt : GNCBase
+ (GNCJson *)JsonFrom:(GNCJson *)from builderAction:(void (^)(GNCJsonBuilder *))builderAction __attribute__((swift_name("Json(from:builderAction:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonElementKt")))
@interface GNCJsonElementKt : GNCBase
+ (GNCJsonPrimitive *)JsonPrimitiveValue:(GNCBoolean * _Nullable)value __attribute__((swift_name("JsonPrimitive(value:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
+ (GNCJsonNull *)JsonPrimitiveValue_:(GNCKotlinNothing * _Nullable)value __attribute__((swift_name("JsonPrimitive(value_:)")));
+ (GNCJsonPrimitive *)JsonPrimitiveValue__:(id _Nullable)value __attribute__((swift_name("JsonPrimitive(value__:)")));
+ (GNCJsonPrimitive *)JsonPrimitiveValue___:(NSString * _Nullable)value __attribute__((swift_name("JsonPrimitive(value___:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
+ (GNCJsonPrimitive *)JsonUnquotedLiteralValue:(NSString * _Nullable)value __attribute__((swift_name("JsonUnquotedLiteral(value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonElementBuildersKt")))
@interface GNCJsonElementBuildersKt : GNCBase
+ (NSArray<GNCJsonElement *> *)buildJsonArrayBuilderAction:(void (^)(GNCJsonArrayBuilder *))builderAction __attribute__((swift_name("buildJsonArray(builderAction:)")));
+ (NSDictionary<NSString *, GNCJsonElement *> *)buildJsonObjectBuilderAction:(void (^)(GNCJsonObjectBuilder *))builderAction __attribute__((swift_name("buildJsonObject(builderAction:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TraceKt")))
@interface GNCTraceKt : GNCBase
+ (GNCTraceBase *)TraceSize:(int32_t)size format:(GNCTraceFormat *)format __attribute__((swift_name("Trace(size:format:)")));
@property (class, readonly) GNCTraceFormat *traceFormatDefault __attribute__((swift_name("traceFormatDefault")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TraceFormatKt")))
@interface GNCTraceFormatKt : GNCBase
+ (GNCTraceFormat *)TraceFormatFormat:(NSString *(^)(GNCInt *, id))format __attribute__((swift_name("TraceFormat(format:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AtomicFUKt")))
@interface GNCAtomicFUKt : GNCBase
+ (id)atomicInitial:(id _Nullable)initial __attribute__((swift_name("atomic(initial:)")));
+ (id)atomicInitial:(id _Nullable)initial trace:(GNCTraceBase *)trace __attribute__((swift_name("atomic(initial:trace:)")));
+ (id)atomicInitial_:(BOOL)initial __attribute__((swift_name("atomic(initial_:)")));
+ (id)atomicInitial:(BOOL)initial trace_:(GNCTraceBase *)trace __attribute__((swift_name("atomic(initial:trace_:)")));
+ (id)atomicInitial__:(int32_t)initial __attribute__((swift_name("atomic(initial__:)")));
+ (id)atomicInitial:(int32_t)initial trace__:(GNCTraceBase *)trace __attribute__((swift_name("atomic(initial:trace__:)")));
+ (id)atomicInitial___:(int64_t)initial __attribute__((swift_name("atomic(initial___:)")));
+ (id)atomicInitial:(int64_t)initial trace___:(GNCTraceBase *)trace __attribute__((swift_name("atomic(initial:trace___:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AtomicFU_commonKt")))
@interface GNCAtomicFU_commonKt : GNCBase
+ (GNCAtomicArray<id> *)atomicArrayOfNullsSize:(int32_t)size __attribute__((swift_name("atomicArrayOfNulls(size:)")));
+ (BOOL)getAndUpdate:(id)receiver function:(GNCBoolean *(^)(GNCBoolean *))function __attribute__((swift_name("getAndUpdate(_:function:)")));
+ (int32_t)getAndUpdate:(id)receiver function_:(GNCInt *(^)(GNCInt *))function __attribute__((swift_name("getAndUpdate(_:function_:)")));
+ (int64_t)getAndUpdate:(id)receiver function__:(GNCLong *(^)(GNCLong *))function __attribute__((swift_name("getAndUpdate(_:function__:)")));
+ (id _Nullable)getAndUpdate:(id)receiver function___:(id _Nullable (^)(id _Nullable))function __attribute__((swift_name("getAndUpdate(_:function___:)")));
+ (void)loop:(id)receiver action:(void (^)(GNCBoolean *))action __attribute__((swift_name("loop(_:action:)")));
+ (void)loop:(id)receiver action_:(void (^)(GNCInt *))action __attribute__((swift_name("loop(_:action_:)")));
+ (void)loop:(id)receiver action__:(void (^)(GNCLong *))action __attribute__((swift_name("loop(_:action__:)")));
+ (void)loop:(id)receiver action___:(void (^)(id _Nullable))action __attribute__((swift_name("loop(_:action___:)")));
+ (void)update:(id)receiver function:(GNCBoolean *(^)(GNCBoolean *))function __attribute__((swift_name("update(_:function:)")));
+ (void)update:(id)receiver function_:(GNCInt *(^)(GNCInt *))function __attribute__((swift_name("update(_:function_:)")));
+ (void)update:(id)receiver function__:(GNCLong *(^)(GNCLong *))function __attribute__((swift_name("update(_:function__:)")));
+ (void)update:(id)receiver function___:(id _Nullable (^)(id _Nullable))function __attribute__((swift_name("update(_:function___:)")));
+ (BOOL)updateAndGet:(id)receiver function:(GNCBoolean *(^)(GNCBoolean *))function __attribute__((swift_name("updateAndGet(_:function:)")));
+ (int32_t)updateAndGet:(id)receiver function_:(GNCInt *(^)(GNCInt *))function __attribute__((swift_name("updateAndGet(_:function_:)")));
+ (int64_t)updateAndGet:(id)receiver function__:(GNCLong *(^)(GNCLong *))function __attribute__((swift_name("updateAndGet(_:function__:)")));
+ (id _Nullable)updateAndGet:(id)receiver function___:(id _Nullable (^)(id _Nullable))function __attribute__((swift_name("updateAndGet(_:function___:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SynchronizedKt_")))
@interface GNCSynchronizedKt_ : GNCBase
+ (GNCSynchronizedObject *)reentrantLock __attribute__((swift_name("reentrantLock()")));
+ (id _Nullable)synchronizedLock:(GNCSynchronizedObject *)lock block:(id _Nullable (^)(void))block __attribute__((swift_name("synchronized(lock:block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SerializersKt")))
@interface GNCSerializersKt : GNCBase
+ (id<GNCKSerializer>)serializer __attribute__((swift_name("serializer()")));
+ (id<GNCKSerializer>)serializerType:(id<GNCKotlinKType>)type __attribute__((swift_name("serializer(type:)")));
+ (id<GNCKSerializer> _Nullable)serializerOrNullType:(id<GNCKotlinKType>)type __attribute__((swift_name("serializerOrNull(type:)")));

/**
 * @note annotations
 *   kotlinx.serialization.InternalSerializationApi
*/
+ (id<GNCKSerializer>)serializer:(id<GNCKotlinKClass>)receiver __attribute__((swift_name("serializer(_:)")));

/**
 * @note annotations
 *   kotlinx.serialization.InternalSerializationApi
*/
+ (id<GNCKSerializer> _Nullable)serializerOrNull:(id<GNCKotlinKClass>)receiver __attribute__((swift_name("serializerOrNull(_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SerialFormatKt")))
@interface GNCSerialFormatKt : GNCBase
+ (id _Nullable)decodeFromByteArray:(id<GNCBinaryFormat>)receiver bytes:(GNCKotlinByteArray *)bytes __attribute__((swift_name("decodeFromByteArray(_:bytes:)")));
+ (id _Nullable)decodeFromHexString:(id<GNCBinaryFormat>)receiver hex:(NSString *)hex __attribute__((swift_name("decodeFromHexString(_:hex:)")));
+ (id _Nullable)decodeFromHexString:(id<GNCBinaryFormat>)receiver deserializer:(id<GNCDeserializationStrategy>)deserializer hex:(NSString *)hex __attribute__((swift_name("decodeFromHexString(_:deserializer:hex:)")));
+ (id _Nullable)decodeFromString:(id<GNCStringFormat>)receiver string:(NSString *)string __attribute__((swift_name("decodeFromString(_:string:)")));
+ (GNCKotlinByteArray *)encodeToByteArray:(id<GNCBinaryFormat>)receiver value:(id _Nullable)value __attribute__((swift_name("encodeToByteArray(_:value:)")));
+ (NSString *)encodeToHexString:(id<GNCBinaryFormat>)receiver value:(id _Nullable)value __attribute__((swift_name("encodeToHexString(_:value:)")));
+ (NSString *)encodeToHexString:(id<GNCBinaryFormat>)receiver serializer:(id<GNCSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeToHexString(_:serializer:value:)")));
+ (NSString *)encodeToString:(id<GNCStringFormat>)receiver value:(id _Nullable)value __attribute__((swift_name("encodeToString(_:value:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InlineClassDescriptorKt")))
@interface GNCInlineClassDescriptorKt : GNCBase

/**
 * @note annotations
 *   kotlinx.serialization.InternalSerializationApi
*/
+ (id<GNCSerialDescriptor>)InlinePrimitiveDescriptorName:(NSString *)name primitiveSerializer:(id<GNCKSerializer>)primitiveSerializer __attribute__((swift_name("InlinePrimitiveDescriptor(name:primitiveSerializer:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PluginExceptionsKt")))
@interface GNCPluginExceptionsKt : GNCBase

/**
 * @note annotations
 *   kotlinx.serialization.InternalSerializationApi
*/
+ (void)throwArrayMissingFieldExceptionSeenArray:(GNCKotlinIntArray *)seenArray goldenMaskArray:(GNCKotlinIntArray *)goldenMaskArray descriptor:(id<GNCSerialDescriptor>)descriptor __attribute__((swift_name("throwArrayMissingFieldException(seenArray:goldenMaskArray:descriptor:)")));

/**
 * @note annotations
 *   kotlinx.serialization.InternalSerializationApi
*/
+ (void)throwMissingFieldExceptionSeen:(int32_t)seen goldenMask:(int32_t)goldenMask descriptor:(id<GNCSerialDescriptor>)descriptor __attribute__((swift_name("throwMissingFieldException(seen:goldenMask:descriptor:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonInternalDependenciesKt")))
@interface GNCJsonInternalDependenciesKt : GNCBase

/**
 * @note annotations
 *   kotlinx.serialization.InternalSerializationApi
*/
+ (NSSet<NSString *> *)jsonCachedSerialNames:(id<GNCSerialDescriptor>)receiver __attribute__((swift_name("jsonCachedSerialNames(_:)"))) __attribute__((unavailable("Should not be used")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SerializersModuleKt")))
@interface GNCSerializersModuleKt : GNCBase
@property (class, readonly) GNCSerializersModule *EmptySerializersModule __attribute__((swift_name("EmptySerializersModule"))) __attribute__((deprecated("Deprecated in the favour of 'EmptySerializersModule()'")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SerializersModuleBuildersKt")))
@interface GNCSerializersModuleBuildersKt : GNCBase
+ (GNCSerializersModule *)EmptySerializersModule __attribute__((swift_name("EmptySerializersModule()")));
+ (GNCSerializersModule *)SerializersModuleBuilderAction:(void (^)(GNCSerializersModuleBuilder *))builderAction __attribute__((swift_name("SerializersModule(builderAction:)")));
+ (GNCSerializersModule *)serializersModuleOfKClass:(id<GNCKotlinKClass>)kClass serializer:(id<GNCKSerializer>)serializer __attribute__((swift_name("serializersModuleOf(kClass:serializer:)")));
+ (GNCSerializersModule *)serializersModuleOfSerializer:(id<GNCKSerializer>)serializer __attribute__((swift_name("serializersModuleOf(serializer:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContextAwareKt")))
@interface GNCContextAwareKt : GNCBase
+ (id<GNCKotlinKClass> _Nullable)capturedKClass:(id<GNCSerialDescriptor>)receiver __attribute__((swift_name("capturedKClass(_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SerialDescriptorKt")))
@interface GNCSerialDescriptorKt : GNCBase
+ (id)elementDescriptors:(id<GNCSerialDescriptor>)receiver __attribute__((swift_name("elementDescriptors(_:)")));
+ (id)elementNames:(id<GNCSerialDescriptor>)receiver __attribute__((swift_name("elementNames(_:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SerialDescriptorsKt")))
@interface GNCSerialDescriptorsKt : GNCBase
+ (id<GNCSerialDescriptor>)nullable:(id<GNCSerialDescriptor>)receiver __attribute__((swift_name("nullable(_:)")));
+ (id<GNCSerialDescriptor>)PrimitiveSerialDescriptorSerialName:(NSString *)serialName kind:(GNCPrimitiveKind *)kind __attribute__((swift_name("PrimitiveSerialDescriptor(serialName:kind:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
+ (id<GNCSerialDescriptor>)SerialDescriptorSerialName:(NSString *)serialName original:(id<GNCSerialDescriptor>)original __attribute__((swift_name("SerialDescriptor(serialName:original:)")));
+ (id<GNCSerialDescriptor>)buildClassSerialDescriptorSerialName:(NSString *)serialName typeParameters:(GNCKotlinArray<id<GNCSerialDescriptor>> *)typeParameters builderAction:(void (^)(GNCClassSerialDescriptorBuilder *))builderAction __attribute__((swift_name("buildClassSerialDescriptor(serialName:typeParameters:builderAction:)")));

/**
 * @note annotations
 *   kotlinx.serialization.InternalSerializationApi
*/
+ (id<GNCSerialDescriptor>)buildSerialDescriptorSerialName:(NSString *)serialName kind:(GNCSerialKind *)kind typeParameters:(GNCKotlinArray<id<GNCSerialDescriptor>> *)typeParameters builder:(void (^)(GNCClassSerialDescriptorBuilder *))builder __attribute__((swift_name("buildSerialDescriptor(serialName:kind:typeParameters:builder:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
+ (id<GNCSerialDescriptor>)listSerialDescriptor __attribute__((swift_name("listSerialDescriptor()")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
+ (id<GNCSerialDescriptor>)listSerialDescriptorElementDescriptor:(id<GNCSerialDescriptor>)elementDescriptor __attribute__((swift_name("listSerialDescriptor(elementDescriptor:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
+ (id<GNCSerialDescriptor>)mapSerialDescriptor __attribute__((swift_name("mapSerialDescriptor()")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
+ (id<GNCSerialDescriptor>)mapSerialDescriptorKeyDescriptor:(id<GNCSerialDescriptor>)keyDescriptor valueDescriptor:(id<GNCSerialDescriptor>)valueDescriptor __attribute__((swift_name("mapSerialDescriptor(keyDescriptor:valueDescriptor:)")));
+ (id<GNCSerialDescriptor>)serialDescriptor __attribute__((swift_name("serialDescriptor()")));
+ (id<GNCSerialDescriptor>)serialDescriptorType:(id<GNCKotlinKType>)type __attribute__((swift_name("serialDescriptor(type:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
+ (id<GNCSerialDescriptor>)setSerialDescriptor __attribute__((swift_name("setSerialDescriptor()")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
+ (id<GNCSerialDescriptor>)setSerialDescriptorElementDescriptor:(id<GNCSerialDescriptor>)elementDescriptor __attribute__((swift_name("setSerialDescriptor(elementDescriptor:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BuiltinSerializersKt")))
@interface GNCBuiltinSerializersKt : GNCBase
+ (id<GNCKSerializer>)nullable:(id<GNCKSerializer>)receiver __attribute__((swift_name("nullable(_:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
+ (id<GNCKSerializer>)ArraySerializerKClass:(id<GNCKotlinKClass>)kClass elementSerializer:(id<GNCKSerializer>)elementSerializer __attribute__((swift_name("ArraySerializer(kClass:elementSerializer:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
+ (id<GNCKSerializer>)ArraySerializerElementSerializer:(id<GNCKSerializer>)elementSerializer __attribute__((swift_name("ArraySerializer(elementSerializer:)")));
+ (id<GNCKSerializer>)BooleanArraySerializer __attribute__((swift_name("BooleanArraySerializer()")));
+ (id<GNCKSerializer>)ByteArraySerializer __attribute__((swift_name("ByteArraySerializer()")));
+ (id<GNCKSerializer>)CharArraySerializer __attribute__((swift_name("CharArraySerializer()")));
+ (id<GNCKSerializer>)DoubleArraySerializer __attribute__((swift_name("DoubleArraySerializer()")));
+ (id<GNCKSerializer>)FloatArraySerializer __attribute__((swift_name("FloatArraySerializer()")));
+ (id<GNCKSerializer>)IntArraySerializer __attribute__((swift_name("IntArraySerializer()")));
+ (id<GNCKSerializer>)ListSerializerElementSerializer:(id<GNCKSerializer>)elementSerializer __attribute__((swift_name("ListSerializer(elementSerializer:)")));
+ (id<GNCKSerializer>)LongArraySerializer __attribute__((swift_name("LongArraySerializer()")));
+ (id<GNCKSerializer>)MapEntrySerializerKeySerializer:(id<GNCKSerializer>)keySerializer valueSerializer:(id<GNCKSerializer>)valueSerializer __attribute__((swift_name("MapEntrySerializer(keySerializer:valueSerializer:)")));
+ (id<GNCKSerializer>)MapSerializerKeySerializer:(id<GNCKSerializer>)keySerializer valueSerializer:(id<GNCKSerializer>)valueSerializer __attribute__((swift_name("MapSerializer(keySerializer:valueSerializer:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
*/
+ (id<GNCKSerializer>)NothingSerializer __attribute__((swift_name("NothingSerializer()")));
+ (id<GNCKSerializer>)PairSerializerKeySerializer:(id<GNCKSerializer>)keySerializer valueSerializer:(id<GNCKSerializer>)valueSerializer __attribute__((swift_name("PairSerializer(keySerializer:valueSerializer:)")));
+ (id<GNCKSerializer>)SetSerializerElementSerializer:(id<GNCKSerializer>)elementSerializer __attribute__((swift_name("SetSerializer(elementSerializer:)")));
+ (id<GNCKSerializer>)ShortArraySerializer __attribute__((swift_name("ShortArraySerializer()")));
+ (id<GNCKSerializer>)TripleSerializerASerializer:(id<GNCKSerializer>)aSerializer bSerializer:(id<GNCKSerializer>)bSerializer cSerializer:(id<GNCKSerializer>)cSerializer __attribute__((swift_name("TripleSerializer(aSerializer:bSerializer:cSerializer:)")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
 *   kotlin.ExperimentalUnsignedTypes
*/
+ (id<GNCKSerializer>)UByteArraySerializer __attribute__((swift_name("UByteArraySerializer()")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
 *   kotlin.ExperimentalUnsignedTypes
*/
+ (id<GNCKSerializer>)UIntArraySerializer __attribute__((swift_name("UIntArraySerializer()")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
 *   kotlin.ExperimentalUnsignedTypes
*/
+ (id<GNCKSerializer>)ULongArraySerializer __attribute__((swift_name("ULongArraySerializer()")));

/**
 * @note annotations
 *   kotlinx.serialization.ExperimentalSerializationApi
 *   kotlin.ExperimentalUnsignedTypes
*/
+ (id<GNCKSerializer>)UShortArraySerializer __attribute__((swift_name("UShortArraySerializer()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DecodingKt")))
@interface GNCDecodingKt : GNCBase
+ (id _Nullable)decodeStructure:(id<GNCDecoder>)receiver descriptor:(id<GNCSerialDescriptor>)descriptor block:(id _Nullable (^)(id<GNCCompositeDecoder>))block __attribute__((swift_name("decodeStructure(_:descriptor:block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EncodingKt")))
@interface GNCEncodingKt : GNCBase
+ (void)encodeCollection:(id<GNCEncoder>)receiver descriptor:(id<GNCSerialDescriptor>)descriptor collectionSize:(int32_t)collectionSize block:(void (^)(id<GNCCompositeEncoder>))block __attribute__((swift_name("encodeCollection(_:descriptor:collectionSize:block:)")));
+ (void)encodeCollection:(id<GNCEncoder>)receiver descriptor:(id<GNCSerialDescriptor>)descriptor collection:(id)collection block:(void (^)(id<GNCCompositeEncoder>, GNCInt *, id _Nullable))block __attribute__((swift_name("encodeCollection(_:descriptor:collection:block:)")));
+ (void)encodeStructure:(id<GNCEncoder>)receiver descriptor:(id<GNCSerialDescriptor>)descriptor block:(void (^)(id<GNCCompositeEncoder>))block __attribute__((swift_name("encodeStructure(_:descriptor:block:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinFloatArray")))
@interface GNCKotlinFloatArray : GNCBase
+ (instancetype)arrayWithSize:(int32_t)size __attribute__((swift_name("init(size:)")));
+ (instancetype)arrayWithSize:(int32_t)size init:(GNCFloat *(^)(GNCInt *))init __attribute__((swift_name("init(size:init:)")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (float)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (GNCKotlinFloatIterator *)iterator __attribute__((swift_name("iterator()")));
- (void)setIndex:(int32_t)index value:(float)value __attribute__((swift_name("set(index:value:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinEnumCompanion")))
@interface GNCKotlinEnumCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCKotlinEnumCompanion *shared __attribute__((swift_name("shared")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinDoubleArray")))
@interface GNCKotlinDoubleArray : GNCBase
+ (instancetype)arrayWithSize:(int32_t)size __attribute__((swift_name("init(size:)")));
+ (instancetype)arrayWithSize:(int32_t)size init:(GNCDouble *(^)(GNCInt *))init __attribute__((swift_name("init(size:init:)")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (double)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (GNCKotlinDoubleIterator *)iterator __attribute__((swift_name("iterator()")));
- (void)setIndex:(int32_t)index value:(double)value __attribute__((swift_name("set(index:value:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end

__attribute__((swift_name("KotlinFunction")))
@protocol GNCKotlinFunction
@required
@end

__attribute__((swift_name("KotlinSuspendFunction0")))
@protocol GNCKotlinSuspendFunction0 <GNCKotlinFunction>
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeWithCompletionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(completionHandler:)")));
@end

__attribute__((swift_name("KotlinSuspendFunction1")))
@protocol GNCKotlinSuspendFunction1 <GNCKotlinFunction>
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeP1:(id _Nullable)p1 completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(p1:completionHandler:)")));
@end

__attribute__((swift_name("KotlinKDeclarationContainer")))
@protocol GNCKotlinKDeclarationContainer
@required
@end

__attribute__((swift_name("KotlinKAnnotatedElement")))
@protocol GNCKotlinKAnnotatedElement
@required
@end


/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.1")
*/
__attribute__((swift_name("KotlinKClassifier")))
@protocol GNCKotlinKClassifier
@required
@end

__attribute__((swift_name("KotlinKClass")))
@protocol GNCKotlinKClass <GNCKotlinKDeclarationContainer, GNCKotlinKAnnotatedElement, GNCKotlinKClassifier>
@required

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.1")
*/
- (BOOL)isInstanceValue:(id _Nullable)value __attribute__((swift_name("isInstance(value:)")));
@property (readonly) NSString * _Nullable qualifiedName __attribute__((swift_name("qualifiedName")));
@property (readonly) NSString * _Nullable simpleName __attribute__((swift_name("simpleName")));
@end

__attribute__((swift_name("KotlinSuspendFunction2")))
@protocol GNCKotlinSuspendFunction2 <GNCKotlinFunction>
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeP1:(id _Nullable)p1 p2:(id _Nullable)p2 completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(p1:p2:completionHandler:)")));
@end

__attribute__((swift_name("KotlinSuspendFunction3")))
@protocol GNCKotlinSuspendFunction3 <GNCKotlinFunction>
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeP1:(id _Nullable)p1 p2:(id _Nullable)p2 p3:(id _Nullable)p3 completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(p1:p2:p3:completionHandler:)")));
@end

__attribute__((swift_name("KotlinSequence")))
@protocol GNCKotlinSequence
@required
- (id<GNCKotlinIterator>)iterator __attribute__((swift_name("iterator()")));
@end

__attribute__((swift_name("KotlinMapEntry")))
@protocol GNCKotlinMapEntry
@required
@property (readonly) id _Nullable key __attribute__((swift_name("key")));
@property (readonly) id _Nullable value_ __attribute__((swift_name("value_")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinNothing")))
@interface GNCKotlinNothing : GNCBase
@end

__attribute__((swift_name("KotlinKType")))
@protocol GNCKotlinKType
@required

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.1")
*/
@property (readonly) NSArray<GNCKotlinKTypeProjection *> *arguments __attribute__((swift_name("arguments")));

/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.1")
*/
@property (readonly) id<GNCKotlinKClassifier> _Nullable classifier __attribute__((swift_name("classifier")));
@property (readonly) BOOL isMarkedNullable __attribute__((swift_name("isMarkedNullable")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinCharArray")))
@interface GNCKotlinCharArray : GNCBase
+ (instancetype)arrayWithSize:(int32_t)size __attribute__((swift_name("init(size:)")));
+ (instancetype)arrayWithSize:(int32_t)size init:(id (^)(GNCInt *))init __attribute__((swift_name("init(size:init:)")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (unichar)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (GNCKotlinCharIterator *)iterator __attribute__((swift_name("iterator()")));
- (void)setIndex:(int32_t)index value:(unichar)value __attribute__((swift_name("set(index:value:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinAtomicReference")))
@interface GNCKotlinAtomicReference<T> : GNCBase
- (instancetype)initWithValue:(T _Nullable)value __attribute__((swift_name("init(value:)"))) __attribute__((objc_designated_initializer));
- (BOOL)compareAndSetExpected:(T _Nullable)expected new:(T _Nullable)new_ __attribute__((swift_name("compareAndSet(expected:new:)")));
- (T _Nullable)compareAndSwapExpected:(T _Nullable)expected new:(T _Nullable)new_ __attribute__((swift_name("compareAndSwap(expected:new:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property T _Nullable value __attribute__((swift_name("value")));
@end

__attribute__((swift_name("KotlinAnnotation")))
@protocol GNCKotlinAnnotation
@required
@end

__attribute__((swift_name("KotlinCValuesRef")))
@interface GNCKotlinCValuesRef<T> : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void *)getPointerScope:(GNCKotlinAutofreeScope *)scope __attribute__((swift_name("getPointer(scope:)")));
@end

__attribute__((swift_name("KotlinCValues")))
@interface GNCKotlinCValues<T> : GNCKotlinCValuesRef<T>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (void *)getPointerScope:(GNCKotlinAutofreeScope *)scope __attribute__((swift_name("getPointer(scope:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (void *)placePlacement:(void *)placement __attribute__((swift_name("place(placement:)")));
@property (readonly) int32_t align __attribute__((swift_name("align")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end

__attribute__((swift_name("KotlinCValue")))
@interface GNCKotlinCValue<T> : GNCKotlinCValues<T>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end

__attribute__((swift_name("KotlinReadOnlyProperty")))
@protocol GNCKotlinReadOnlyProperty
@required
- (id _Nullable)getValueThisRef:(id _Nullable)thisRef property:(id<GNCKotlinKProperty>)property __attribute__((swift_name("getValue(thisRef:property:)")));
@end

__attribute__((swift_name("KotlinReadWriteProperty")))
@protocol GNCKotlinReadWriteProperty <GNCKotlinReadOnlyProperty>
@required
- (void)setValueThisRef:(id _Nullable)thisRef property:(id<GNCKotlinKProperty>)property value:(id _Nullable)value __attribute__((swift_name("setValue(thisRef:property:value:)")));
@end

__attribute__((swift_name("KotlinKCallable")))
@protocol GNCKotlinKCallable <GNCKotlinKAnnotatedElement>
@required
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) id<GNCKotlinKType> returnType __attribute__((swift_name("returnType")));
@end

__attribute__((swift_name("KotlinKProperty")))
@protocol GNCKotlinKProperty <GNCKotlinKCallable>
@required
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinLongProgression.Companion")))
@interface GNCKotlinLongProgressionCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCKotlinLongProgressionCompanion *shared __attribute__((swift_name("shared")));
- (GNCKotlinLongProgression *)fromClosedRangeRangeStart:(int64_t)rangeStart rangeEnd:(int64_t)rangeEnd step:(int64_t)step __attribute__((swift_name("fromClosedRange(rangeStart:rangeEnd:step:)")));
@end

__attribute__((swift_name("KotlinLongIterator")))
@interface GNCKotlinLongIterator : GNCBase <GNCKotlinIterator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (GNCLong *)next __attribute__((swift_name("next()")));
- (int64_t)nextLong __attribute__((swift_name("nextLong()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinLongRange.Companion")))
@interface GNCKotlinLongRangeCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCKotlinLongRangeCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) GNCKotlinLongRange *EMPTY __attribute__((swift_name("EMPTY")));
@end

__attribute__((swift_name("KotlinByteIterator")))
@interface GNCKotlinByteIterator : GNCBase <GNCKotlinIterator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (GNCByte *)next __attribute__((swift_name("next()")));
- (int8_t)nextByte __attribute__((swift_name("nextByte()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinShortArray")))
@interface GNCKotlinShortArray : GNCBase
+ (instancetype)arrayWithSize:(int32_t)size __attribute__((swift_name("init(size:)")));
+ (instancetype)arrayWithSize:(int32_t)size init:(GNCShort *(^)(GNCInt *))init __attribute__((swift_name("init(size:init:)")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (int16_t)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (GNCKotlinShortIterator *)iterator __attribute__((swift_name("iterator()")));
- (void)setIndex:(int32_t)index value:(int16_t)value __attribute__((swift_name("set(index:value:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end

__attribute__((swift_name("KotlinIntIterator")))
@interface GNCKotlinIntIterator : GNCBase <GNCKotlinIterator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (GNCInt *)next __attribute__((swift_name("next()")));
- (int32_t)nextInt __attribute__((swift_name("nextInt()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinIntProgression.Companion")))
@interface GNCKotlinIntProgressionCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCKotlinIntProgressionCompanion *shared __attribute__((swift_name("shared")));
- (GNCKotlinIntProgression *)fromClosedRangeRangeStart:(int32_t)rangeStart rangeEnd:(int32_t)rangeEnd step:(int32_t)step __attribute__((swift_name("fromClosedRange(rangeStart:rangeEnd:step:)")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinIntRange.Companion")))
@interface GNCKotlinIntRangeCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCKotlinIntRangeCompanion *shared __attribute__((swift_name("shared")));
@property (readonly) GNCKotlinIntRange *EMPTY __attribute__((swift_name("EMPTY")));
@end


/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.6")
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinDurationUnit")))
@interface GNCKotlinDurationUnit : GNCKotlinEnum<GNCKotlinDurationUnit *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCKotlinDurationUnit *nanoseconds __attribute__((swift_name("nanoseconds")));
@property (class, readonly) GNCKotlinDurationUnit *microseconds __attribute__((swift_name("microseconds")));
@property (class, readonly) GNCKotlinDurationUnit *milliseconds __attribute__((swift_name("milliseconds")));
@property (class, readonly) GNCKotlinDurationUnit *seconds __attribute__((swift_name("seconds")));
@property (class, readonly) GNCKotlinDurationUnit *minutes __attribute__((swift_name("minutes")));
@property (class, readonly) GNCKotlinDurationUnit *hours __attribute__((swift_name("hours")));
@property (class, readonly) GNCKotlinDurationUnit *days __attribute__((swift_name("days")));
+ (GNCKotlinArray<GNCKotlinDurationUnit *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinPair")))
@interface GNCKotlinPair<__covariant A, __covariant B> : GNCBase
- (instancetype)initWithFirst:(A _Nullable)first second:(B _Nullable)second __attribute__((swift_name("init(first:second:)"))) __attribute__((objc_designated_initializer));
- (GNCKotlinPair<A, B> *)doCopyFirst:(A _Nullable)first second:(B _Nullable)second __attribute__((swift_name("doCopy(first:second:)")));
- (BOOL)equalsOther:(id _Nullable)other __attribute__((swift_name("equals(other:)")));
- (int32_t)hashCode __attribute__((swift_name("hashCode()")));
- (NSString *)toString __attribute__((swift_name("toString()")));
@property (readonly) A _Nullable first __attribute__((swift_name("first")));
@property (readonly) B _Nullable second __attribute__((swift_name("second")));
@end

__attribute__((swift_name("KotlinNativePlacement")))
@protocol GNCKotlinNativePlacement
@required
- (void *)doAllocSize:(int32_t)size align:(int32_t)align __attribute__((swift_name("doAlloc(size:align:)")));
- (void *)doAllocSize:(int64_t)size align_:(int32_t)align __attribute__((swift_name("doAlloc(size:align_:)")));
@end

__attribute__((swift_name("KotlinNativeFreeablePlacement")))
@protocol GNCKotlinNativeFreeablePlacement <GNCKotlinNativePlacement>
@required
- (void)freeMem:(void * _Nullable)mem __attribute__((swift_name("free(mem:)")));
@end

__attribute__((swift_name("KotlinSuspendFunction5")))
@protocol GNCKotlinSuspendFunction5 <GNCKotlinFunction>
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeP1:(id _Nullable)p1 p2:(id _Nullable)p2 p3:(id _Nullable)p3 p4:(id _Nullable)p4 p5:(id _Nullable)p5 completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(p1:p2:p3:p4:p5:completionHandler:)")));
@end

__attribute__((swift_name("KotlinSuspendFunction4")))
@protocol GNCKotlinSuspendFunction4 <GNCKotlinFunction>
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeP1:(id _Nullable)p1 p2:(id _Nullable)p2 p3:(id _Nullable)p3 p4:(id _Nullable)p4 completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(p1:p2:p3:p4:completionHandler:)")));
@end

__attribute__((swift_name("KotlinSuspendFunction6")))
@protocol GNCKotlinSuspendFunction6 <GNCKotlinFunction>
@required

/**
 * @note This method converts instances of CancellationException to errors.
 * Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeP1:(id _Nullable)p1 p2:(id _Nullable)p2 p3:(id _Nullable)p3 p4:(id _Nullable)p4 p5:(id _Nullable)p5 p6:(id _Nullable)p6 completionHandler:(void (^)(id _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(p1:p2:p3:p4:p5:p6:completionHandler:)")));
@end

__attribute__((swift_name("KotlinFloatIterator")))
@interface GNCKotlinFloatIterator : GNCBase <GNCKotlinIterator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (GNCFloat *)next __attribute__((swift_name("next()")));
- (float)nextFloat __attribute__((swift_name("nextFloat()")));
@end

__attribute__((swift_name("KotlinDoubleIterator")))
@interface GNCKotlinDoubleIterator : GNCBase <GNCKotlinIterator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (GNCDouble *)next __attribute__((swift_name("next()")));
- (double)nextDouble __attribute__((swift_name("nextDouble()")));
@end


/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.1")
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinKTypeProjection")))
@interface GNCKotlinKTypeProjection : GNCBase
- (instancetype)initWithVariance:(GNCKotlinKVariance * _Nullable)variance type:(id<GNCKotlinKType> _Nullable)type __attribute__((swift_name("init(variance:type:)"))) __attribute__((objc_designated_initializer));
@property (class, readonly, getter=companion) GNCKotlinKTypeProjectionCompanion *companion __attribute__((swift_name("companion")));
- (GNCKotlinKTypeProjection *)doCopyVariance:(GNCKotlinKVariance * _Nullable)variance type:(id<GNCKotlinKType> _Nullable)type __attribute__((swift_name("doCopy(variance:type:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<GNCKotlinKType> _Nullable type __attribute__((swift_name("type")));
@property (readonly) GNCKotlinKVariance * _Nullable variance __attribute__((swift_name("variance")));
@end

__attribute__((swift_name("KotlinCharIterator")))
@interface GNCKotlinCharIterator : GNCBase <GNCKotlinIterator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (id)next __attribute__((swift_name("next()")));
- (unichar)nextChar __attribute__((swift_name("nextChar()")));
@end

__attribute__((swift_name("KotlinDeferScope")))
@interface GNCKotlinDeferScope : GNCBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)deferBlock:(void (^)(void))block __attribute__((swift_name("defer(block:)")));
@end

__attribute__((swift_name("KotlinAutofreeScope")))
@interface GNCKotlinAutofreeScope : GNCKotlinDeferScope <GNCKotlinNativePlacement>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void *)doAllocSize:(int64_t)size align_:(int32_t)align __attribute__((swift_name("doAlloc(size:align_:)")));
@end

__attribute__((swift_name("KotlinShortIterator")))
@interface GNCKotlinShortIterator : GNCBase <GNCKotlinIterator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (GNCShort *)next __attribute__((swift_name("next()")));
- (int16_t)nextShort __attribute__((swift_name("nextShort()")));
@end


/**
 * @note annotations
 *   kotlin.SinceKotlin(version="1.1")
*/
__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinKVariance")))
@interface GNCKotlinKVariance : GNCKotlinEnum<GNCKotlinKVariance *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) GNCKotlinKVariance *invariant __attribute__((swift_name("invariant")));
@property (class, readonly) GNCKotlinKVariance *in __attribute__((swift_name("in")));
@property (class, readonly) GNCKotlinKVariance *out __attribute__((swift_name("out")));
+ (GNCKotlinArray<GNCKotlinKVariance *> *)values __attribute__((swift_name("values()")));
@end

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinKTypeProjection.Companion")))
@interface GNCKotlinKTypeProjectionCompanion : GNCBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (class, readonly, getter=shared) GNCKotlinKTypeProjectionCompanion *shared __attribute__((swift_name("shared")));

/**
 * @note annotations
 *   kotlin.jvm.JvmStatic
*/
- (GNCKotlinKTypeProjection *)contravariantType:(id<GNCKotlinKType>)type __attribute__((swift_name("contravariant(type:)")));

/**
 * @note annotations
 *   kotlin.jvm.JvmStatic
*/
- (GNCKotlinKTypeProjection *)covariantType:(id<GNCKotlinKType>)type __attribute__((swift_name("covariant(type:)")));

/**
 * @note annotations
 *   kotlin.jvm.JvmStatic
*/
- (GNCKotlinKTypeProjection *)invariantType:(id<GNCKotlinKType>)type __attribute__((swift_name("invariant(type:)")));
@property (readonly) GNCKotlinKTypeProjection *STAR __attribute__((swift_name("STAR")));
@end

#pragma pop_macro("_Nullable_result")
#pragma clang diagnostic pop
NS_ASSUME_NONNULL_END
